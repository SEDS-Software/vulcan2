
flightcontrol.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c694  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a0  0800c828  0800c828  0001c828  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800cec8  0800cec8  0001cec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ced0  0800ced0  0001ced0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ced4  0800ced4  0001ced4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  20000000  0800ced8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
  8 .bss          0000a668  2000007c  2000007c  0002007c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2000a6e4  2000a6e4  0002007c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002b4b0  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000054b7  00000000  00000000  0004b55c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00014434  00000000  00000000  00050a13  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001510  00000000  00000000  00064e48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000022c8  00000000  00000000  00066358  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000c0bf  00000000  00000000  00068620  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00007aad  00000000  00000000  000746df  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0007c18c  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000047c4  00000000  00000000  0007c208  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c80c 	.word	0x0800c80c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	0800c80c 	.word	0x0800c80c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f092 0f00 	teq	r2, #0
 800055a:	bf14      	ite	ne
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000568:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800056c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000570:	e720      	b.n	80003b4 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_ul2d>:
 8000574:	ea50 0201 	orrs.w	r2, r0, r1
 8000578:	bf08      	it	eq
 800057a:	4770      	bxeq	lr
 800057c:	b530      	push	{r4, r5, lr}
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	e00a      	b.n	800059a <__aeabi_l2d+0x16>

08000584 <__aeabi_l2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000592:	d502      	bpl.n	800059a <__aeabi_l2d+0x16>
 8000594:	4240      	negs	r0, r0
 8000596:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800059a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800059e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005a6:	f43f aedc 	beq.w	8000362 <__adddf3+0xe6>
 80005aa:	f04f 0203 	mov.w	r2, #3
 80005ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005b2:	bf18      	it	ne
 80005b4:	3203      	addne	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005c2:	f1c2 0320 	rsb	r3, r2, #32
 80005c6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ca:	fa20 f002 	lsr.w	r0, r0, r2
 80005ce:	fa01 fe03 	lsl.w	lr, r1, r3
 80005d2:	ea40 000e 	orr.w	r0, r0, lr
 80005d6:	fa21 f102 	lsr.w	r1, r1, r2
 80005da:	4414      	add	r4, r2
 80005dc:	e6c1      	b.n	8000362 <__adddf3+0xe6>
 80005de:	bf00      	nop

080005e0 <__aeabi_dmul>:
 80005e0:	b570      	push	{r4, r5, r6, lr}
 80005e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ee:	bf1d      	ittte	ne
 80005f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005f4:	ea94 0f0c 	teqne	r4, ip
 80005f8:	ea95 0f0c 	teqne	r5, ip
 80005fc:	f000 f8de 	bleq	80007bc <__aeabi_dmul+0x1dc>
 8000600:	442c      	add	r4, r5
 8000602:	ea81 0603 	eor.w	r6, r1, r3
 8000606:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800060a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800060e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000612:	bf18      	it	ne
 8000614:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000618:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800061c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000620:	d038      	beq.n	8000694 <__aeabi_dmul+0xb4>
 8000622:	fba0 ce02 	umull	ip, lr, r0, r2
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800062e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000632:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000636:	f04f 0600 	mov.w	r6, #0
 800063a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800063e:	f09c 0f00 	teq	ip, #0
 8000642:	bf18      	it	ne
 8000644:	f04e 0e01 	orrne.w	lr, lr, #1
 8000648:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800064c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000650:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000654:	d204      	bcs.n	8000660 <__aeabi_dmul+0x80>
 8000656:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800065a:	416d      	adcs	r5, r5
 800065c:	eb46 0606 	adc.w	r6, r6, r6
 8000660:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000664:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000668:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800066c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000670:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000674:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000678:	bf88      	it	hi
 800067a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800067e:	d81e      	bhi.n	80006be <__aeabi_dmul+0xde>
 8000680:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000684:	bf08      	it	eq
 8000686:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800068a:	f150 0000 	adcs.w	r0, r0, #0
 800068e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000698:	ea46 0101 	orr.w	r1, r6, r1
 800069c:	ea40 0002 	orr.w	r0, r0, r2
 80006a0:	ea81 0103 	eor.w	r1, r1, r3
 80006a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006a8:	bfc2      	ittt	gt
 80006aa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	popgt	{r4, r5, r6, pc}
 80006b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006b8:	f04f 0e00 	mov.w	lr, #0
 80006bc:	3c01      	subs	r4, #1
 80006be:	f300 80ab 	bgt.w	8000818 <__aeabi_dmul+0x238>
 80006c2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006c6:	bfde      	ittt	le
 80006c8:	2000      	movle	r0, #0
 80006ca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ce:	bd70      	pople	{r4, r5, r6, pc}
 80006d0:	f1c4 0400 	rsb	r4, r4, #0
 80006d4:	3c20      	subs	r4, #32
 80006d6:	da35      	bge.n	8000744 <__aeabi_dmul+0x164>
 80006d8:	340c      	adds	r4, #12
 80006da:	dc1b      	bgt.n	8000714 <__aeabi_dmul+0x134>
 80006dc:	f104 0414 	add.w	r4, r4, #20
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f305 	lsl.w	r3, r0, r5
 80006e8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000700:	fa21 f604 	lsr.w	r6, r1, r4
 8000704:	eb42 0106 	adc.w	r1, r2, r6
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 040c 	rsb	r4, r4, #12
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f304 	lsl.w	r3, r0, r4
 8000720:	fa20 f005 	lsr.w	r0, r0, r5
 8000724:	fa01 f204 	lsl.w	r2, r1, r4
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000730:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000734:	f141 0100 	adc.w	r1, r1, #0
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f1c4 0520 	rsb	r5, r4, #32
 8000748:	fa00 f205 	lsl.w	r2, r0, r5
 800074c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000750:	fa20 f304 	lsr.w	r3, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea43 0302 	orr.w	r3, r3, r2
 800075c:	fa21 f004 	lsr.w	r0, r1, r4
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000764:	fa21 f204 	lsr.w	r2, r1, r4
 8000768:	ea20 0002 	bic.w	r0, r0, r2
 800076c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f094 0f00 	teq	r4, #0
 8000780:	d10f      	bne.n	80007a2 <__aeabi_dmul+0x1c2>
 8000782:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000786:	0040      	lsls	r0, r0, #1
 8000788:	eb41 0101 	adc.w	r1, r1, r1
 800078c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000790:	bf08      	it	eq
 8000792:	3c01      	subeq	r4, #1
 8000794:	d0f7      	beq.n	8000786 <__aeabi_dmul+0x1a6>
 8000796:	ea41 0106 	orr.w	r1, r1, r6
 800079a:	f095 0f00 	teq	r5, #0
 800079e:	bf18      	it	ne
 80007a0:	4770      	bxne	lr
 80007a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007a6:	0052      	lsls	r2, r2, #1
 80007a8:	eb43 0303 	adc.w	r3, r3, r3
 80007ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3d01      	subeq	r5, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1c6>
 80007b6:	ea43 0306 	orr.w	r3, r3, r6
 80007ba:	4770      	bx	lr
 80007bc:	ea94 0f0c 	teq	r4, ip
 80007c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007c4:	bf18      	it	ne
 80007c6:	ea95 0f0c 	teqne	r5, ip
 80007ca:	d00c      	beq.n	80007e6 <__aeabi_dmul+0x206>
 80007cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d0:	bf18      	it	ne
 80007d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d6:	d1d1      	bne.n	800077c <__aeabi_dmul+0x19c>
 80007d8:	ea81 0103 	eor.w	r1, r1, r3
 80007dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e0:	f04f 0000 	mov.w	r0, #0
 80007e4:	bd70      	pop	{r4, r5, r6, pc}
 80007e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ea:	bf06      	itte	eq
 80007ec:	4610      	moveq	r0, r2
 80007ee:	4619      	moveq	r1, r3
 80007f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f4:	d019      	beq.n	800082a <__aeabi_dmul+0x24a>
 80007f6:	ea94 0f0c 	teq	r4, ip
 80007fa:	d102      	bne.n	8000802 <__aeabi_dmul+0x222>
 80007fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000800:	d113      	bne.n	800082a <__aeabi_dmul+0x24a>
 8000802:	ea95 0f0c 	teq	r5, ip
 8000806:	d105      	bne.n	8000814 <__aeabi_dmul+0x234>
 8000808:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800080c:	bf1c      	itt	ne
 800080e:	4610      	movne	r0, r2
 8000810:	4619      	movne	r1, r3
 8000812:	d10a      	bne.n	800082a <__aeabi_dmul+0x24a>
 8000814:	ea81 0103 	eor.w	r1, r1, r3
 8000818:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800081c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000820:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000824:	f04f 0000 	mov.w	r0, #0
 8000828:	bd70      	pop	{r4, r5, r6, pc}
 800082a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800082e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000832:	bd70      	pop	{r4, r5, r6, pc}

08000834 <__aeabi_ddiv>:
 8000834:	b570      	push	{r4, r5, r6, lr}
 8000836:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800083a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800083e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000842:	bf1d      	ittte	ne
 8000844:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000848:	ea94 0f0c 	teqne	r4, ip
 800084c:	ea95 0f0c 	teqne	r5, ip
 8000850:	f000 f8a7 	bleq	80009a2 <__aeabi_ddiv+0x16e>
 8000854:	eba4 0405 	sub.w	r4, r4, r5
 8000858:	ea81 0e03 	eor.w	lr, r1, r3
 800085c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000860:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000864:	f000 8088 	beq.w	8000978 <__aeabi_ddiv+0x144>
 8000868:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800086c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000870:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000874:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000878:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800087c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000880:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000884:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000888:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800088c:	429d      	cmp	r5, r3
 800088e:	bf08      	it	eq
 8000890:	4296      	cmpeq	r6, r2
 8000892:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000896:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800089a:	d202      	bcs.n	80008a2 <__aeabi_ddiv+0x6e>
 800089c:	085b      	lsrs	r3, r3, #1
 800089e:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a2:	1ab6      	subs	r6, r6, r2
 80008a4:	eb65 0503 	sbc.w	r5, r5, r3
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008b2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000910:	ea55 0e06 	orrs.w	lr, r5, r6
 8000914:	d018      	beq.n	8000948 <__aeabi_ddiv+0x114>
 8000916:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800091a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800091e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000922:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000926:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800092a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800092e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000932:	d1c0      	bne.n	80008b6 <__aeabi_ddiv+0x82>
 8000934:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000938:	d10b      	bne.n	8000952 <__aeabi_ddiv+0x11e>
 800093a:	ea41 0100 	orr.w	r1, r1, r0
 800093e:	f04f 0000 	mov.w	r0, #0
 8000942:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000946:	e7b6      	b.n	80008b6 <__aeabi_ddiv+0x82>
 8000948:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800094c:	bf04      	itt	eq
 800094e:	4301      	orreq	r1, r0
 8000950:	2000      	moveq	r0, #0
 8000952:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000956:	bf88      	it	hi
 8000958:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800095c:	f63f aeaf 	bhi.w	80006be <__aeabi_dmul+0xde>
 8000960:	ebb5 0c03 	subs.w	ip, r5, r3
 8000964:	bf04      	itt	eq
 8000966:	ebb6 0c02 	subseq.w	ip, r6, r2
 800096a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800096e:	f150 0000 	adcs.w	r0, r0, #0
 8000972:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000976:	bd70      	pop	{r4, r5, r6, pc}
 8000978:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800097c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000980:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000984:	bfc2      	ittt	gt
 8000986:	ebd4 050c 	rsbsgt	r5, r4, ip
 800098a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800098e:	bd70      	popgt	{r4, r5, r6, pc}
 8000990:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000994:	f04f 0e00 	mov.w	lr, #0
 8000998:	3c01      	subs	r4, #1
 800099a:	e690      	b.n	80006be <__aeabi_dmul+0xde>
 800099c:	ea45 0e06 	orr.w	lr, r5, r6
 80009a0:	e68d      	b.n	80006be <__aeabi_dmul+0xde>
 80009a2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009a6:	ea94 0f0c 	teq	r4, ip
 80009aa:	bf08      	it	eq
 80009ac:	ea95 0f0c 	teqeq	r5, ip
 80009b0:	f43f af3b 	beq.w	800082a <__aeabi_dmul+0x24a>
 80009b4:	ea94 0f0c 	teq	r4, ip
 80009b8:	d10a      	bne.n	80009d0 <__aeabi_ddiv+0x19c>
 80009ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009be:	f47f af34 	bne.w	800082a <__aeabi_dmul+0x24a>
 80009c2:	ea95 0f0c 	teq	r5, ip
 80009c6:	f47f af25 	bne.w	8000814 <__aeabi_dmul+0x234>
 80009ca:	4610      	mov	r0, r2
 80009cc:	4619      	mov	r1, r3
 80009ce:	e72c      	b.n	800082a <__aeabi_dmul+0x24a>
 80009d0:	ea95 0f0c 	teq	r5, ip
 80009d4:	d106      	bne.n	80009e4 <__aeabi_ddiv+0x1b0>
 80009d6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009da:	f43f aefd 	beq.w	80007d8 <__aeabi_dmul+0x1f8>
 80009de:	4610      	mov	r0, r2
 80009e0:	4619      	mov	r1, r3
 80009e2:	e722      	b.n	800082a <__aeabi_dmul+0x24a>
 80009e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ee:	f47f aec5 	bne.w	800077c <__aeabi_dmul+0x19c>
 80009f2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009f6:	f47f af0d 	bne.w	8000814 <__aeabi_dmul+0x234>
 80009fa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009fe:	f47f aeeb 	bne.w	80007d8 <__aeabi_dmul+0x1f8>
 8000a02:	e712      	b.n	800082a <__aeabi_dmul+0x24a>

08000a04 <__gedf2>:
 8000a04:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a08:	e006      	b.n	8000a18 <__cmpdf2+0x4>
 8000a0a:	bf00      	nop

08000a0c <__ledf2>:
 8000a0c:	f04f 0c01 	mov.w	ip, #1
 8000a10:	e002      	b.n	8000a18 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__cmpdf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a28:	bf18      	it	ne
 8000a2a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a2e:	d01b      	beq.n	8000a68 <__cmpdf2+0x54>
 8000a30:	b001      	add	sp, #4
 8000a32:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a36:	bf0c      	ite	eq
 8000a38:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a3c:	ea91 0f03 	teqne	r1, r3
 8000a40:	bf02      	ittt	eq
 8000a42:	ea90 0f02 	teqeq	r0, r2
 8000a46:	2000      	moveq	r0, #0
 8000a48:	4770      	bxeq	lr
 8000a4a:	f110 0f00 	cmn.w	r0, #0
 8000a4e:	ea91 0f03 	teq	r1, r3
 8000a52:	bf58      	it	pl
 8000a54:	4299      	cmppl	r1, r3
 8000a56:	bf08      	it	eq
 8000a58:	4290      	cmpeq	r0, r2
 8000a5a:	bf2c      	ite	cs
 8000a5c:	17d8      	asrcs	r0, r3, #31
 8000a5e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a62:	f040 0001 	orr.w	r0, r0, #1
 8000a66:	4770      	bx	lr
 8000a68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a70:	d102      	bne.n	8000a78 <__cmpdf2+0x64>
 8000a72:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a76:	d107      	bne.n	8000a88 <__cmpdf2+0x74>
 8000a78:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d1d6      	bne.n	8000a30 <__cmpdf2+0x1c>
 8000a82:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a86:	d0d3      	beq.n	8000a30 <__cmpdf2+0x1c>
 8000a88:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop

08000a90 <__aeabi_cdrcmple>:
 8000a90:	4684      	mov	ip, r0
 8000a92:	4610      	mov	r0, r2
 8000a94:	4662      	mov	r2, ip
 8000a96:	468c      	mov	ip, r1
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4663      	mov	r3, ip
 8000a9c:	e000      	b.n	8000aa0 <__aeabi_cdcmpeq>
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdcmpeq>:
 8000aa0:	b501      	push	{r0, lr}
 8000aa2:	f7ff ffb7 	bl	8000a14 <__cmpdf2>
 8000aa6:	2800      	cmp	r0, #0
 8000aa8:	bf48      	it	mi
 8000aaa:	f110 0f00 	cmnmi.w	r0, #0
 8000aae:	bd01      	pop	{r0, pc}

08000ab0 <__aeabi_dcmpeq>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff fff4 	bl	8000aa0 <__aeabi_cdcmpeq>
 8000ab8:	bf0c      	ite	eq
 8000aba:	2001      	moveq	r0, #1
 8000abc:	2000      	movne	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmplt>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffea 	bl	8000aa0 <__aeabi_cdcmpeq>
 8000acc:	bf34      	ite	cc
 8000ace:	2001      	movcc	r0, #1
 8000ad0:	2000      	movcs	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmple>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffe0 	bl	8000aa0 <__aeabi_cdcmpeq>
 8000ae0:	bf94      	ite	ls
 8000ae2:	2001      	movls	r0, #1
 8000ae4:	2000      	movhi	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpge>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffce 	bl	8000a90 <__aeabi_cdrcmple>
 8000af4:	bf94      	ite	ls
 8000af6:	2001      	movls	r0, #1
 8000af8:	2000      	movhi	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmpgt>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffc4 	bl	8000a90 <__aeabi_cdrcmple>
 8000b08:	bf34      	ite	cc
 8000b0a:	2001      	movcc	r0, #1
 8000b0c:	2000      	movcs	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpun>:
 8000b14:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b1c:	d102      	bne.n	8000b24 <__aeabi_dcmpun+0x10>
 8000b1e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b22:	d10a      	bne.n	8000b3a <__aeabi_dcmpun+0x26>
 8000b24:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x20>
 8000b2e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_dcmpun+0x26>
 8000b34:	f04f 0000 	mov.w	r0, #0
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0001 	mov.w	r0, #1
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_d2f>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b48:	bf24      	itt	cs
 8000b4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b52:	d90d      	bls.n	8000b70 <__aeabi_d2f+0x30>
 8000b54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b68:	bf08      	it	eq
 8000b6a:	f020 0001 	biceq.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b74:	d121      	bne.n	8000bba <__aeabi_d2f+0x7a>
 8000b76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7a:	bfbc      	itt	lt
 8000b7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	4770      	bxlt	lr
 8000b82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8a:	f1c2 0218 	rsb	r2, r2, #24
 8000b8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b96:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ba0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bac:	ea40 000c 	orr.w	r0, r0, ip
 8000bb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb8:	e7cc      	b.n	8000b54 <__aeabi_d2f+0x14>
 8000bba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bbe:	d107      	bne.n	8000bd0 <__aeabi_d2f+0x90>
 8000bc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bce:	4770      	bxne	lr
 8000bd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_uldivmod>:
 8000be0:	b953      	cbnz	r3, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be2:	b94a      	cbnz	r2, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be4:	2900      	cmp	r1, #0
 8000be6:	bf08      	it	eq
 8000be8:	2800      	cmpeq	r0, #0
 8000bea:	bf1c      	itt	ne
 8000bec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bf0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bf4:	f000 b97a 	b.w	8000eec <__aeabi_idiv0>
 8000bf8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c00:	f000 f806 	bl	8000c10 <__udivmoddi4>
 8000c04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0c:	b004      	add	sp, #16
 8000c0e:	4770      	bx	lr

08000c10 <__udivmoddi4>:
 8000c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c14:	468c      	mov	ip, r1
 8000c16:	460d      	mov	r5, r1
 8000c18:	4604      	mov	r4, r0
 8000c1a:	9e08      	ldr	r6, [sp, #32]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d151      	bne.n	8000cc4 <__udivmoddi4+0xb4>
 8000c20:	428a      	cmp	r2, r1
 8000c22:	4617      	mov	r7, r2
 8000c24:	d96d      	bls.n	8000d02 <__udivmoddi4+0xf2>
 8000c26:	fab2 fe82 	clz	lr, r2
 8000c2a:	f1be 0f00 	cmp.w	lr, #0
 8000c2e:	d00b      	beq.n	8000c48 <__udivmoddi4+0x38>
 8000c30:	f1ce 0c20 	rsb	ip, lr, #32
 8000c34:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c38:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c3c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c40:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c44:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c48:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c4c:	0c25      	lsrs	r5, r4, #16
 8000c4e:	fbbc f8fa 	udiv	r8, ip, sl
 8000c52:	fa1f f987 	uxth.w	r9, r7
 8000c56:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c5a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c5e:	fb08 f309 	mul.w	r3, r8, r9
 8000c62:	42ab      	cmp	r3, r5
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x6c>
 8000c66:	19ed      	adds	r5, r5, r7
 8000c68:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000c6c:	f080 8123 	bcs.w	8000eb6 <__udivmoddi4+0x2a6>
 8000c70:	42ab      	cmp	r3, r5
 8000c72:	f240 8120 	bls.w	8000eb6 <__udivmoddi4+0x2a6>
 8000c76:	f1a8 0802 	sub.w	r8, r8, #2
 8000c7a:	443d      	add	r5, r7
 8000c7c:	1aed      	subs	r5, r5, r3
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c84:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c88:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c8c:	fb00 f909 	mul.w	r9, r0, r9
 8000c90:	45a1      	cmp	r9, r4
 8000c92:	d909      	bls.n	8000ca8 <__udivmoddi4+0x98>
 8000c94:	19e4      	adds	r4, r4, r7
 8000c96:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c9a:	f080 810a 	bcs.w	8000eb2 <__udivmoddi4+0x2a2>
 8000c9e:	45a1      	cmp	r9, r4
 8000ca0:	f240 8107 	bls.w	8000eb2 <__udivmoddi4+0x2a2>
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	443c      	add	r4, r7
 8000ca8:	eba4 0409 	sub.w	r4, r4, r9
 8000cac:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d061      	beq.n	8000d7a <__udivmoddi4+0x16a>
 8000cb6:	fa24 f40e 	lsr.w	r4, r4, lr
 8000cba:	2300      	movs	r3, #0
 8000cbc:	6034      	str	r4, [r6, #0]
 8000cbe:	6073      	str	r3, [r6, #4]
 8000cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	d907      	bls.n	8000cd8 <__udivmoddi4+0xc8>
 8000cc8:	2e00      	cmp	r6, #0
 8000cca:	d054      	beq.n	8000d76 <__udivmoddi4+0x166>
 8000ccc:	2100      	movs	r1, #0
 8000cce:	e886 0021 	stmia.w	r6, {r0, r5}
 8000cd2:	4608      	mov	r0, r1
 8000cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd8:	fab3 f183 	clz	r1, r3
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	f040 808e 	bne.w	8000dfe <__udivmoddi4+0x1ee>
 8000ce2:	42ab      	cmp	r3, r5
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xdc>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80fa 	bhi.w	8000ee0 <__udivmoddi4+0x2d0>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb65 0503 	sbc.w	r5, r5, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	46ac      	mov	ip, r5
 8000cf6:	2e00      	cmp	r6, #0
 8000cf8:	d03f      	beq.n	8000d7a <__udivmoddi4+0x16a>
 8000cfa:	e886 1010 	stmia.w	r6, {r4, ip}
 8000cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d02:	b912      	cbnz	r2, 8000d0a <__udivmoddi4+0xfa>
 8000d04:	2701      	movs	r7, #1
 8000d06:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d0a:	fab7 fe87 	clz	lr, r7
 8000d0e:	f1be 0f00 	cmp.w	lr, #0
 8000d12:	d134      	bne.n	8000d7e <__udivmoddi4+0x16e>
 8000d14:	1beb      	subs	r3, r5, r7
 8000d16:	0c3a      	lsrs	r2, r7, #16
 8000d18:	fa1f fc87 	uxth.w	ip, r7
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000d22:	0c25      	lsrs	r5, r4, #16
 8000d24:	fb02 3318 	mls	r3, r2, r8, r3
 8000d28:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d2c:	fb0c f308 	mul.w	r3, ip, r8
 8000d30:	42ab      	cmp	r3, r5
 8000d32:	d907      	bls.n	8000d44 <__udivmoddi4+0x134>
 8000d34:	19ed      	adds	r5, r5, r7
 8000d36:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x132>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	f200 80d1 	bhi.w	8000ee4 <__udivmoddi4+0x2d4>
 8000d42:	4680      	mov	r8, r0
 8000d44:	1aed      	subs	r5, r5, r3
 8000d46:	b2a3      	uxth	r3, r4
 8000d48:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d4c:	fb02 5510 	mls	r5, r2, r0, r5
 8000d50:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d54:	fb0c fc00 	mul.w	ip, ip, r0
 8000d58:	45a4      	cmp	ip, r4
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x15c>
 8000d5c:	19e4      	adds	r4, r4, r7
 8000d5e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x15a>
 8000d64:	45a4      	cmp	ip, r4
 8000d66:	f200 80b8 	bhi.w	8000eda <__udivmoddi4+0x2ca>
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	eba4 040c 	sub.w	r4, r4, ip
 8000d70:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d74:	e79d      	b.n	8000cb2 <__udivmoddi4+0xa2>
 8000d76:	4631      	mov	r1, r6
 8000d78:	4630      	mov	r0, r6
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	f1ce 0420 	rsb	r4, lr, #32
 8000d82:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d86:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d8a:	fa20 f804 	lsr.w	r8, r0, r4
 8000d8e:	0c3a      	lsrs	r2, r7, #16
 8000d90:	fa25 f404 	lsr.w	r4, r5, r4
 8000d94:	ea48 0803 	orr.w	r8, r8, r3
 8000d98:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d9c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000da0:	fb02 4411 	mls	r4, r2, r1, r4
 8000da4:	fa1f fc87 	uxth.w	ip, r7
 8000da8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000dac:	fb01 f30c 	mul.w	r3, r1, ip
 8000db0:	42ab      	cmp	r3, r5
 8000db2:	fa00 f40e 	lsl.w	r4, r0, lr
 8000db6:	d909      	bls.n	8000dcc <__udivmoddi4+0x1bc>
 8000db8:	19ed      	adds	r5, r5, r7
 8000dba:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 8000dbe:	f080 808a 	bcs.w	8000ed6 <__udivmoddi4+0x2c6>
 8000dc2:	42ab      	cmp	r3, r5
 8000dc4:	f240 8087 	bls.w	8000ed6 <__udivmoddi4+0x2c6>
 8000dc8:	3902      	subs	r1, #2
 8000dca:	443d      	add	r5, r7
 8000dcc:	1aeb      	subs	r3, r5, r3
 8000dce:	fa1f f588 	uxth.w	r5, r8
 8000dd2:	fbb3 f0f2 	udiv	r0, r3, r2
 8000dd6:	fb02 3310 	mls	r3, r2, r0, r3
 8000dda:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dde:	fb00 f30c 	mul.w	r3, r0, ip
 8000de2:	42ab      	cmp	r3, r5
 8000de4:	d907      	bls.n	8000df6 <__udivmoddi4+0x1e6>
 8000de6:	19ed      	adds	r5, r5, r7
 8000de8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000dec:	d26f      	bcs.n	8000ece <__udivmoddi4+0x2be>
 8000dee:	42ab      	cmp	r3, r5
 8000df0:	d96d      	bls.n	8000ece <__udivmoddi4+0x2be>
 8000df2:	3802      	subs	r0, #2
 8000df4:	443d      	add	r5, r7
 8000df6:	1aeb      	subs	r3, r5, r3
 8000df8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dfc:	e78f      	b.n	8000d1e <__udivmoddi4+0x10e>
 8000dfe:	f1c1 0720 	rsb	r7, r1, #32
 8000e02:	fa22 f807 	lsr.w	r8, r2, r7
 8000e06:	408b      	lsls	r3, r1
 8000e08:	fa05 f401 	lsl.w	r4, r5, r1
 8000e0c:	ea48 0303 	orr.w	r3, r8, r3
 8000e10:	fa20 fe07 	lsr.w	lr, r0, r7
 8000e14:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e18:	40fd      	lsrs	r5, r7
 8000e1a:	ea4e 0e04 	orr.w	lr, lr, r4
 8000e1e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000e22:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000e26:	fb0c 5519 	mls	r5, ip, r9, r5
 8000e2a:	fa1f f883 	uxth.w	r8, r3
 8000e2e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e32:	fb09 f408 	mul.w	r4, r9, r8
 8000e36:	42ac      	cmp	r4, r5
 8000e38:	fa02 f201 	lsl.w	r2, r2, r1
 8000e3c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x244>
 8000e42:	18ed      	adds	r5, r5, r3
 8000e44:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e48:	d243      	bcs.n	8000ed2 <__udivmoddi4+0x2c2>
 8000e4a:	42ac      	cmp	r4, r5
 8000e4c:	d941      	bls.n	8000ed2 <__udivmoddi4+0x2c2>
 8000e4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000e52:	441d      	add	r5, r3
 8000e54:	1b2d      	subs	r5, r5, r4
 8000e56:	fa1f fe8e 	uxth.w	lr, lr
 8000e5a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e5e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e62:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e66:	fb00 f808 	mul.w	r8, r0, r8
 8000e6a:	45a0      	cmp	r8, r4
 8000e6c:	d907      	bls.n	8000e7e <__udivmoddi4+0x26e>
 8000e6e:	18e4      	adds	r4, r4, r3
 8000e70:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000e74:	d229      	bcs.n	8000eca <__udivmoddi4+0x2ba>
 8000e76:	45a0      	cmp	r8, r4
 8000e78:	d927      	bls.n	8000eca <__udivmoddi4+0x2ba>
 8000e7a:	3802      	subs	r0, #2
 8000e7c:	441c      	add	r4, r3
 8000e7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e82:	eba4 0408 	sub.w	r4, r4, r8
 8000e86:	fba0 8902 	umull	r8, r9, r0, r2
 8000e8a:	454c      	cmp	r4, r9
 8000e8c:	46c6      	mov	lr, r8
 8000e8e:	464d      	mov	r5, r9
 8000e90:	d315      	bcc.n	8000ebe <__udivmoddi4+0x2ae>
 8000e92:	d012      	beq.n	8000eba <__udivmoddi4+0x2aa>
 8000e94:	b156      	cbz	r6, 8000eac <__udivmoddi4+0x29c>
 8000e96:	ebba 030e 	subs.w	r3, sl, lr
 8000e9a:	eb64 0405 	sbc.w	r4, r4, r5
 8000e9e:	fa04 f707 	lsl.w	r7, r4, r7
 8000ea2:	40cb      	lsrs	r3, r1
 8000ea4:	431f      	orrs	r7, r3
 8000ea6:	40cc      	lsrs	r4, r1
 8000ea8:	6037      	str	r7, [r6, #0]
 8000eaa:	6074      	str	r4, [r6, #4]
 8000eac:	2100      	movs	r1, #0
 8000eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	e6f8      	b.n	8000ca8 <__udivmoddi4+0x98>
 8000eb6:	4690      	mov	r8, r2
 8000eb8:	e6e0      	b.n	8000c7c <__udivmoddi4+0x6c>
 8000eba:	45c2      	cmp	sl, r8
 8000ebc:	d2ea      	bcs.n	8000e94 <__udivmoddi4+0x284>
 8000ebe:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ec2:	eb69 0503 	sbc.w	r5, r9, r3
 8000ec6:	3801      	subs	r0, #1
 8000ec8:	e7e4      	b.n	8000e94 <__udivmoddi4+0x284>
 8000eca:	4628      	mov	r0, r5
 8000ecc:	e7d7      	b.n	8000e7e <__udivmoddi4+0x26e>
 8000ece:	4640      	mov	r0, r8
 8000ed0:	e791      	b.n	8000df6 <__udivmoddi4+0x1e6>
 8000ed2:	4681      	mov	r9, r0
 8000ed4:	e7be      	b.n	8000e54 <__udivmoddi4+0x244>
 8000ed6:	4601      	mov	r1, r0
 8000ed8:	e778      	b.n	8000dcc <__udivmoddi4+0x1bc>
 8000eda:	3802      	subs	r0, #2
 8000edc:	443c      	add	r4, r7
 8000ede:	e745      	b.n	8000d6c <__udivmoddi4+0x15c>
 8000ee0:	4608      	mov	r0, r1
 8000ee2:	e708      	b.n	8000cf6 <__udivmoddi4+0xe6>
 8000ee4:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee8:	443d      	add	r5, r7
 8000eea:	e72b      	b.n	8000d44 <__udivmoddi4+0x134>

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ef2:	4a0e      	ldr	r2, [pc, #56]	; (8000f2c <HAL_InitTick+0x3c>)
 8000ef4:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <HAL_InitTick+0x40>)
{
 8000ef6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ef8:	7818      	ldrb	r0, [r3, #0]
 8000efa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000efe:	fbb3 f3f0 	udiv	r3, r3, r0
 8000f02:	6810      	ldr	r0, [r2, #0]
 8000f04:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f08:	f000 f9e6 	bl	80012d8 <HAL_SYSTICK_Config>
 8000f0c:	4604      	mov	r4, r0
 8000f0e:	b958      	cbnz	r0, 8000f28 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f10:	2d0f      	cmp	r5, #15
 8000f12:	d809      	bhi.n	8000f28 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f14:	4602      	mov	r2, r0
 8000f16:	4629      	mov	r1, r5
 8000f18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f1c:	f000 f99a 	bl	8001254 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f20:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <HAL_InitTick+0x44>)
 8000f22:	4620      	mov	r0, r4
 8000f24:	601d      	str	r5, [r3, #0]
 8000f26:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000f28:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000f2a:	bd38      	pop	{r3, r4, r5, pc}
 8000f2c:	20000010 	.word	0x20000010
 8000f30:	20000000 	.word	0x20000000
 8000f34:	20000004 	.word	0x20000004

08000f38 <HAL_Init>:
{
 8000f38:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <HAL_Init+0x30>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f42:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f4a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f52:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f54:	2003      	movs	r0, #3
 8000f56:	f000 f96b 	bl	8001230 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f5a:	200f      	movs	r0, #15
 8000f5c:	f7ff ffc8 	bl	8000ef0 <HAL_InitTick>
  HAL_MspInit();
 8000f60:	f008 ffe4 	bl	8009f2c <HAL_MspInit>
}
 8000f64:	2000      	movs	r0, #0
 8000f66:	bd08      	pop	{r3, pc}
 8000f68:	40023c00 	.word	0x40023c00

08000f6c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000f6c:	4a03      	ldr	r2, [pc, #12]	; (8000f7c <HAL_IncTick+0x10>)
 8000f6e:	4b04      	ldr	r3, [pc, #16]	; (8000f80 <HAL_IncTick+0x14>)
 8000f70:	6811      	ldr	r1, [r2, #0]
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	440b      	add	r3, r1
 8000f76:	6013      	str	r3, [r2, #0]
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	200042e8 	.word	0x200042e8
 8000f80:	20000000 	.word	0x20000000

08000f84 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f84:	4b01      	ldr	r3, [pc, #4]	; (8000f8c <HAL_GetTick+0x8>)
 8000f86:	6818      	ldr	r0, [r3, #0]
}
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	200042e8 	.word	0x200042e8

08000f90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f90:	b538      	push	{r3, r4, r5, lr}
 8000f92:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000f94:	f7ff fff6 	bl	8000f84 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f98:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000f9a:	bf1c      	itt	ne
 8000f9c:	4b05      	ldrne	r3, [pc, #20]	; (8000fb4 <HAL_Delay+0x24>)
 8000f9e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000fa0:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000fa2:	bf18      	it	ne
 8000fa4:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fa6:	f7ff ffed 	bl	8000f84 <HAL_GetTick>
 8000faa:	1b40      	subs	r0, r0, r5
 8000fac:	4284      	cmp	r4, r0
 8000fae:	d8fa      	bhi.n	8000fa6 <HAL_Delay+0x16>
  {
  }
}
 8000fb0:	bd38      	pop	{r3, r4, r5, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000000 	.word	0x20000000

08000fb8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fb8:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fba:	4604      	mov	r4, r0
 8000fbc:	2800      	cmp	r0, #0
 8000fbe:	f000 809b 	beq.w	80010f8 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000fc2:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8000fc4:	b925      	cbnz	r5, 8000fd0 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fc6:	f008 ffd3 	bl	8009f70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fca:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fcc:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fd0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000fd2:	06db      	lsls	r3, r3, #27
 8000fd4:	f100 808e 	bmi.w	80010f4 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fd8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000fda:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000fde:	f023 0302 	bic.w	r3, r3, #2
 8000fe2:	f043 0302 	orr.w	r3, r3, #2
 8000fe6:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000fe8:	4b44      	ldr	r3, [pc, #272]	; (80010fc <HAL_ADC_Init+0x144>)
 8000fea:	685a      	ldr	r2, [r3, #4]
 8000fec:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000ff0:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000ff2:	685a      	ldr	r2, [r3, #4]
 8000ff4:	6861      	ldr	r1, [r4, #4]
 8000ff6:	430a      	orrs	r2, r1
 8000ff8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000ffa:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000ffc:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000ffe:	685a      	ldr	r2, [r3, #4]
 8001000:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001004:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001006:	685a      	ldr	r2, [r3, #4]
 8001008:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800100c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800100e:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001010:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001012:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001016:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001018:	685a      	ldr	r2, [r3, #4]
 800101a:	430a      	orrs	r2, r1
 800101c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800101e:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001020:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001022:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001026:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001028:	689a      	ldr	r2, [r3, #8]
 800102a:	430a      	orrs	r2, r1
 800102c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800102e:	4934      	ldr	r1, [pc, #208]	; (8001100 <HAL_ADC_Init+0x148>)
 8001030:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001032:	428a      	cmp	r2, r1
 8001034:	d052      	beq.n	80010dc <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001036:	6899      	ldr	r1, [r3, #8]
 8001038:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 800103c:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800103e:	6899      	ldr	r1, [r3, #8]
 8001040:	430a      	orrs	r2, r1
 8001042:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001044:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001046:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001048:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800104c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800104e:	689a      	ldr	r2, [r3, #8]
 8001050:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001052:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001054:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001056:	7e21      	ldrb	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001058:	f022 0202 	bic.w	r2, r2, #2
 800105c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800105e:	689a      	ldr	r2, [r3, #8]
 8001060:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8001064:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001066:	f894 2020 	ldrb.w	r2, [r4, #32]
 800106a:	2a00      	cmp	r2, #0
 800106c:	d03e      	beq.n	80010ec <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800106e:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001070:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001072:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001076:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001078:	685a      	ldr	r2, [r3, #4]
 800107a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800107e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001080:	685a      	ldr	r2, [r3, #4]
 8001082:	3901      	subs	r1, #1
 8001084:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001088:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800108a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800108c:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800108e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001092:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001096:	3901      	subs	r1, #1
 8001098:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800109c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800109e:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80010a0:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80010a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80010a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80010aa:	689a      	ldr	r2, [r3, #8]
 80010ac:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 80010b0:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80010b2:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80010b4:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80010b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80010bc:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80010be:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80010c0:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 80010c4:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80010c6:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80010c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010ca:	f023 0303 	bic.w	r3, r3, #3
 80010ce:	f043 0301 	orr.w	r3, r3, #1
 80010d2:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80010d4:	2300      	movs	r3, #0
 80010d6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 80010da:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80010dc:	689a      	ldr	r2, [r3, #8]
 80010de:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80010e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80010e4:	689a      	ldr	r2, [r3, #8]
 80010e6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80010ea:	e7b2      	b.n	8001052 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80010ec:	685a      	ldr	r2, [r3, #4]
 80010ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80010f2:	e7c9      	b.n	8001088 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 80010f4:	2001      	movs	r0, #1
 80010f6:	e7ed      	b.n	80010d4 <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 80010f8:	2001      	movs	r0, #1
}
 80010fa:	bd38      	pop	{r3, r4, r5, pc}
 80010fc:	40012300 	.word	0x40012300
 8001100:	0f000001 	.word	0x0f000001

08001104 <HAL_ADC_ConfigChannel>:
{
 8001104:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 8001106:	2300      	movs	r3, #0
 8001108:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800110a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800110e:	2b01      	cmp	r3, #1
 8001110:	f000 8083 	beq.w	800121a <HAL_ADC_ConfigChannel+0x116>
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001114:	680d      	ldr	r5, [r1, #0]
 8001116:	6804      	ldr	r4, [r0, #0]
 8001118:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 800111a:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 800111c:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 800111e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8001122:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001124:	d92a      	bls.n	800117c <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001126:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800112a:	68e7      	ldr	r7, [r4, #12]
 800112c:	3b1e      	subs	r3, #30
 800112e:	f04f 0e07 	mov.w	lr, #7
 8001132:	fa0e fe03 	lsl.w	lr, lr, r3
 8001136:	ea27 070e 	bic.w	r7, r7, lr
 800113a:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800113c:	68e7      	ldr	r7, [r4, #12]
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	433b      	orrs	r3, r7
 8001144:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 8001146:	684a      	ldr	r2, [r1, #4]
 8001148:	2a06      	cmp	r2, #6
 800114a:	ea4f 0382 	mov.w	r3, r2, lsl #2
 800114e:	d825      	bhi.n	800119c <HAL_ADC_ConfigChannel+0x98>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001150:	4413      	add	r3, r2
 8001152:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8001154:	1f59      	subs	r1, r3, #5
 8001156:	231f      	movs	r3, #31
 8001158:	408b      	lsls	r3, r1
 800115a:	ea27 0303 	bic.w	r3, r7, r3
 800115e:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001160:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001162:	fa06 f101 	lsl.w	r1, r6, r1
 8001166:	4311      	orrs	r1, r2
 8001168:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800116a:	4b2d      	ldr	r3, [pc, #180]	; (8001220 <HAL_ADC_ConfigChannel+0x11c>)
 800116c:	429c      	cmp	r4, r3
 800116e:	d034      	beq.n	80011da <HAL_ADC_ConfigChannel+0xd6>
  __HAL_UNLOCK(hadc);
 8001170:	2300      	movs	r3, #0
 8001172:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8001176:	4618      	mov	r0, r3
}
 8001178:	b003      	add	sp, #12
 800117a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800117c:	6927      	ldr	r7, [r4, #16]
 800117e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8001182:	f04f 0e07 	mov.w	lr, #7
 8001186:	fa0e fe03 	lsl.w	lr, lr, r3
 800118a:	ea27 070e 	bic.w	r7, r7, lr
 800118e:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001190:	6927      	ldr	r7, [r4, #16]
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	433b      	orrs	r3, r7
 8001198:	6123      	str	r3, [r4, #16]
 800119a:	e7d4      	b.n	8001146 <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Rank < 13U)
 800119c:	2a0c      	cmp	r2, #12
 800119e:	d80e      	bhi.n	80011be <HAL_ADC_ConfigChannel+0xba>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80011a0:	4413      	add	r3, r2
 80011a2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80011a4:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 80011a8:	231f      	movs	r3, #31
 80011aa:	4093      	lsls	r3, r2
 80011ac:	ea21 0303 	bic.w	r3, r1, r3
 80011b0:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80011b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80011b4:	fa06 f202 	lsl.w	r2, r6, r2
 80011b8:	431a      	orrs	r2, r3
 80011ba:	6322      	str	r2, [r4, #48]	; 0x30
 80011bc:	e7d5      	b.n	800116a <HAL_ADC_ConfigChannel+0x66>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80011be:	4413      	add	r3, r2
 80011c0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80011c2:	3b41      	subs	r3, #65	; 0x41
 80011c4:	221f      	movs	r2, #31
 80011c6:	409a      	lsls	r2, r3
 80011c8:	ea21 0202 	bic.w	r2, r1, r2
 80011cc:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80011ce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80011d0:	fa06 f103 	lsl.w	r1, r6, r3
 80011d4:	4311      	orrs	r1, r2
 80011d6:	62e1      	str	r1, [r4, #44]	; 0x2c
 80011d8:	e7c7      	b.n	800116a <HAL_ADC_ConfigChannel+0x66>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80011da:	2d12      	cmp	r5, #18
 80011dc:	d104      	bne.n	80011e8 <HAL_ADC_ConfigChannel+0xe4>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80011de:	4a11      	ldr	r2, [pc, #68]	; (8001224 <HAL_ADC_ConfigChannel+0x120>)
 80011e0:	6853      	ldr	r3, [r2, #4]
 80011e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011e6:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80011e8:	f1a5 0310 	sub.w	r3, r5, #16
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d8bf      	bhi.n	8001170 <HAL_ADC_ConfigChannel+0x6c>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80011f0:	4a0c      	ldr	r2, [pc, #48]	; (8001224 <HAL_ADC_ConfigChannel+0x120>)
 80011f2:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80011f4:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80011f6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80011fa:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80011fc:	d1b8      	bne.n	8001170 <HAL_ADC_ConfigChannel+0x6c>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011fe:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <HAL_ADC_ConfigChannel+0x124>)
 8001200:	4a0a      	ldr	r2, [pc, #40]	; (800122c <HAL_ADC_ConfigChannel+0x128>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	fbb3 f2f2 	udiv	r2, r3, r2
 8001208:	230a      	movs	r3, #10
 800120a:	4353      	muls	r3, r2
        counter--;
 800120c:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 800120e:	9b01      	ldr	r3, [sp, #4]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d0ad      	beq.n	8001170 <HAL_ADC_ConfigChannel+0x6c>
        counter--;
 8001214:	9b01      	ldr	r3, [sp, #4]
 8001216:	3b01      	subs	r3, #1
 8001218:	e7f8      	b.n	800120c <HAL_ADC_ConfigChannel+0x108>
  __HAL_LOCK(hadc);
 800121a:	2002      	movs	r0, #2
 800121c:	e7ac      	b.n	8001178 <HAL_ADC_ConfigChannel+0x74>
 800121e:	bf00      	nop
 8001220:	40012000 	.word	0x40012000
 8001224:	40012300 	.word	0x40012300
 8001228:	20000010 	.word	0x20000010
 800122c:	000f4240 	.word	0x000f4240

08001230 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001230:	4a07      	ldr	r2, [pc, #28]	; (8001250 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001232:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001234:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001238:	041b      	lsls	r3, r3, #16
 800123a:	0c1b      	lsrs	r3, r3, #16
 800123c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001240:	0200      	lsls	r0, r0, #8
 8001242:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001246:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800124a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800124c:	60d3      	str	r3, [r2, #12]
 800124e:	4770      	bx	lr
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001254:	4b17      	ldr	r3, [pc, #92]	; (80012b4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001256:	b530      	push	{r4, r5, lr}
 8001258:	68dc      	ldr	r4, [r3, #12]
 800125a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800125e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001262:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001264:	2b04      	cmp	r3, #4
 8001266:	bf28      	it	cs
 8001268:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800126a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800126c:	f04f 0501 	mov.w	r5, #1
 8001270:	fa05 f303 	lsl.w	r3, r5, r3
 8001274:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001278:	bf8c      	ite	hi
 800127a:	3c03      	subhi	r4, #3
 800127c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800127e:	4019      	ands	r1, r3
 8001280:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001282:	fa05 f404 	lsl.w	r4, r5, r4
 8001286:	3c01      	subs	r4, #1
 8001288:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800128a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800128c:	ea42 0201 	orr.w	r2, r2, r1
 8001290:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001294:	bfad      	iteet	ge
 8001296:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129a:	f000 000f 	andlt.w	r0, r0, #15
 800129e:	4b06      	ldrlt	r3, [pc, #24]	; (80012b8 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a4:	bfb5      	itete	lt
 80012a6:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012aa:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ac:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80012b0:	bd30      	pop	{r4, r5, pc}
 80012b2:	bf00      	nop
 80012b4:	e000ed00 	.word	0xe000ed00
 80012b8:	e000ed14 	.word	0xe000ed14

080012bc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80012bc:	2800      	cmp	r0, #0
 80012be:	db08      	blt.n	80012d2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012c0:	0942      	lsrs	r2, r0, #5
 80012c2:	2301      	movs	r3, #1
 80012c4:	f000 001f 	and.w	r0, r0, #31
 80012c8:	fa03 f000 	lsl.w	r0, r3, r0
 80012cc:	4b01      	ldr	r3, [pc, #4]	; (80012d4 <HAL_NVIC_EnableIRQ+0x18>)
 80012ce:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80012d2:	4770      	bx	lr
 80012d4:	e000e100 	.word	0xe000e100

080012d8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012d8:	3801      	subs	r0, #1
 80012da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80012de:	d20a      	bcs.n	80012f6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012e0:	4b06      	ldr	r3, [pc, #24]	; (80012fc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e2:	4a07      	ldr	r2, [pc, #28]	; (8001300 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012e4:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e6:	21f0      	movs	r1, #240	; 0xf0
 80012e8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012ec:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ee:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012f0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80012f6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	e000e010 	.word	0xe000e010
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001304:	6803      	ldr	r3, [r0, #0]
 8001306:	b2da      	uxtb	r2, r3
 8001308:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800130c:	f023 0303 	bic.w	r3, r3, #3
 8001310:	2118      	movs	r1, #24
 8001312:	3a10      	subs	r2, #16
 8001314:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001318:	4904      	ldr	r1, [pc, #16]	; (800132c <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 800131a:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800131c:	bf88      	it	hi
 800131e:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001320:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001322:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001324:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 8001326:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	0800c8a8 	.word	0x0800c8a8

08001330 <HAL_DMA_Init>:
{
 8001330:	b570      	push	{r4, r5, r6, lr}
 8001332:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001334:	f7ff fe26 	bl	8000f84 <HAL_GetTick>
 8001338:	4605      	mov	r5, r0
  if(hdma == NULL)
 800133a:	2c00      	cmp	r4, #0
 800133c:	d071      	beq.n	8001422 <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 800133e:	2300      	movs	r3, #0
 8001340:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8001344:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8001346:	2302      	movs	r3, #2
 8001348:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 800134c:	6813      	ldr	r3, [r2, #0]
 800134e:	f023 0301 	bic.w	r3, r3, #1
 8001352:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001354:	6821      	ldr	r1, [r4, #0]
 8001356:	680b      	ldr	r3, [r1, #0]
 8001358:	07d8      	lsls	r0, r3, #31
 800135a:	d43c      	bmi.n	80013d6 <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 800135c:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800135e:	4d32      	ldr	r5, [pc, #200]	; (8001428 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001360:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001362:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001364:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001366:	68a3      	ldr	r3, [r4, #8]
 8001368:	4313      	orrs	r3, r2
 800136a:	68e2      	ldr	r2, [r4, #12]
 800136c:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800136e:	6922      	ldr	r2, [r4, #16]
 8001370:	4313      	orrs	r3, r2
 8001372:	6962      	ldr	r2, [r4, #20]
 8001374:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001376:	69e2      	ldr	r2, [r4, #28]
 8001378:	4303      	orrs	r3, r0
 800137a:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 800137c:	6a22      	ldr	r2, [r4, #32]
 800137e:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001380:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001382:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001384:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001388:	bf01      	itttt	eq
 800138a:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 800138c:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 800138e:	4335      	orreq	r5, r6
 8001390:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8001392:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8001394:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001396:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001398:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 800139c:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013a0:	d10b      	bne.n	80013ba <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 80013a2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80013a4:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 80013a6:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80013a8:	b13d      	cbz	r5, 80013ba <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80013aa:	b9f8      	cbnz	r0, 80013ec <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 80013ac:	2a01      	cmp	r2, #1
 80013ae:	d02d      	beq.n	800140c <HAL_DMA_Init+0xdc>
 80013b0:	d301      	bcc.n	80013b6 <HAL_DMA_Init+0x86>
 80013b2:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80013b4:	d101      	bne.n	80013ba <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80013b6:	01ea      	lsls	r2, r5, #7
 80013b8:	d42b      	bmi.n	8001412 <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 80013ba:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80013bc:	4620      	mov	r0, r4
 80013be:	f7ff ffa1 	bl	8001304 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013c2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80013c4:	233f      	movs	r3, #63	; 0x3f
 80013c6:	4093      	lsls	r3, r2
 80013c8:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013ca:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80013cc:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013ce:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80013d0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80013d4:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013d6:	f7ff fdd5 	bl	8000f84 <HAL_GetTick>
 80013da:	1b40      	subs	r0, r0, r5
 80013dc:	2805      	cmp	r0, #5
 80013de:	d9b9      	bls.n	8001354 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013e0:	2320      	movs	r3, #32
 80013e2:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013e4:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 80013e6:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80013ea:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80013ec:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80013f0:	d113      	bne.n	800141a <HAL_DMA_Init+0xea>
    switch (tmp)
 80013f2:	2a03      	cmp	r2, #3
 80013f4:	d8e1      	bhi.n	80013ba <HAL_DMA_Init+0x8a>
 80013f6:	a001      	add	r0, pc, #4	; (adr r0, 80013fc <HAL_DMA_Init+0xcc>)
 80013f8:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 80013fc:	08001413 	.word	0x08001413
 8001400:	080013b7 	.word	0x080013b7
 8001404:	08001413 	.word	0x08001413
 8001408:	0800140d 	.word	0x0800140d
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800140c:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8001410:	d1d3      	bne.n	80013ba <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001412:	2340      	movs	r3, #64	; 0x40
 8001414:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001416:	2001      	movs	r0, #1
 8001418:	e7e5      	b.n	80013e6 <HAL_DMA_Init+0xb6>
    switch (tmp)
 800141a:	2a02      	cmp	r2, #2
 800141c:	d9f9      	bls.n	8001412 <HAL_DMA_Init+0xe2>
 800141e:	2a03      	cmp	r2, #3
 8001420:	e7c8      	b.n	80013b4 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 8001422:	2001      	movs	r0, #1
 8001424:	bd70      	pop	{r4, r5, r6, pc}
 8001426:	bf00      	nop
 8001428:	f010803f 	.word	0xf010803f

0800142c <HAL_DMA_Start_IT>:
{
 800142c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 800142e:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8001432:	2c01      	cmp	r4, #1
 8001434:	d036      	beq.n	80014a4 <HAL_DMA_Start_IT+0x78>
 8001436:	2401      	movs	r4, #1
 8001438:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800143c:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001440:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 8001442:	2c01      	cmp	r4, #1
 8001444:	f04f 0500 	mov.w	r5, #0
 8001448:	f04f 0402 	mov.w	r4, #2
 800144c:	d128      	bne.n	80014a0 <HAL_DMA_Start_IT+0x74>
    hdma->State = HAL_DMA_STATE_BUSY;
 800144e:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001452:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001454:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001456:	6825      	ldr	r5, [r4, #0]
 8001458:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 800145c:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 800145e:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001460:	6883      	ldr	r3, [r0, #8]
 8001462:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 8001464:	bf0e      	itee	eq
 8001466:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8001468:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 800146a:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800146c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 800146e:	bf08      	it	eq
 8001470:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001472:	233f      	movs	r3, #63	; 0x3f
 8001474:	4093      	lsls	r3, r2
 8001476:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001478:	6823      	ldr	r3, [r4, #0]
 800147a:	f043 0316 	orr.w	r3, r3, #22
 800147e:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001480:	6963      	ldr	r3, [r4, #20]
 8001482:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001486:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8001488:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800148a:	b11b      	cbz	r3, 8001494 <HAL_DMA_Start_IT+0x68>
      hdma->Instance->CR  |= DMA_IT_HT;
 800148c:	6823      	ldr	r3, [r4, #0]
 800148e:	f043 0308 	orr.w	r3, r3, #8
 8001492:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001494:	6823      	ldr	r3, [r4, #0]
 8001496:	f043 0301 	orr.w	r3, r3, #1
 800149a:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800149c:	2000      	movs	r0, #0
 800149e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 80014a0:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 80014a4:	2002      	movs	r0, #2
}
 80014a6:	bd70      	pop	{r4, r5, r6, pc}

080014a8 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014a8:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d003      	beq.n	80014b8 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014b0:	2380      	movs	r3, #128	; 0x80
 80014b2:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80014b4:	2001      	movs	r0, #1
 80014b6:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 80014b8:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80014ba:	2305      	movs	r3, #5
 80014bc:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80014c0:	6813      	ldr	r3, [r2, #0]
 80014c2:	f023 0301 	bic.w	r3, r3, #1
 80014c6:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80014c8:	2000      	movs	r0, #0
}
 80014ca:	4770      	bx	lr

080014cc <HAL_DMA_IRQHandler>:
{
 80014cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 80014ce:	2300      	movs	r3, #0
 80014d0:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80014d2:	4b5a      	ldr	r3, [pc, #360]	; (800163c <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014d4:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 80014d6:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80014d8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 80014da:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80014dc:	2208      	movs	r2, #8
 80014de:	409a      	lsls	r2, r3
 80014e0:	4216      	tst	r6, r2
{
 80014e2:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80014e4:	d00c      	beq.n	8001500 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80014e6:	6801      	ldr	r1, [r0, #0]
 80014e8:	6808      	ldr	r0, [r1, #0]
 80014ea:	0740      	lsls	r0, r0, #29
 80014ec:	d508      	bpl.n	8001500 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80014ee:	6808      	ldr	r0, [r1, #0]
 80014f0:	f020 0004 	bic.w	r0, r0, #4
 80014f4:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80014f6:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80014f8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80014fa:	f042 0201 	orr.w	r2, r2, #1
 80014fe:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001500:	2201      	movs	r2, #1
 8001502:	409a      	lsls	r2, r3
 8001504:	4216      	tst	r6, r2
 8001506:	d008      	beq.n	800151a <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001508:	6821      	ldr	r1, [r4, #0]
 800150a:	6949      	ldr	r1, [r1, #20]
 800150c:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800150e:	bf41      	itttt	mi
 8001510:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001512:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8001514:	f042 0202 	orrmi.w	r2, r2, #2
 8001518:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800151a:	2204      	movs	r2, #4
 800151c:	409a      	lsls	r2, r3
 800151e:	4216      	tst	r6, r2
 8001520:	d008      	beq.n	8001534 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001522:	6821      	ldr	r1, [r4, #0]
 8001524:	6809      	ldr	r1, [r1, #0]
 8001526:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001528:	bf41      	itttt	mi
 800152a:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800152c:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 800152e:	f042 0204 	orrmi.w	r2, r2, #4
 8001532:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001534:	2210      	movs	r2, #16
 8001536:	409a      	lsls	r2, r3
 8001538:	4216      	tst	r6, r2
 800153a:	d010      	beq.n	800155e <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800153c:	6823      	ldr	r3, [r4, #0]
 800153e:	6819      	ldr	r1, [r3, #0]
 8001540:	0709      	lsls	r1, r1, #28
 8001542:	d50c      	bpl.n	800155e <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001544:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	0350      	lsls	r0, r2, #13
 800154a:	d535      	bpl.n	80015b8 <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	0319      	lsls	r1, r3, #12
 8001550:	d401      	bmi.n	8001556 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8001552:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001554:	e000      	b.n	8001558 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001556:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8001558:	b10b      	cbz	r3, 800155e <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 800155a:	4620      	mov	r0, r4
 800155c:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800155e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001560:	2220      	movs	r2, #32
 8001562:	408a      	lsls	r2, r1
 8001564:	4216      	tst	r6, r2
 8001566:	d038      	beq.n	80015da <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001568:	6823      	ldr	r3, [r4, #0]
 800156a:	6818      	ldr	r0, [r3, #0]
 800156c:	06c6      	lsls	r6, r0, #27
 800156e:	d534      	bpl.n	80015da <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001570:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001572:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8001576:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001578:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800157a:	d125      	bne.n	80015c8 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800157c:	f022 0216 	bic.w	r2, r2, #22
 8001580:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001582:	695a      	ldr	r2, [r3, #20]
 8001584:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001588:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800158a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800158c:	b90a      	cbnz	r2, 8001592 <HAL_DMA_IRQHandler+0xc6>
 800158e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001590:	b11a      	cbz	r2, 800159a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	f022 0208 	bic.w	r2, r2, #8
 8001598:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800159a:	233f      	movs	r3, #63	; 0x3f
 800159c:	408b      	lsls	r3, r1
 800159e:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 80015a0:	2300      	movs	r3, #0
 80015a2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 80015a6:	2301      	movs	r3, #1
 80015a8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 80015ac:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 80015ae:	b10b      	cbz	r3, 80015b4 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 80015b0:	4620      	mov	r0, r4
 80015b2:	4798      	blx	r3
}
 80015b4:	b003      	add	sp, #12
 80015b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015bc:	bf5e      	ittt	pl
 80015be:	681a      	ldrpl	r2, [r3, #0]
 80015c0:	f022 0208 	bicpl.w	r2, r2, #8
 80015c4:	601a      	strpl	r2, [r3, #0]
 80015c6:	e7c4      	b.n	8001552 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015c8:	0350      	lsls	r0, r2, #13
 80015ca:	d528      	bpl.n	800161e <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	0319      	lsls	r1, r3, #12
 80015d0:	d432      	bmi.n	8001638 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 80015d2:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 80015d4:	b10b      	cbz	r3, 80015da <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 80015d6:	4620      	mov	r0, r4
 80015d8:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80015da:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d0e9      	beq.n	80015b4 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80015e0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80015e2:	07da      	lsls	r2, r3, #31
 80015e4:	d519      	bpl.n	800161a <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 80015e6:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 80015e8:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 80015ea:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80015ee:	6813      	ldr	r3, [r2, #0]
 80015f0:	f023 0301 	bic.w	r3, r3, #1
 80015f4:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80015f6:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80015fa:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 80015fe:	9b01      	ldr	r3, [sp, #4]
 8001600:	3301      	adds	r3, #1
 8001602:	429f      	cmp	r7, r3
 8001604:	9301      	str	r3, [sp, #4]
 8001606:	d302      	bcc.n	800160e <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001608:	6813      	ldr	r3, [r2, #0]
 800160a:	07db      	lsls	r3, r3, #31
 800160c:	d4f7      	bmi.n	80015fe <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 800160e:	2300      	movs	r3, #0
 8001610:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8001614:	2301      	movs	r3, #1
 8001616:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 800161a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800161c:	e7c7      	b.n	80015ae <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8001624:	d108      	bne.n	8001638 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001626:	6819      	ldr	r1, [r3, #0]
 8001628:	f021 0110 	bic.w	r1, r1, #16
 800162c:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800162e:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8001630:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8001634:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8001638:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800163a:	e7cb      	b.n	80015d4 <HAL_DMA_IRQHandler+0x108>
 800163c:	20000010 	.word	0x20000010

08001640 <HAL_DMA_GetState>:
  return hdma->State;
 8001640:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 8001644:	4770      	bx	lr
	...

08001648 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800164c:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800164e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001650:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8001800 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001654:	4a68      	ldr	r2, [pc, #416]	; (80017f8 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001656:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8001804 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800165a:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800165c:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 800165e:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001662:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8001664:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001668:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 800166c:	45b6      	cmp	lr, r6
 800166e:	f040 80ae 	bne.w	80017ce <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001672:	684c      	ldr	r4, [r1, #4]
 8001674:	f024 0710 	bic.w	r7, r4, #16
 8001678:	2f02      	cmp	r7, #2
 800167a:	d116      	bne.n	80016aa <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 800167c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001680:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001684:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001688:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800168c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001690:	f04f 0c0f 	mov.w	ip, #15
 8001694:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001698:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800169c:	690d      	ldr	r5, [r1, #16]
 800169e:	fa05 f50b 	lsl.w	r5, r5, fp
 80016a2:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 80016a6:	f8ca 5020 	str.w	r5, [sl, #32]
 80016aa:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016ae:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80016b0:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016b4:	fa05 f50a 	lsl.w	r5, r5, sl
 80016b8:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016ba:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016be:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016c2:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016c6:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016c8:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016cc:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80016ce:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016d2:	d811      	bhi.n	80016f8 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80016d4:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016d6:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016da:	68cf      	ldr	r7, [r1, #12]
 80016dc:	fa07 fc0a 	lsl.w	ip, r7, sl
 80016e0:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80016e4:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80016e6:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016e8:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80016ec:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80016f0:	409f      	lsls	r7, r3
 80016f2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80016f6:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80016f8:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016fa:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016fc:	688f      	ldr	r7, [r1, #8]
 80016fe:	fa07 f70a 	lsl.w	r7, r7, sl
 8001702:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001704:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001706:	00e5      	lsls	r5, r4, #3
 8001708:	d561      	bpl.n	80017ce <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800170a:	f04f 0b00 	mov.w	fp, #0
 800170e:	f8cd b00c 	str.w	fp, [sp, #12]
 8001712:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001716:	4d39      	ldr	r5, [pc, #228]	; (80017fc <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001718:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800171c:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8001720:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8001724:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8001728:	9703      	str	r7, [sp, #12]
 800172a:	9f03      	ldr	r7, [sp, #12]
 800172c:	f023 0703 	bic.w	r7, r3, #3
 8001730:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001734:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001738:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800173c:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001740:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001744:	f04f 0e0f 	mov.w	lr, #15
 8001748:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800174c:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800174e:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001752:	d043      	beq.n	80017dc <HAL_GPIO_Init+0x194>
 8001754:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001758:	42a8      	cmp	r0, r5
 800175a:	d041      	beq.n	80017e0 <HAL_GPIO_Init+0x198>
 800175c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001760:	42a8      	cmp	r0, r5
 8001762:	d03f      	beq.n	80017e4 <HAL_GPIO_Init+0x19c>
 8001764:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001768:	42a8      	cmp	r0, r5
 800176a:	d03d      	beq.n	80017e8 <HAL_GPIO_Init+0x1a0>
 800176c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001770:	42a8      	cmp	r0, r5
 8001772:	d03b      	beq.n	80017ec <HAL_GPIO_Init+0x1a4>
 8001774:	4548      	cmp	r0, r9
 8001776:	d03b      	beq.n	80017f0 <HAL_GPIO_Init+0x1a8>
 8001778:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800177c:	42a8      	cmp	r0, r5
 800177e:	d039      	beq.n	80017f4 <HAL_GPIO_Init+0x1ac>
 8001780:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001784:	42a8      	cmp	r0, r5
 8001786:	bf14      	ite	ne
 8001788:	2508      	movne	r5, #8
 800178a:	2507      	moveq	r5, #7
 800178c:	fa05 f50c 	lsl.w	r5, r5, ip
 8001790:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001794:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8001796:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001798:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800179a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800179e:	bf0c      	ite	eq
 80017a0:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80017a2:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80017a4:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80017a6:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017a8:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80017ac:	bf0c      	ite	eq
 80017ae:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80017b0:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80017b2:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017b4:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017b6:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80017ba:	bf0c      	ite	eq
 80017bc:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80017be:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80017c0:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80017c2:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017c4:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80017c6:	bf54      	ite	pl
 80017c8:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80017ca:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80017cc:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ce:	3301      	adds	r3, #1
 80017d0:	2b10      	cmp	r3, #16
 80017d2:	f47f af44 	bne.w	800165e <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80017d6:	b005      	add	sp, #20
 80017d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017dc:	465d      	mov	r5, fp
 80017de:	e7d5      	b.n	800178c <HAL_GPIO_Init+0x144>
 80017e0:	2501      	movs	r5, #1
 80017e2:	e7d3      	b.n	800178c <HAL_GPIO_Init+0x144>
 80017e4:	2502      	movs	r5, #2
 80017e6:	e7d1      	b.n	800178c <HAL_GPIO_Init+0x144>
 80017e8:	2503      	movs	r5, #3
 80017ea:	e7cf      	b.n	800178c <HAL_GPIO_Init+0x144>
 80017ec:	2504      	movs	r5, #4
 80017ee:	e7cd      	b.n	800178c <HAL_GPIO_Init+0x144>
 80017f0:	2505      	movs	r5, #5
 80017f2:	e7cb      	b.n	800178c <HAL_GPIO_Init+0x144>
 80017f4:	2506      	movs	r5, #6
 80017f6:	e7c9      	b.n	800178c <HAL_GPIO_Init+0x144>
 80017f8:	40013c00 	.word	0x40013c00
 80017fc:	40020000 	.word	0x40020000
 8001800:	40023800 	.word	0x40023800
 8001804:	40021400 	.word	0x40021400

08001808 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001808:	6903      	ldr	r3, [r0, #16]
 800180a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800180c:	bf14      	ite	ne
 800180e:	2001      	movne	r0, #1
 8001810:	2000      	moveq	r0, #0
 8001812:	4770      	bx	lr

08001814 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001814:	b10a      	cbz	r2, 800181a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001816:	6181      	str	r1, [r0, #24]
 8001818:	4770      	bx	lr
 800181a:	0409      	lsls	r1, r1, #16
 800181c:	e7fb      	b.n	8001816 <HAL_GPIO_WritePin+0x2>

0800181e <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800181e:	6801      	ldr	r1, [r0, #0]
 8001820:	694b      	ldr	r3, [r1, #20]
 8001822:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8001826:	f04f 0200 	mov.w	r2, #0
 800182a:	d010      	beq.n	800184e <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800182c:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001830:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8001832:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8001834:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001836:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800183a:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800183e:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001840:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001844:	f043 0304 	orr.w	r3, r3, #4
 8001848:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 800184a:	2001      	movs	r0, #1
 800184c:	4770      	bx	lr
  }
  return HAL_OK;
 800184e:	4618      	mov	r0, r3
}
 8001850:	4770      	bx	lr

08001852 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001852:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001856:	4604      	mov	r4, r0
 8001858:	4617      	mov	r7, r2
 800185a:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800185c:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8001860:	b28e      	uxth	r6, r1
 8001862:	6825      	ldr	r5, [r4, #0]
 8001864:	f1b8 0f01 	cmp.w	r8, #1
 8001868:	bf0c      	ite	eq
 800186a:	696b      	ldreq	r3, [r5, #20]
 800186c:	69ab      	ldrne	r3, [r5, #24]
 800186e:	ea36 0303 	bics.w	r3, r6, r3
 8001872:	bf14      	ite	ne
 8001874:	2001      	movne	r0, #1
 8001876:	2000      	moveq	r0, #0
 8001878:	b908      	cbnz	r0, 800187e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 800187a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800187e:	696b      	ldr	r3, [r5, #20]
 8001880:	055a      	lsls	r2, r3, #21
 8001882:	d516      	bpl.n	80018b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001884:	682b      	ldr	r3, [r5, #0]
 8001886:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800188a:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800188c:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001890:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8001892:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001894:	2300      	movs	r3, #0
 8001896:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001898:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800189c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80018a0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80018a2:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80018a6:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80018a8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80018ac:	2001      	movs	r0, #1
 80018ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 80018b2:	1c7b      	adds	r3, r7, #1
 80018b4:	d0d5      	beq.n	8001862 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018b6:	f7ff fb65 	bl	8000f84 <HAL_GetTick>
 80018ba:	eba0 0009 	sub.w	r0, r0, r9
 80018be:	4287      	cmp	r7, r0
 80018c0:	d301      	bcc.n	80018c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
 80018c2:	2f00      	cmp	r7, #0
 80018c4:	d1cd      	bne.n	8001862 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80018c6:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80018c8:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80018ca:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80018cc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80018d0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80018d4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80018d6:	f042 0220 	orr.w	r2, r2, #32
 80018da:	e7e4      	b.n	80018a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x54>

080018dc <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80018dc:	b570      	push	{r4, r5, r6, lr}
 80018de:	4604      	mov	r4, r0
 80018e0:	460d      	mov	r5, r1
 80018e2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80018e4:	6823      	ldr	r3, [r4, #0]
 80018e6:	695b      	ldr	r3, [r3, #20]
 80018e8:	075b      	lsls	r3, r3, #29
 80018ea:	d501      	bpl.n	80018f0 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 80018ec:	2000      	movs	r0, #0
 80018ee:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80018f0:	4620      	mov	r0, r4
 80018f2:	f7ff ff94 	bl	800181e <I2C_IsAcknowledgeFailed>
 80018f6:	b9a8      	cbnz	r0, 8001924 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 80018f8:	1c6a      	adds	r2, r5, #1
 80018fa:	d0f3      	beq.n	80018e4 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018fc:	f7ff fb42 	bl	8000f84 <HAL_GetTick>
 8001900:	1b80      	subs	r0, r0, r6
 8001902:	4285      	cmp	r5, r0
 8001904:	d301      	bcc.n	800190a <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8001906:	2d00      	cmp	r5, #0
 8001908:	d1ec      	bne.n	80018e4 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 800190a:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 800190c:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 800190e:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001910:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001914:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001918:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800191a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800191e:	f042 0220 	orr.w	r2, r2, #32
 8001922:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001924:	2001      	movs	r0, #1
}
 8001926:	bd70      	pop	{r4, r5, r6, pc}

08001928 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8001928:	b570      	push	{r4, r5, r6, lr}
 800192a:	4604      	mov	r4, r0
 800192c:	460d      	mov	r5, r1
 800192e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001930:	6820      	ldr	r0, [r4, #0]
 8001932:	6943      	ldr	r3, [r0, #20]
 8001934:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8001938:	d001      	beq.n	800193e <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 800193a:	2000      	movs	r0, #0
}
 800193c:	bd70      	pop	{r4, r5, r6, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800193e:	6942      	ldr	r2, [r0, #20]
 8001940:	06d2      	lsls	r2, r2, #27
 8001942:	d50e      	bpl.n	8001962 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001944:	f06f 0210 	mvn.w	r2, #16
 8001948:	6142      	str	r2, [r0, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 800194a:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 800194c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800194e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001952:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001956:	6c22      	ldr	r2, [r4, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001958:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800195a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 800195e:	2001      	movs	r0, #1
 8001960:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001962:	f7ff fb0f 	bl	8000f84 <HAL_GetTick>
 8001966:	1b80      	subs	r0, r0, r6
 8001968:	42a8      	cmp	r0, r5
 800196a:	d801      	bhi.n	8001970 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 800196c:	2d00      	cmp	r5, #0
 800196e:	d1df      	bne.n	8001930 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001970:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8001972:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001974:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001976:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800197a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800197e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001980:	f042 0220 	orr.w	r2, r2, #32
 8001984:	e7e8      	b.n	8001958 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

08001986 <I2C_WaitOnFlagUntilTimeout>:
{
 8001986:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800198a:	9e08      	ldr	r6, [sp, #32]
 800198c:	4604      	mov	r4, r0
 800198e:	4690      	mov	r8, r2
 8001990:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001992:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8001996:	b28d      	uxth	r5, r1
 8001998:	6823      	ldr	r3, [r4, #0]
 800199a:	f1b9 0f01 	cmp.w	r9, #1
 800199e:	bf0c      	ite	eq
 80019a0:	695b      	ldreq	r3, [r3, #20]
 80019a2:	699b      	ldrne	r3, [r3, #24]
 80019a4:	ea35 0303 	bics.w	r3, r5, r3
 80019a8:	bf0c      	ite	eq
 80019aa:	2301      	moveq	r3, #1
 80019ac:	2300      	movne	r3, #0
 80019ae:	4543      	cmp	r3, r8
 80019b0:	d002      	beq.n	80019b8 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 80019b2:	2000      	movs	r0, #0
}
 80019b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 80019b8:	1c7b      	adds	r3, r7, #1
 80019ba:	d0ed      	beq.n	8001998 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019bc:	f7ff fae2 	bl	8000f84 <HAL_GetTick>
 80019c0:	1b80      	subs	r0, r0, r6
 80019c2:	4287      	cmp	r7, r0
 80019c4:	d301      	bcc.n	80019ca <I2C_WaitOnFlagUntilTimeout+0x44>
 80019c6:	2f00      	cmp	r7, #0
 80019c8:	d1e6      	bne.n	8001998 <I2C_WaitOnFlagUntilTimeout+0x12>
      hi2c->PreviousState       = I2C_STATE_NONE;
 80019ca:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 80019cc:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80019ce:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80019d0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019d4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80019d8:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80019da:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80019de:	f042 0220 	orr.w	r2, r2, #32
 80019e2:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80019e4:	2001      	movs	r0, #1
 80019e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080019ea <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80019ea:	b570      	push	{r4, r5, r6, lr}
 80019ec:	4604      	mov	r4, r0
 80019ee:	460d      	mov	r5, r1
 80019f0:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80019f2:	6823      	ldr	r3, [r4, #0]
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	061b      	lsls	r3, r3, #24
 80019f8:	d501      	bpl.n	80019fe <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 80019fa:	2000      	movs	r0, #0
 80019fc:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80019fe:	4620      	mov	r0, r4
 8001a00:	f7ff ff0d 	bl	800181e <I2C_IsAcknowledgeFailed>
 8001a04:	b9a8      	cbnz	r0, 8001a32 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8001a06:	1c6a      	adds	r2, r5, #1
 8001a08:	d0f3      	beq.n	80019f2 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a0a:	f7ff fabb 	bl	8000f84 <HAL_GetTick>
 8001a0e:	1b80      	subs	r0, r0, r6
 8001a10:	4285      	cmp	r5, r0
 8001a12:	d301      	bcc.n	8001a18 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8001a14:	2d00      	cmp	r5, #0
 8001a16:	d1ec      	bne.n	80019f2 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001a18:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8001a1a:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001a1c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001a1e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a22:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a26:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001a28:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a2c:	f042 0220 	orr.w	r2, r2, #32
 8001a30:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001a32:	2001      	movs	r0, #1
}
 8001a34:	bd70      	pop	{r4, r5, r6, pc}
	...

08001a38 <I2C_RequestMemoryWrite>:
{
 8001a38:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001a3c:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a3e:	6802      	ldr	r2, [r0, #0]
{
 8001a40:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8001a42:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a44:	6813      	ldr	r3, [r2, #0]
 8001a46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a4a:	6013      	str	r3, [r2, #0]
{
 8001a4c:	460f      	mov	r7, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a4e:	9600      	str	r6, [sp, #0]
 8001a50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001a52:	2200      	movs	r2, #0
 8001a54:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8001a58:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a5a:	f7ff ff94 	bl	8001986 <I2C_WaitOnFlagUntilTimeout>
 8001a5e:	b118      	cbz	r0, 8001a68 <I2C_RequestMemoryWrite+0x30>
      return HAL_ERROR;
 8001a60:	2001      	movs	r0, #1
}
 8001a62:	b004      	add	sp, #16
 8001a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001a68:	6823      	ldr	r3, [r4, #0]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001a6c:	4918      	ldr	r1, [pc, #96]	; (8001ad0 <I2C_RequestMemoryWrite+0x98>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001a6e:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8001a72:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a74:	4620      	mov	r0, r4
 8001a76:	4633      	mov	r3, r6
 8001a78:	f7ff feeb 	bl	8001852 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a7c:	2800      	cmp	r0, #0
 8001a7e:	d1ef      	bne.n	8001a60 <I2C_RequestMemoryWrite+0x28>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a80:	6823      	ldr	r3, [r4, #0]
 8001a82:	9003      	str	r0, [sp, #12]
 8001a84:	695a      	ldr	r2, [r3, #20]
 8001a86:	9203      	str	r2, [sp, #12]
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a8c:	4632      	mov	r2, r6
 8001a8e:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a90:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a92:	4620      	mov	r0, r4
 8001a94:	f7ff ffa9 	bl	80019ea <I2C_WaitOnTXEFlagUntilTimeout>
 8001a98:	b140      	cbz	r0, 8001aac <I2C_RequestMemoryWrite+0x74>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a9c:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a9e:	bf01      	itttt	eq
 8001aa0:	6822      	ldreq	r2, [r4, #0]
 8001aa2:	6813      	ldreq	r3, [r2, #0]
 8001aa4:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8001aa8:	6013      	streq	r3, [r2, #0]
 8001aaa:	e7d9      	b.n	8001a60 <I2C_RequestMemoryWrite+0x28>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001aac:	f1b8 0f01 	cmp.w	r8, #1
 8001ab0:	6823      	ldr	r3, [r4, #0]
 8001ab2:	d102      	bne.n	8001aba <I2C_RequestMemoryWrite+0x82>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001ab4:	b2ed      	uxtb	r5, r5
 8001ab6:	611d      	str	r5, [r3, #16]
 8001ab8:	e7d3      	b.n	8001a62 <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001aba:	0a2a      	lsrs	r2, r5, #8
 8001abc:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001abe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001ac0:	4632      	mov	r2, r6
 8001ac2:	4620      	mov	r0, r4
 8001ac4:	f7ff ff91 	bl	80019ea <I2C_WaitOnTXEFlagUntilTimeout>
 8001ac8:	2800      	cmp	r0, #0
 8001aca:	d1e6      	bne.n	8001a9a <I2C_RequestMemoryWrite+0x62>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001acc:	6823      	ldr	r3, [r4, #0]
 8001ace:	e7f1      	b.n	8001ab4 <I2C_RequestMemoryWrite+0x7c>
 8001ad0:	00010002 	.word	0x00010002

08001ad4 <I2C_RequestMemoryRead>:
{
 8001ad4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001ad8:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ada:	6803      	ldr	r3, [r0, #0]
{
 8001adc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8001ade:	4616      	mov	r6, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ae6:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001aee:	601a      	str	r2, [r3, #0]
{
 8001af0:	460f      	mov	r7, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001af2:	9500      	str	r5, [sp, #0]
 8001af4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001af6:	2200      	movs	r2, #0
 8001af8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8001afc:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001afe:	f7ff ff42 	bl	8001986 <I2C_WaitOnFlagUntilTimeout>
 8001b02:	b118      	cbz	r0, 8001b0c <I2C_RequestMemoryRead+0x38>
    return HAL_ERROR;
 8001b04:	2001      	movs	r0, #1
}
 8001b06:	b004      	add	sp, #16
 8001b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b0c:	6823      	ldr	r3, [r4, #0]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b0e:	492b      	ldr	r1, [pc, #172]	; (8001bbc <I2C_RequestMemoryRead+0xe8>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b10:	b2ff      	uxtb	r7, r7
 8001b12:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 8001b16:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b18:	4620      	mov	r0, r4
 8001b1a:	462b      	mov	r3, r5
 8001b1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001b1e:	f7ff fe98 	bl	8001852 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b22:	2800      	cmp	r0, #0
 8001b24:	d1ee      	bne.n	8001b04 <I2C_RequestMemoryRead+0x30>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b26:	6823      	ldr	r3, [r4, #0]
 8001b28:	9003      	str	r0, [sp, #12]
 8001b2a:	695a      	ldr	r2, [r3, #20]
 8001b2c:	9203      	str	r2, [sp, #12]
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b32:	462a      	mov	r2, r5
 8001b34:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b36:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b38:	4620      	mov	r0, r4
 8001b3a:	f7ff ff56 	bl	80019ea <I2C_WaitOnTXEFlagUntilTimeout>
 8001b3e:	b140      	cbz	r0, 8001b52 <I2C_RequestMemoryRead+0x7e>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b42:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b44:	bf01      	itttt	eq
 8001b46:	6822      	ldreq	r2, [r4, #0]
 8001b48:	6813      	ldreq	r3, [r2, #0]
 8001b4a:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8001b4e:	6013      	streq	r3, [r2, #0]
 8001b50:	e7d8      	b.n	8001b04 <I2C_RequestMemoryRead+0x30>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001b52:	f1b8 0f01 	cmp.w	r8, #1
 8001b56:	6823      	ldr	r3, [r4, #0]
 8001b58:	d125      	bne.n	8001ba6 <I2C_RequestMemoryRead+0xd2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001b5a:	b2f6      	uxtb	r6, r6
 8001b5c:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b5e:	462a      	mov	r2, r5
 8001b60:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001b62:	4620      	mov	r0, r4
 8001b64:	f7ff ff41 	bl	80019ea <I2C_WaitOnTXEFlagUntilTimeout>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	2800      	cmp	r0, #0
 8001b6c:	d1e8      	bne.n	8001b40 <I2C_RequestMemoryRead+0x6c>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b6e:	6821      	ldr	r1, [r4, #0]
 8001b70:	680b      	ldr	r3, [r1, #0]
 8001b72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b76:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b78:	4620      	mov	r0, r4
 8001b7a:	9500      	str	r5, [sp, #0]
 8001b7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001b7e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001b82:	f7ff ff00 	bl	8001986 <I2C_WaitOnFlagUntilTimeout>
 8001b86:	2800      	cmp	r0, #0
 8001b88:	d1bc      	bne.n	8001b04 <I2C_RequestMemoryRead+0x30>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001b8a:	6823      	ldr	r3, [r4, #0]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001b8e:	490b      	ldr	r1, [pc, #44]	; (8001bbc <I2C_RequestMemoryRead+0xe8>)
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001b90:	f047 0701 	orr.w	r7, r7, #1
 8001b94:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b96:	4620      	mov	r0, r4
 8001b98:	462b      	mov	r3, r5
 8001b9a:	f7ff fe5a 	bl	8001852 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_ERROR;
 8001b9e:	3000      	adds	r0, #0
 8001ba0:	bf18      	it	ne
 8001ba2:	2001      	movne	r0, #1
 8001ba4:	e7af      	b.n	8001b06 <I2C_RequestMemoryRead+0x32>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001ba6:	0a32      	lsrs	r2, r6, #8
 8001ba8:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001baa:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001bac:	462a      	mov	r2, r5
 8001bae:	4620      	mov	r0, r4
 8001bb0:	f7ff ff1b 	bl	80019ea <I2C_WaitOnTXEFlagUntilTimeout>
 8001bb4:	2800      	cmp	r0, #0
 8001bb6:	d1c3      	bne.n	8001b40 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001bb8:	6823      	ldr	r3, [r4, #0]
 8001bba:	e7ce      	b.n	8001b5a <I2C_RequestMemoryRead+0x86>
 8001bbc:	00010002 	.word	0x00010002

08001bc0 <HAL_I2C_Init>:
{
 8001bc0:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8001bc2:	4604      	mov	r4, r0
 8001bc4:	b908      	cbnz	r0, 8001bca <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8001bc6:	2001      	movs	r0, #1
 8001bc8:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bca:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001bce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001bd2:	b91b      	cbnz	r3, 8001bdc <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8001bd4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001bd8:	f008 f9fc 	bl	8009fd4 <HAL_I2C_MspInit>
  __HAL_I2C_DISABLE(hi2c);
 8001bdc:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bde:	2324      	movs	r3, #36	; 0x24
 8001be0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001be4:	6813      	ldr	r3, [r2, #0]
 8001be6:	f023 0301 	bic.w	r3, r3, #1
 8001bea:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001bec:	f001 fb8a 	bl	8003304 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001bf0:	6865      	ldr	r5, [r4, #4]
 8001bf2:	4b41      	ldr	r3, [pc, #260]	; (8001cf8 <HAL_I2C_Init+0x138>)
 8001bf4:	429d      	cmp	r5, r3
 8001bf6:	d84d      	bhi.n	8001c94 <HAL_I2C_Init+0xd4>
 8001bf8:	4b40      	ldr	r3, [pc, #256]	; (8001cfc <HAL_I2C_Init+0x13c>)
 8001bfa:	4298      	cmp	r0, r3
 8001bfc:	d9e3      	bls.n	8001bc6 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bfe:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001c00:	493f      	ldr	r1, [pc, #252]	; (8001d00 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c02:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8001c04:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c0c:	430b      	orrs	r3, r1
 8001c0e:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c10:	6a13      	ldr	r3, [r2, #32]
 8001c12:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c16:	3101      	adds	r1, #1
 8001c18:	4319      	orrs	r1, r3
 8001c1a:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c1c:	69d1      	ldr	r1, [r2, #28]
 8001c1e:	4b36      	ldr	r3, [pc, #216]	; (8001cf8 <HAL_I2C_Init+0x138>)
 8001c20:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8001c24:	429d      	cmp	r5, r3
 8001c26:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001c2a:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8001c2e:	d848      	bhi.n	8001cc2 <HAL_I2C_Init+0x102>
 8001c30:	006d      	lsls	r5, r5, #1
 8001c32:	fbb0 f0f5 	udiv	r0, r0, r5
 8001c36:	3001      	adds	r0, #1
 8001c38:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001c3c:	2b04      	cmp	r3, #4
 8001c3e:	bf38      	it	cc
 8001c40:	2304      	movcc	r3, #4
 8001c42:	430b      	orrs	r3, r1
 8001c44:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c46:	6811      	ldr	r1, [r2, #0]
 8001c48:	6a20      	ldr	r0, [r4, #32]
 8001c4a:	69e3      	ldr	r3, [r4, #28]
 8001c4c:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8001c50:	4303      	orrs	r3, r0
 8001c52:	430b      	orrs	r3, r1
 8001c54:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c56:	6891      	ldr	r1, [r2, #8]
 8001c58:	68e0      	ldr	r0, [r4, #12]
 8001c5a:	6923      	ldr	r3, [r4, #16]
 8001c5c:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8001c60:	4303      	orrs	r3, r0
 8001c62:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001c66:	430b      	orrs	r3, r1
 8001c68:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c6a:	68d1      	ldr	r1, [r2, #12]
 8001c6c:	69a0      	ldr	r0, [r4, #24]
 8001c6e:	6963      	ldr	r3, [r4, #20]
 8001c70:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001c74:	4303      	orrs	r3, r0
 8001c76:	430b      	orrs	r3, r1
 8001c78:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001c7a:	6813      	ldr	r3, [r2, #0]
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c82:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001c84:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c86:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c88:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c8c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c8e:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8001c92:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c94:	4b1b      	ldr	r3, [pc, #108]	; (8001d04 <HAL_I2C_Init+0x144>)
 8001c96:	4298      	cmp	r0, r3
 8001c98:	d995      	bls.n	8001bc6 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c9a:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001c9c:	4e18      	ldr	r6, [pc, #96]	; (8001d00 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c9e:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8001ca0:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ca4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ca8:	4333      	orrs	r3, r6
 8001caa:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001cac:	6a13      	ldr	r3, [r2, #32]
 8001cae:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001cb2:	4371      	muls	r1, r6
 8001cb4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001cb8:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8001cbc:	fbb1 f1f6 	udiv	r1, r1, r6
 8001cc0:	e7a9      	b.n	8001c16 <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001cc2:	68a3      	ldr	r3, [r4, #8]
 8001cc4:	b953      	cbnz	r3, 8001cdc <HAL_I2C_Init+0x11c>
 8001cc6:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8001cca:	fbb0 f0f3 	udiv	r0, r0, r3
 8001cce:	1c43      	adds	r3, r0, #1
 8001cd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cd4:	b16b      	cbz	r3, 8001cf2 <HAL_I2C_Init+0x132>
 8001cd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cda:	e7b2      	b.n	8001c42 <HAL_I2C_Init+0x82>
 8001cdc:	2319      	movs	r3, #25
 8001cde:	436b      	muls	r3, r5
 8001ce0:	fbb0 f0f3 	udiv	r0, r0, r3
 8001ce4:	1c43      	adds	r3, r0, #1
 8001ce6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cea:	b113      	cbz	r3, 8001cf2 <HAL_I2C_Init+0x132>
 8001cec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001cf0:	e7a7      	b.n	8001c42 <HAL_I2C_Init+0x82>
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e7a5      	b.n	8001c42 <HAL_I2C_Init+0x82>
 8001cf6:	bf00      	nop
 8001cf8:	000186a0 	.word	0x000186a0
 8001cfc:	001e847f 	.word	0x001e847f
 8001d00:	000f4240 	.word	0x000f4240
 8001d04:	003d08ff 	.word	0x003d08ff

08001d08 <HAL_I2C_Master_Transmit>:
{
 8001d08:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001d0c:	4604      	mov	r4, r0
 8001d0e:	461f      	mov	r7, r3
 8001d10:	460d      	mov	r5, r1
 8001d12:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8001d14:	f7ff f936 	bl	8000f84 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d18:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001d1c:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8001d1e:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d20:	d004      	beq.n	8001d2c <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 8001d22:	2502      	movs	r5, #2
}
 8001d24:	4628      	mov	r0, r5
 8001d26:	b004      	add	sp, #16
 8001d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d2c:	9000      	str	r0, [sp, #0]
 8001d2e:	2319      	movs	r3, #25
 8001d30:	2201      	movs	r2, #1
 8001d32:	4958      	ldr	r1, [pc, #352]	; (8001e94 <HAL_I2C_Master_Transmit+0x18c>)
 8001d34:	4620      	mov	r0, r4
 8001d36:	f7ff fe26 	bl	8001986 <I2C_WaitOnFlagUntilTimeout>
 8001d3a:	2800      	cmp	r0, #0
 8001d3c:	d1f1      	bne.n	8001d22 <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 8001d3e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d0ed      	beq.n	8001d22 <HAL_I2C_Master_Transmit+0x1a>
 8001d46:	2301      	movs	r3, #1
 8001d48:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d4c:	6823      	ldr	r3, [r4, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001d52:	bf5e      	ittt	pl
 8001d54:	681a      	ldrpl	r2, [r3, #0]
 8001d56:	f042 0201 	orrpl.w	r2, r2, #1
 8001d5a:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d62:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001d64:	2221      	movs	r2, #33	; 0x21
 8001d66:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001d6a:	2210      	movs	r2, #16
 8001d6c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001d70:	2200      	movs	r2, #0
 8001d72:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8001d74:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d76:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001d78:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d7a:	4a47      	ldr	r2, [pc, #284]	; (8001e98 <HAL_I2C_Master_Transmit+0x190>)
 8001d7c:	62e2      	str	r2, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d7e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8001d80:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001d84:	2a08      	cmp	r2, #8
 8001d86:	d004      	beq.n	8001d92 <HAL_I2C_Master_Transmit+0x8a>
 8001d88:	2a01      	cmp	r2, #1
 8001d8a:	d002      	beq.n	8001d92 <HAL_I2C_Master_Transmit+0x8a>
 8001d8c:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001d90:	d104      	bne.n	8001d9c <HAL_I2C_Master_Transmit+0x94>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	e002      	b.n	8001da2 <HAL_I2C_Master_Transmit+0x9a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001d9c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001d9e:	2a12      	cmp	r2, #18
 8001da0:	d0f7      	beq.n	8001d92 <HAL_I2C_Master_Transmit+0x8a>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001da2:	9600      	str	r6, [sp, #0]
 8001da4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001da6:	2200      	movs	r2, #0
 8001da8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001dac:	4620      	mov	r0, r4
 8001dae:	f7ff fdea 	bl	8001986 <I2C_WaitOnFlagUntilTimeout>
 8001db2:	b108      	cbz	r0, 8001db8 <HAL_I2C_Master_Transmit+0xb0>
        return HAL_ERROR;
 8001db4:	2501      	movs	r5, #1
 8001db6:	e7b5      	b.n	8001d24 <HAL_I2C_Master_Transmit+0x1c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001db8:	6923      	ldr	r3, [r4, #16]
 8001dba:	6822      	ldr	r2, [r4, #0]
 8001dbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001dc0:	d113      	bne.n	8001dea <HAL_I2C_Master_Transmit+0xe2>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001dc2:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8001dc6:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001dc8:	4633      	mov	r3, r6
 8001dca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001dcc:	4933      	ldr	r1, [pc, #204]	; (8001e9c <HAL_I2C_Master_Transmit+0x194>)
 8001dce:	4620      	mov	r0, r4
 8001dd0:	f7ff fd3f 	bl	8001852 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001dd4:	4605      	mov	r5, r0
 8001dd6:	2800      	cmp	r0, #0
 8001dd8:	d1ec      	bne.n	8001db4 <HAL_I2C_Master_Transmit+0xac>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dda:	6823      	ldr	r3, [r4, #0]
 8001ddc:	9003      	str	r0, [sp, #12]
 8001dde:	695a      	ldr	r2, [r3, #20]
 8001de0:	9203      	str	r2, [sp, #12]
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	9303      	str	r3, [sp, #12]
 8001de6:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8001de8:	e044      	b.n	8001e74 <HAL_I2C_Master_Transmit+0x16c>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001dea:	11eb      	asrs	r3, r5, #7
 8001dec:	f003 0306 	and.w	r3, r3, #6
 8001df0:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001df4:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001df6:	492a      	ldr	r1, [pc, #168]	; (8001ea0 <HAL_I2C_Master_Transmit+0x198>)
 8001df8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001dfa:	4633      	mov	r3, r6
 8001dfc:	4620      	mov	r0, r4
 8001dfe:	f7ff fd28 	bl	8001852 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e02:	2800      	cmp	r0, #0
 8001e04:	d1d6      	bne.n	8001db4 <HAL_I2C_Master_Transmit+0xac>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001e06:	6823      	ldr	r3, [r4, #0]
 8001e08:	b2ed      	uxtb	r5, r5
 8001e0a:	611d      	str	r5, [r3, #16]
 8001e0c:	e7dc      	b.n	8001dc8 <HAL_I2C_Master_Transmit+0xc0>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e0e:	4632      	mov	r2, r6
 8001e10:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001e12:	4620      	mov	r0, r4
 8001e14:	f7ff fde9 	bl	80019ea <I2C_WaitOnTXEFlagUntilTimeout>
 8001e18:	b140      	cbz	r0, 8001e2c <HAL_I2C_Master_Transmit+0x124>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e1c:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e1e:	bf01      	itttt	eq
 8001e20:	6822      	ldreq	r2, [r4, #0]
 8001e22:	6813      	ldreq	r3, [r2, #0]
 8001e24:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8001e28:	6013      	streq	r3, [r2, #0]
 8001e2a:	e7c3      	b.n	8001db4 <HAL_I2C_Master_Transmit+0xac>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001e2e:	6820      	ldr	r0, [r4, #0]
 8001e30:	461a      	mov	r2, r3
 8001e32:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001e36:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 8001e38:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001e3a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001e3c:	3a01      	subs	r2, #1
 8001e3e:	b292      	uxth	r2, r2
 8001e40:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001e42:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e44:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 8001e46:	1e51      	subs	r1, r2, #1
 8001e48:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e4a:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 8001e4c:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e4e:	d50a      	bpl.n	8001e66 <HAL_I2C_Master_Transmit+0x15e>
 8001e50:	b149      	cbz	r1, 8001e66 <HAL_I2C_Master_Transmit+0x15e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e52:	7859      	ldrb	r1, [r3, #1]
 8001e54:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 8001e56:	3302      	adds	r3, #2
 8001e58:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8001e5a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8001e60:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8001e62:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8001e64:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e66:	4632      	mov	r2, r6
 8001e68:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001e6a:	4620      	mov	r0, r4
 8001e6c:	f7ff fd36 	bl	80018dc <I2C_WaitOnBTFFlagUntilTimeout>
 8001e70:	2800      	cmp	r0, #0
 8001e72:	d1d2      	bne.n	8001e1a <HAL_I2C_Master_Transmit+0x112>
    while (hi2c->XferSize > 0U)
 8001e74:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1c9      	bne.n	8001e0e <HAL_I2C_Master_Transmit+0x106>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e7a:	6821      	ldr	r1, [r4, #0]
 8001e7c:	680a      	ldr	r2, [r1, #0]
 8001e7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e82:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001e84:	2220      	movs	r2, #32
 8001e86:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8001e8a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e8e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8001e92:	e747      	b.n	8001d24 <HAL_I2C_Master_Transmit+0x1c>
 8001e94:	00100002 	.word	0x00100002
 8001e98:	ffff0000 	.word	0xffff0000
 8001e9c:	00010002 	.word	0x00010002
 8001ea0:	00010008 	.word	0x00010008

08001ea4 <HAL_I2C_Mem_Write>:
{
 8001ea4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001ea8:	4604      	mov	r4, r0
 8001eaa:	4699      	mov	r9, r3
 8001eac:	460f      	mov	r7, r1
 8001eae:	4690      	mov	r8, r2
 8001eb0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8001eb2:	f7ff f867 	bl	8000f84 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eb6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001eba:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8001ebc:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ebe:	d003      	beq.n	8001ec8 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8001ec0:	2002      	movs	r0, #2
}
 8001ec2:	b003      	add	sp, #12
 8001ec4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ec8:	9000      	str	r0, [sp, #0]
 8001eca:	2319      	movs	r3, #25
 8001ecc:	2201      	movs	r2, #1
 8001ece:	493b      	ldr	r1, [pc, #236]	; (8001fbc <HAL_I2C_Mem_Write+0x118>)
 8001ed0:	4620      	mov	r0, r4
 8001ed2:	f7ff fd58 	bl	8001986 <I2C_WaitOnFlagUntilTimeout>
 8001ed6:	2800      	cmp	r0, #0
 8001ed8:	d1f2      	bne.n	8001ec0 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8001eda:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d0ee      	beq.n	8001ec0 <HAL_I2C_Mem_Write+0x1c>
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ee8:	6823      	ldr	r3, [r4, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	07d1      	lsls	r1, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001eee:	bf5e      	ittt	pl
 8001ef0:	681a      	ldrpl	r2, [r3, #0]
 8001ef2:	f042 0201 	orrpl.w	r2, r2, #1
 8001ef6:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001efe:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f00:	2321      	movs	r3, #33	; 0x21
 8001f02:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f06:	2340      	movs	r3, #64	; 0x40
 8001f08:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8001f10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001f12:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f14:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8001f18:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f1a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f1c:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f1e:	4b28      	ldr	r3, [pc, #160]	; (8001fc0 <HAL_I2C_Mem_Write+0x11c>)
 8001f20:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f22:	9501      	str	r5, [sp, #4]
 8001f24:	9600      	str	r6, [sp, #0]
 8001f26:	464b      	mov	r3, r9
 8001f28:	4642      	mov	r2, r8
 8001f2a:	4639      	mov	r1, r7
 8001f2c:	4620      	mov	r0, r4
 8001f2e:	f7ff fd83 	bl	8001a38 <I2C_RequestMemoryWrite>
 8001f32:	2800      	cmp	r0, #0
 8001f34:	d02a      	beq.n	8001f8c <HAL_I2C_Mem_Write+0xe8>
      return HAL_ERROR;
 8001f36:	2001      	movs	r0, #1
 8001f38:	e7c3      	b.n	8001ec2 <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f3a:	f7ff fd56 	bl	80019ea <I2C_WaitOnTXEFlagUntilTimeout>
 8001f3e:	b140      	cbz	r0, 8001f52 <HAL_I2C_Mem_Write+0xae>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f42:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f44:	bf01      	itttt	eq
 8001f46:	6822      	ldreq	r2, [r4, #0]
 8001f48:	6813      	ldreq	r3, [r2, #0]
 8001f4a:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8001f4e:	6013      	streq	r3, [r2, #0]
 8001f50:	e7f1      	b.n	8001f36 <HAL_I2C_Mem_Write+0x92>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f54:	6827      	ldr	r7, [r4, #0]
 8001f56:	461a      	mov	r2, r3
 8001f58:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001f5c:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 8001f5e:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001f60:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001f62:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001f64:	3a01      	subs	r2, #1
 8001f66:	b292      	uxth	r2, r2
 8001f68:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f6a:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 8001f6c:	1e48      	subs	r0, r1, #1
 8001f6e:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f70:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 8001f72:	8520      	strh	r0, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f74:	d50a      	bpl.n	8001f8c <HAL_I2C_Mem_Write+0xe8>
 8001f76:	b148      	cbz	r0, 8001f8c <HAL_I2C_Mem_Write+0xe8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f78:	785a      	ldrb	r2, [r3, #1]
 8001f7a:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8001f7c:	3302      	adds	r3, #2
 8001f7e:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8001f80:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f82:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 8001f84:	3902      	subs	r1, #2
        hi2c->XferCount--;
 8001f86:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8001f88:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8001f8a:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001f8c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f8e:	462a      	mov	r2, r5
 8001f90:	4631      	mov	r1, r6
 8001f92:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d1d0      	bne.n	8001f3a <HAL_I2C_Mem_Write+0x96>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f98:	f7ff fca0 	bl	80018dc <I2C_WaitOnBTFFlagUntilTimeout>
 8001f9c:	2800      	cmp	r0, #0
 8001f9e:	d1cf      	bne.n	8001f40 <HAL_I2C_Mem_Write+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fa0:	6822      	ldr	r2, [r4, #0]
 8001fa2:	6813      	ldr	r3, [r2, #0]
 8001fa4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fa8:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001faa:	2320      	movs	r3, #32
 8001fac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8001fb0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fb4:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 8001fb8:	e783      	b.n	8001ec2 <HAL_I2C_Mem_Write+0x1e>
 8001fba:	bf00      	nop
 8001fbc:	00100002 	.word	0x00100002
 8001fc0:	ffff0000 	.word	0xffff0000

08001fc4 <HAL_I2C_Mem_Read>:
{
 8001fc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001fc8:	4604      	mov	r4, r0
 8001fca:	b087      	sub	sp, #28
 8001fcc:	4699      	mov	r9, r3
 8001fce:	460d      	mov	r5, r1
 8001fd0:	4690      	mov	r8, r2
 8001fd2:	9f10      	ldr	r7, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8001fd4:	f7fe ffd6 	bl	8000f84 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fd8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001fdc:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8001fde:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fe0:	d004      	beq.n	8001fec <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 8001fe2:	2502      	movs	r5, #2
}
 8001fe4:	4628      	mov	r0, r5
 8001fe6:	b007      	add	sp, #28
 8001fe8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fec:	9000      	str	r0, [sp, #0]
 8001fee:	2319      	movs	r3, #25
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	4977      	ldr	r1, [pc, #476]	; (80021d0 <HAL_I2C_Mem_Read+0x20c>)
 8001ff4:	4620      	mov	r0, r4
 8001ff6:	f7ff fcc6 	bl	8001986 <I2C_WaitOnFlagUntilTimeout>
 8001ffa:	2800      	cmp	r0, #0
 8001ffc:	d1f1      	bne.n	8001fe2 <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 8001ffe:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002002:	2b01      	cmp	r3, #1
 8002004:	d0ed      	beq.n	8001fe2 <HAL_I2C_Mem_Read+0x1e>
 8002006:	2301      	movs	r3, #1
 8002008:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800200c:	6823      	ldr	r3, [r4, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	07d0      	lsls	r0, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8002012:	bf5e      	ittt	pl
 8002014:	681a      	ldrpl	r2, [r3, #0]
 8002016:	f042 0201 	orrpl.w	r2, r2, #1
 800201a:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002022:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002024:	2322      	movs	r3, #34	; 0x22
 8002026:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800202a:	2340      	movs	r3, #64	; 0x40
 800202c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002030:	2300      	movs	r3, #0
 8002032:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8002034:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002036:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002038:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800203c:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800203e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002040:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002042:	4b64      	ldr	r3, [pc, #400]	; (80021d4 <HAL_I2C_Mem_Read+0x210>)
 8002044:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002046:	4629      	mov	r1, r5
 8002048:	9601      	str	r6, [sp, #4]
 800204a:	9700      	str	r7, [sp, #0]
 800204c:	464b      	mov	r3, r9
 800204e:	4642      	mov	r2, r8
 8002050:	4620      	mov	r0, r4
 8002052:	f7ff fd3f 	bl	8001ad4 <I2C_RequestMemoryRead>
 8002056:	4605      	mov	r5, r0
 8002058:	b108      	cbz	r0, 800205e <HAL_I2C_Mem_Read+0x9a>
      return HAL_ERROR;
 800205a:	2501      	movs	r5, #1
 800205c:	e7c2      	b.n	8001fe4 <HAL_I2C_Mem_Read+0x20>
    if (hi2c->XferSize == 0U)
 800205e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8002060:	6823      	ldr	r3, [r4, #0]
 8002062:	b992      	cbnz	r2, 800208a <HAL_I2C_Mem_Read+0xc6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002064:	9002      	str	r0, [sp, #8]
 8002066:	695a      	ldr	r2, [r3, #20]
 8002068:	9202      	str	r2, [sp, #8]
 800206a:	699a      	ldr	r2, [r3, #24]
 800206c:	9202      	str	r2, [sp, #8]
 800206e:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002076:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002078:	2320      	movs	r3, #32
 800207a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800207e:	2300      	movs	r3, #0
 8002080:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8002084:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8002088:	e7ac      	b.n	8001fe4 <HAL_I2C_Mem_Read+0x20>
    else if (hi2c->XferSize == 1U)
 800208a:	2a01      	cmp	r2, #1
 800208c:	d12c      	bne.n	80020e8 <HAL_I2C_Mem_Read+0x124>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002094:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002096:	9003      	str	r0, [sp, #12]
 8002098:	695a      	ldr	r2, [r3, #20]
 800209a:	9203      	str	r2, [sp, #12]
 800209c:	699a      	ldr	r2, [r3, #24]
 800209e:	9203      	str	r2, [sp, #12]
 80020a0:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020a8:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020aa:	f8df 812c 	ldr.w	r8, [pc, #300]	; 80021d8 <HAL_I2C_Mem_Read+0x214>
    while (hi2c->XferSize > 0U)
 80020ae:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d0e1      	beq.n	8002078 <HAL_I2C_Mem_Read+0xb4>
      if (hi2c->XferSize <= 3U)
 80020b4:	2b03      	cmp	r3, #3
 80020b6:	d86e      	bhi.n	8002196 <HAL_I2C_Mem_Read+0x1d2>
        if (hi2c->XferSize == 1U)
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d12d      	bne.n	8002118 <HAL_I2C_Mem_Read+0x154>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020bc:	4632      	mov	r2, r6
 80020be:	4639      	mov	r1, r7
 80020c0:	4620      	mov	r0, r4
 80020c2:	f7ff fc31 	bl	8001928 <I2C_WaitOnRXNEFlagUntilTimeout>
 80020c6:	2800      	cmp	r0, #0
 80020c8:	d1c7      	bne.n	800205a <HAL_I2C_Mem_Read+0x96>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020ca:	6822      	ldr	r2, [r4, #0]
 80020cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80020ce:	6912      	ldr	r2, [r2, #16]
 80020d0:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80020d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80020d4:	3301      	adds	r3, #1
 80020d6:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80020d8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80020da:	3b01      	subs	r3, #1
 80020dc:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80020de:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80020e0:	3b01      	subs	r3, #1
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	8563      	strh	r3, [r4, #42]	; 0x2a
 80020e6:	e7e2      	b.n	80020ae <HAL_I2C_Mem_Read+0xea>
    else if (hi2c->XferSize == 2U)
 80020e8:	2a02      	cmp	r2, #2
 80020ea:	d10e      	bne.n	800210a <HAL_I2C_Mem_Read+0x146>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020f2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020fa:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020fc:	9004      	str	r0, [sp, #16]
 80020fe:	695a      	ldr	r2, [r3, #20]
 8002100:	9204      	str	r2, [sp, #16]
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	9304      	str	r3, [sp, #16]
 8002106:	9b04      	ldr	r3, [sp, #16]
 8002108:	e7cf      	b.n	80020aa <HAL_I2C_Mem_Read+0xe6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800210a:	9005      	str	r0, [sp, #20]
 800210c:	695a      	ldr	r2, [r3, #20]
 800210e:	9205      	str	r2, [sp, #20]
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	9305      	str	r3, [sp, #20]
 8002114:	9b05      	ldr	r3, [sp, #20]
 8002116:	e7c8      	b.n	80020aa <HAL_I2C_Mem_Read+0xe6>
        else if (hi2c->XferSize == 2U)
 8002118:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800211a:	9600      	str	r6, [sp, #0]
 800211c:	463b      	mov	r3, r7
 800211e:	f04f 0200 	mov.w	r2, #0
 8002122:	4641      	mov	r1, r8
 8002124:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 8002126:	d119      	bne.n	800215c <HAL_I2C_Mem_Read+0x198>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002128:	f7ff fc2d 	bl	8001986 <I2C_WaitOnFlagUntilTimeout>
 800212c:	2800      	cmp	r0, #0
 800212e:	d194      	bne.n	800205a <HAL_I2C_Mem_Read+0x96>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002130:	6823      	ldr	r3, [r4, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002138:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800213a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 8002140:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002142:	1c53      	adds	r3, r2, #1
 8002144:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002146:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002148:	3b01      	subs	r3, #1
 800214a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800214c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800214e:	3b01      	subs	r3, #1
 8002150:	b29b      	uxth	r3, r3
 8002152:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002154:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	7053      	strb	r3, [r2, #1]
 800215a:	e7ba      	b.n	80020d2 <HAL_I2C_Mem_Read+0x10e>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800215c:	f7ff fc13 	bl	8001986 <I2C_WaitOnFlagUntilTimeout>
 8002160:	4602      	mov	r2, r0
 8002162:	2800      	cmp	r0, #0
 8002164:	f47f af79 	bne.w	800205a <HAL_I2C_Mem_Read+0x96>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002168:	6823      	ldr	r3, [r4, #0]
 800216a:	6819      	ldr	r1, [r3, #0]
 800216c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002170:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002172:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	700b      	strb	r3, [r1, #0]
          hi2c->pBuffPtr++;
 8002178:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800217a:	9600      	str	r6, [sp, #0]
          hi2c->pBuffPtr++;
 800217c:	3301      	adds	r3, #1
 800217e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002180:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002182:	3b01      	subs	r3, #1
 8002184:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002186:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002188:	3b01      	subs	r3, #1
 800218a:	b29b      	uxth	r3, r3
 800218c:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800218e:	4641      	mov	r1, r8
 8002190:	463b      	mov	r3, r7
 8002192:	4620      	mov	r0, r4
 8002194:	e7c8      	b.n	8002128 <HAL_I2C_Mem_Read+0x164>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002196:	4632      	mov	r2, r6
 8002198:	4639      	mov	r1, r7
 800219a:	4620      	mov	r0, r4
 800219c:	f7ff fbc4 	bl	8001928 <I2C_WaitOnRXNEFlagUntilTimeout>
 80021a0:	2800      	cmp	r0, #0
 80021a2:	f47f af5a 	bne.w	800205a <HAL_I2C_Mem_Read+0x96>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021a6:	6822      	ldr	r2, [r4, #0]
 80021a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80021aa:	6912      	ldr	r2, [r2, #16]
 80021ac:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80021ae:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80021b0:	1c53      	adds	r3, r2, #1
 80021b2:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 80021b4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80021b6:	3b01      	subs	r3, #1
 80021b8:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80021ba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80021bc:	3b01      	subs	r3, #1
 80021be:	b29b      	uxth	r3, r3
 80021c0:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80021c2:	6823      	ldr	r3, [r4, #0]
 80021c4:	6959      	ldr	r1, [r3, #20]
 80021c6:	0749      	lsls	r1, r1, #29
 80021c8:	f57f af71 	bpl.w	80020ae <HAL_I2C_Mem_Read+0xea>
 80021cc:	e7c3      	b.n	8002156 <HAL_I2C_Mem_Read+0x192>
 80021ce:	bf00      	nop
 80021d0:	00100002 	.word	0x00100002
 80021d4:	ffff0000 	.word	0xffff0000
 80021d8:	00010004 	.word	0x00010004

080021dc <HAL_I2C_IsDeviceReady>:
{
 80021dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021e0:	4604      	mov	r4, r0
 80021e2:	b085      	sub	sp, #20
 80021e4:	4698      	mov	r8, r3
 80021e6:	4689      	mov	r9, r1
 80021e8:	4692      	mov	sl, r2
  uint32_t tickstart = HAL_GetTick();
 80021ea:	f7fe fecb 	bl	8000f84 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80021ee:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80021f2:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 80021f4:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80021f6:	d003      	beq.n	8002200 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 80021f8:	2002      	movs	r0, #2
}
 80021fa:	b005      	add	sp, #20
 80021fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002200:	9000      	str	r0, [sp, #0]
 8002202:	2319      	movs	r3, #25
 8002204:	2201      	movs	r2, #1
 8002206:	4948      	ldr	r1, [pc, #288]	; (8002328 <HAL_I2C_IsDeviceReady+0x14c>)
 8002208:	4620      	mov	r0, r4
 800220a:	f7ff fbbc 	bl	8001986 <I2C_WaitOnFlagUntilTimeout>
 800220e:	2800      	cmp	r0, #0
 8002210:	d1f2      	bne.n	80021f8 <HAL_I2C_IsDeviceReady+0x1c>
    __HAL_LOCK(hi2c);
 8002212:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002216:	2b01      	cmp	r3, #1
 8002218:	d0ee      	beq.n	80021f8 <HAL_I2C_IsDeviceReady+0x1c>
 800221a:	2301      	movs	r3, #1
 800221c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002220:	6823      	ldr	r3, [r4, #0]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002222:	f8df b104 	ldr.w	fp, [pc, #260]	; 8002328 <HAL_I2C_IsDeviceReady+0x14c>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 800222a:	bf5e      	ittt	pl
 800222c:	681a      	ldrpl	r2, [r3, #0]
 800222e:	f042 0201 	orrpl.w	r2, r2, #1
 8002232:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800223a:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800223c:	2324      	movs	r3, #36	; 0x24
 800223e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002242:	2300      	movs	r3, #0
 8002244:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002246:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 800224a:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t I2C_Trials = 1U;
 800224c:	2701      	movs	r7, #1
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800224e:	f009 09fe 	and.w	r9, r9, #254	; 0xfe
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002252:	6822      	ldr	r2, [r4, #0]
 8002254:	6813      	ldr	r3, [r2, #0]
 8002256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800225a:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800225c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002260:	9500      	str	r5, [sp, #0]
 8002262:	4643      	mov	r3, r8
 8002264:	2200      	movs	r2, #0
 8002266:	4620      	mov	r0, r4
 8002268:	f7ff fb8d 	bl	8001986 <I2C_WaitOnFlagUntilTimeout>
 800226c:	b108      	cbz	r0, 8002272 <HAL_I2C_IsDeviceReady+0x96>
    return HAL_ERROR;
 800226e:	2001      	movs	r0, #1
 8002270:	e7c3      	b.n	80021fa <HAL_I2C_IsDeviceReady+0x1e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002272:	6823      	ldr	r3, [r4, #0]
 8002274:	f8c3 9010 	str.w	r9, [r3, #16]
      tickstart = HAL_GetTick();
 8002278:	f7fe fe84 	bl	8000f84 <HAL_GetTick>
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800227c:	6823      	ldr	r3, [r4, #0]
 800227e:	695a      	ldr	r2, [r3, #20]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002280:	695b      	ldr	r3, [r3, #20]
      tickstart = HAL_GetTick();
 8002282:	4605      	mov	r5, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002284:	f3c2 0240 	ubfx	r2, r2, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002288:	f3c3 2380 	ubfx	r3, r3, #10, #1
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800228c:	26a0      	movs	r6, #160	; 0xa0
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800228e:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8002292:	29a0      	cmp	r1, #160	; 0xa0
 8002294:	d001      	beq.n	800229a <HAL_I2C_IsDeviceReady+0xbe>
 8002296:	b902      	cbnz	r2, 800229a <HAL_I2C_IsDeviceReady+0xbe>
 8002298:	b303      	cbz	r3, 80022dc <HAL_I2C_IsDeviceReady+0x100>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800229a:	6823      	ldr	r3, [r4, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 800229c:	2620      	movs	r6, #32
 800229e:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80022a2:	695a      	ldr	r2, [r3, #20]
 80022a4:	f012 0f02 	tst.w	r2, #2
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022ae:	601a      	str	r2, [r3, #0]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80022b0:	d026      	beq.n	8002300 <HAL_I2C_IsDeviceReady+0x124>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022b2:	2200      	movs	r2, #0
 80022b4:	9203      	str	r2, [sp, #12]
 80022b6:	695a      	ldr	r2, [r3, #20]
 80022b8:	9203      	str	r2, [sp, #12]
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	9303      	str	r3, [sp, #12]
 80022be:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022c0:	9500      	str	r5, [sp, #0]
 80022c2:	2319      	movs	r3, #25
 80022c4:	2201      	movs	r2, #1
 80022c6:	4918      	ldr	r1, [pc, #96]	; (8002328 <HAL_I2C_IsDeviceReady+0x14c>)
 80022c8:	4620      	mov	r0, r4
 80022ca:	f7ff fb5c 	bl	8001986 <I2C_WaitOnFlagUntilTimeout>
 80022ce:	2800      	cmp	r0, #0
 80022d0:	d1cd      	bne.n	800226e <HAL_I2C_IsDeviceReady+0x92>
        hi2c->State = HAL_I2C_STATE_READY;
 80022d2:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80022d6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        return HAL_OK;
 80022da:	e78e      	b.n	80021fa <HAL_I2C_IsDeviceReady+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80022dc:	f7fe fe52 	bl	8000f84 <HAL_GetTick>
 80022e0:	1b40      	subs	r0, r0, r5
 80022e2:	4580      	cmp	r8, r0
 80022e4:	d302      	bcc.n	80022ec <HAL_I2C_IsDeviceReady+0x110>
 80022e6:	f1b8 0f00 	cmp.w	r8, #0
 80022ea:	d101      	bne.n	80022f0 <HAL_I2C_IsDeviceReady+0x114>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80022ec:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80022f0:	6823      	ldr	r3, [r4, #0]
 80022f2:	695a      	ldr	r2, [r3, #20]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80022f4:	695b      	ldr	r3, [r3, #20]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80022f6:	f3c2 0240 	ubfx	r2, r2, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80022fa:	f3c3 2380 	ubfx	r3, r3, #10, #1
 80022fe:	e7c6      	b.n	800228e <HAL_I2C_IsDeviceReady+0xb2>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002300:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002304:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002306:	4659      	mov	r1, fp
 8002308:	9500      	str	r5, [sp, #0]
 800230a:	2319      	movs	r3, #25
 800230c:	2201      	movs	r2, #1
 800230e:	4620      	mov	r0, r4
 8002310:	f7ff fb39 	bl	8001986 <I2C_WaitOnFlagUntilTimeout>
 8002314:	2800      	cmp	r0, #0
 8002316:	d1aa      	bne.n	800226e <HAL_I2C_IsDeviceReady+0x92>
      I2C_Trials++;
 8002318:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 800231a:	4557      	cmp	r7, sl
 800231c:	d399      	bcc.n	8002252 <HAL_I2C_IsDeviceReady+0x76>
    hi2c->State = HAL_I2C_STATE_READY;
 800231e:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8002322:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 8002326:	e7a2      	b.n	800226e <HAL_I2C_IsDeviceReady+0x92>
 8002328:	00100002 	.word	0x00100002

0800232c <HAL_I2C_MasterTxCpltCallback>:
 800232c:	4770      	bx	lr

0800232e <HAL_I2C_MasterRxCpltCallback>:
 800232e:	4770      	bx	lr

08002330 <HAL_I2C_SlaveTxCpltCallback>:
 8002330:	4770      	bx	lr

08002332 <HAL_I2C_SlaveRxCpltCallback>:
 8002332:	4770      	bx	lr

08002334 <HAL_I2C_AddrCallback>:
{
 8002334:	4770      	bx	lr

08002336 <HAL_I2C_ListenCpltCallback>:
 8002336:	4770      	bx	lr

08002338 <HAL_I2C_MemTxCpltCallback>:
 8002338:	4770      	bx	lr

0800233a <HAL_I2C_MemRxCpltCallback>:
 800233a:	4770      	bx	lr

0800233c <HAL_I2C_ErrorCallback>:
 800233c:	4770      	bx	lr

0800233e <HAL_I2C_AbortCpltCallback>:
{
 800233e:	4770      	bx	lr

08002340 <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002340:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002342:	6802      	ldr	r2, [r0, #0]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002344:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
{
 8002348:	b570      	push	{r4, r5, r6, lr}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800234a:	6814      	ldr	r4, [r2, #0]
  hi2c->hdmatx->XferCpltCallback = NULL;
 800234c:	6b46      	ldr	r6, [r0, #52]	; 0x34
  hi2c->hdmarx->XferCpltCallback = NULL;
 800234e:	6b85      	ldr	r5, [r0, #56]	; 0x38
  hi2c->hdmatx->XferCpltCallback = NULL;
 8002350:	2300      	movs	r3, #0
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002352:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
  hi2c->hdmatx->XferCpltCallback = NULL;
 8002356:	63f3      	str	r3, [r6, #60]	; 0x3c
  hi2c->hdmarx->XferCpltCallback = NULL;
 8002358:	63eb      	str	r3, [r5, #60]	; 0x3c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800235a:	6014      	str	r4, [r2, #0]
  hi2c->XferCount = 0U;
 800235c:	8543      	strh	r3, [r0, #42]	; 0x2a
  __HAL_I2C_DISABLE(hi2c);
 800235e:	6814      	ldr	r4, [r2, #0]
  hi2c->hdmatx->XferAbortCallback = NULL;
 8002360:	6533      	str	r3, [r6, #80]	; 0x50
  __HAL_I2C_DISABLE(hi2c);
 8002362:	f024 0401 	bic.w	r4, r4, #1
  hi2c->hdmarx->XferAbortCallback = NULL;
 8002366:	652b      	str	r3, [r5, #80]	; 0x50
  __HAL_I2C_DISABLE(hi2c);
 8002368:	6014      	str	r4, [r2, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800236a:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 800236e:	2c60      	cmp	r4, #96	; 0x60
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002370:	b2c9      	uxtb	r1, r1
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002372:	d108      	bne.n	8002386 <I2C_DMAAbort+0x46>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002374:	2220      	movs	r2, #32
 8002376:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800237a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800237e:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8002380:	f7ff ffdd 	bl	800233e <HAL_I2C_AbortCpltCallback>
 8002384:	bd70      	pop	{r4, r5, r6, pc}
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002386:	f001 0128 	and.w	r1, r1, #40	; 0x28
 800238a:	2928      	cmp	r1, #40	; 0x28
 800238c:	d10d      	bne.n	80023aa <I2C_DMAAbort+0x6a>
      __HAL_I2C_ENABLE(hi2c);
 800238e:	6814      	ldr	r4, [r2, #0]
 8002390:	f044 0401 	orr.w	r4, r4, #1
 8002394:	6014      	str	r4, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002396:	6814      	ldr	r4, [r2, #0]
 8002398:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 800239c:	6014      	str	r4, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800239e:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80023a0:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
    HAL_I2C_ErrorCallback(hi2c);
 80023a4:	f7ff ffca 	bl	800233c <HAL_I2C_ErrorCallback>
 80023a8:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->State = HAL_I2C_STATE_READY;
 80023aa:	2220      	movs	r2, #32
 80023ac:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80023b0:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 80023b4:	e7f6      	b.n	80023a4 <I2C_DMAAbort+0x64>
	...

080023b8 <I2C_ITError>:
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80023b8:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80023bc:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80023c0:	2b10      	cmp	r3, #16
{
 80023c2:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80023c4:	b2d2      	uxtb	r2, r2
{
 80023c6:	4604      	mov	r4, r0
 80023c8:	6803      	ldr	r3, [r0, #0]
  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80023ca:	d105      	bne.n	80023d8 <I2C_ITError+0x20>
 80023cc:	2a22      	cmp	r2, #34	; 0x22
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80023ce:	bf02      	ittt	eq
 80023d0:	6819      	ldreq	r1, [r3, #0]
 80023d2:	f421 6100 	biceq.w	r1, r1, #2048	; 0x800
 80023d6:	6019      	streq	r1, [r3, #0]
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80023d8:	f002 0128 	and.w	r1, r2, #40	; 0x28
 80023dc:	2928      	cmp	r1, #40	; 0x28
 80023de:	d13a      	bne.n	8002456 <I2C_ITError+0x9e>
    hi2c->PreviousState = I2C_STATE_NONE;
 80023e0:	2200      	movs	r2, #0
 80023e2:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80023e4:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 80023ee:	d059      	beq.n	80024a4 <I2C_ITError+0xec>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80023f0:	685a      	ldr	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80023f2:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80023f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023f8:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80023fa:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80023fe:	2b01      	cmp	r3, #1
 8002400:	4b3c      	ldr	r3, [pc, #240]	; (80024f4 <I2C_ITError+0x13c>)
 8002402:	d035      	beq.n	8002470 <I2C_ITError+0xb8>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002404:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002406:	f7ff f84f 	bl	80014a8 <HAL_DMA_Abort_IT>
 800240a:	b150      	cbz	r0, 8002422 <I2C_ITError+0x6a>
        __HAL_I2C_DISABLE(hi2c);
 800240c:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800240e:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 8002410:	6813      	ldr	r3, [r2, #0]
 8002412:	f023 0301 	bic.w	r3, r3, #1
 8002416:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8002418:	2320      	movs	r3, #32
 800241a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800241e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002420:	4798      	blx	r3
  CurrentState = hi2c->State;
 8002422:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002426:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002428:	0752      	lsls	r2, r2, #29
  CurrentState = hi2c->State;
 800242a:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800242c:	d512      	bpl.n	8002454 <I2C_ITError+0x9c>
 800242e:	2b28      	cmp	r3, #40	; 0x28
 8002430:	d110      	bne.n	8002454 <I2C_ITError+0x9c>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002432:	6822      	ldr	r2, [r4, #0]
 8002434:	6853      	ldr	r3, [r2, #4]
 8002436:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800243a:	6053      	str	r3, [r2, #4]
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800243c:	4b2e      	ldr	r3, [pc, #184]	; (80024f8 <I2C_ITError+0x140>)
 800243e:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State         = HAL_I2C_STATE_READY;
 8002440:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8002442:	2300      	movs	r3, #0
 8002444:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 8002446:	4620      	mov	r0, r4
    hi2c->State         = HAL_I2C_STATE_READY;
 8002448:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800244c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8002450:	f7ff ff71 	bl	8002336 <HAL_I2C_ListenCpltCallback>
 8002454:	bd10      	pop	{r4, pc}
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002456:	6859      	ldr	r1, [r3, #4]
 8002458:	0509      	lsls	r1, r1, #20
 800245a:	d404      	bmi.n	8002466 <I2C_ITError+0xae>
 800245c:	2a60      	cmp	r2, #96	; 0x60
      hi2c->State = HAL_I2C_STATE_READY;
 800245e:	bf1c      	itt	ne
 8002460:	2220      	movne	r2, #32
 8002462:	f884 203d 	strbne.w	r2, [r4, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 8002466:	2200      	movs	r2, #0
 8002468:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800246a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
 800246e:	e7bb      	b.n	80023e8 <I2C_ITError+0x30>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002470:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002472:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002474:	f7ff f818 	bl	80014a8 <HAL_DMA_Abort_IT>
 8002478:	2800      	cmp	r0, #0
 800247a:	d0d2      	beq.n	8002422 <I2C_ITError+0x6a>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800247c:	6823      	ldr	r3, [r4, #0]
 800247e:	695a      	ldr	r2, [r3, #20]
 8002480:	0652      	lsls	r2, r2, #25
 8002482:	d505      	bpl.n	8002490 <I2C_ITError+0xd8>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002484:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 800248a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800248c:	3301      	adds	r3, #1
 800248e:	6263      	str	r3, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 8002490:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002492:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 8002494:	6813      	ldr	r3, [r2, #0]
 8002496:	f023 0301 	bic.w	r3, r3, #1
 800249a:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 800249c:	2320      	movs	r3, #32
 800249e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 80024a2:	e7bc      	b.n	800241e <I2C_ITError+0x66>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80024a4:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 80024a8:	2960      	cmp	r1, #96	; 0x60
 80024aa:	d115      	bne.n	80024d8 <I2C_ITError+0x120>
    hi2c->State = HAL_I2C_STATE_READY;
 80024ac:	2120      	movs	r1, #32
 80024ae:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024b2:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80024b4:	695a      	ldr	r2, [r3, #20]
 80024b6:	0650      	lsls	r0, r2, #25
 80024b8:	d505      	bpl.n	80024c6 <I2C_ITError+0x10e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024ba:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 80024c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80024c2:	3301      	adds	r3, #1
 80024c4:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 80024c6:	6822      	ldr	r2, [r4, #0]
 80024c8:	6813      	ldr	r3, [r2, #0]
 80024ca:	f023 0301 	bic.w	r3, r3, #1
 80024ce:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 80024d0:	4620      	mov	r0, r4
 80024d2:	f7ff ff34 	bl	800233e <HAL_I2C_AbortCpltCallback>
 80024d6:	e7a4      	b.n	8002422 <I2C_ITError+0x6a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80024d8:	695a      	ldr	r2, [r3, #20]
 80024da:	0651      	lsls	r1, r2, #25
 80024dc:	d505      	bpl.n	80024ea <I2C_ITError+0x132>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024de:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 80024e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80024e6:	3301      	adds	r3, #1
 80024e8:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 80024ea:	4620      	mov	r0, r4
 80024ec:	f7ff ff26 	bl	800233c <HAL_I2C_ErrorCallback>
 80024f0:	e797      	b.n	8002422 <I2C_ITError+0x6a>
 80024f2:	bf00      	nop
 80024f4:	08002341 	.word	0x08002341
 80024f8:	ffff0000 	.word	0xffff0000

080024fc <HAL_I2C_EV_IRQHandler>:
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80024fc:	6803      	ldr	r3, [r0, #0]
{
 80024fe:	b530      	push	{r4, r5, lr}
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002500:	685a      	ldr	r2, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002502:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002504:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
{
 8002508:	4604      	mov	r4, r0
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800250a:	b2c9      	uxtb	r1, r1
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800250c:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002510:	2910      	cmp	r1, #16
{
 8002512:	b08d      	sub	sp, #52	; 0x34
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002514:	b2c0      	uxtb	r0, r0
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002516:	d002      	beq.n	800251e <HAL_I2C_EV_IRQHandler+0x22>
 8002518:	2940      	cmp	r1, #64	; 0x40
 800251a:	f040 82b6 	bne.w	8002a8a <HAL_I2C_EV_IRQHandler+0x58e>
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800251e:	6998      	ldr	r0, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002520:	6959      	ldr	r1, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002522:	f011 0f01 	tst.w	r1, #1
 8002526:	d107      	bne.n	8002538 <HAL_I2C_EV_IRQHandler+0x3c>
 8002528:	f5b5 0f2a 	cmp.w	r5, #11141120	; 0xaa0000
 800252c:	d002      	beq.n	8002534 <HAL_I2C_EV_IRQHandler+0x38>
 800252e:	f1b5 4f2a 	cmp.w	r5, #2852126720	; 0xaa000000
 8002532:	d152      	bne.n	80025da <HAL_I2C_EV_IRQHandler+0xde>
}
 8002534:	b00d      	add	sp, #52	; 0x34
 8002536:	bd30      	pop	{r4, r5, pc}
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002538:	0595      	lsls	r5, r2, #22
 800253a:	d54e      	bpl.n	80025da <HAL_I2C_EV_IRQHandler+0xde>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800253c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800253e:	f5b2 0f2a 	cmp.w	r2, #11141120	; 0xaa0000
 8002542:	d10c      	bne.n	800255e <HAL_I2C_EV_IRQHandler+0x62>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8002544:	2201      	movs	r2, #1
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8002546:	62e2      	str	r2, [r4, #44]	; 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002548:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 800254c:	2a40      	cmp	r2, #64	; 0x40
 800254e:	d111      	bne.n	8002574 <HAL_I2C_EV_IRQHandler+0x78>
    if (hi2c->EventCount == 0U)
 8002550:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002552:	b952      	cbnz	r2, 800256a <HAL_I2C_EV_IRQHandler+0x6e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002554:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002556:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800255a:	611a      	str	r2, [r3, #16]
 800255c:	e7ea      	b.n	8002534 <HAL_I2C_EV_IRQHandler+0x38>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800255e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002560:	f1b2 4f2a 	cmp.w	r2, #2852126720	; 0xaa000000
 8002564:	d1f0      	bne.n	8002548 <HAL_I2C_EV_IRQHandler+0x4c>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8002566:	2208      	movs	r2, #8
 8002568:	e7ed      	b.n	8002546 <HAL_I2C_EV_IRQHandler+0x4a>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800256a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800256c:	f042 0201 	orr.w	r2, r2, #1
 8002570:	b2d2      	uxtb	r2, r2
 8002572:	e7f2      	b.n	800255a <HAL_I2C_EV_IRQHandler+0x5e>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002574:	6922      	ldr	r2, [r4, #16]
 8002576:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800257a:	d11b      	bne.n	80025b4 <HAL_I2C_EV_IRQHandler+0xb8>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800257c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8002580:	2a21      	cmp	r2, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002582:	6c62      	ldr	r2, [r4, #68]	; 0x44
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002584:	d112      	bne.n	80025ac <HAL_I2C_EV_IRQHandler+0xb0>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002586:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800258a:	611a      	str	r2, [r3, #16]
      if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 800258c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800258e:	b912      	cbnz	r2, 8002596 <HAL_I2C_EV_IRQHandler+0x9a>
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8002590:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002592:	2900      	cmp	r1, #0
 8002594:	d0ce      	beq.n	8002534 <HAL_I2C_EV_IRQHandler+0x38>
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8002596:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002598:	b91a      	cbnz	r2, 80025a2 <HAL_I2C_EV_IRQHandler+0xa6>
 800259a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800259c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800259e:	2a00      	cmp	r2, #0
 80025a0:	d0c8      	beq.n	8002534 <HAL_I2C_EV_IRQHandler+0x38>
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80025a8:	605a      	str	r2, [r3, #4]
 80025aa:	e7c3      	b.n	8002534 <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80025ac:	f042 0201 	orr.w	r2, r2, #1
 80025b0:	b2d2      	uxtb	r2, r2
 80025b2:	e7ea      	b.n	800258a <HAL_I2C_EV_IRQHandler+0x8e>
      if (hi2c->EventCount == 0U)
 80025b4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80025b6:	b932      	cbnz	r2, 80025c6 <HAL_I2C_EV_IRQHandler+0xca>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80025b8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80025ba:	11d2      	asrs	r2, r2, #7
 80025bc:	f002 0206 	and.w	r2, r2, #6
 80025c0:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 80025c4:	e7c9      	b.n	800255a <HAL_I2C_EV_IRQHandler+0x5e>
      else if (hi2c->EventCount == 1U)
 80025c6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80025c8:	2a01      	cmp	r2, #1
 80025ca:	d1b3      	bne.n	8002534 <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80025cc:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80025ce:	11d2      	asrs	r2, r2, #7
 80025d0:	f002 0206 	and.w	r2, r2, #6
 80025d4:	f042 02f1 	orr.w	r2, r2, #241	; 0xf1
 80025d8:	e7bf      	b.n	800255a <HAL_I2C_EV_IRQHandler+0x5e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025da:	070d      	lsls	r5, r1, #28
 80025dc:	d503      	bpl.n	80025e6 <HAL_I2C_EV_IRQHandler+0xea>
 80025de:	0595      	lsls	r5, r2, #22
 80025e0:	d501      	bpl.n	80025e6 <HAL_I2C_EV_IRQHandler+0xea>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80025e2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80025e4:	e7e4      	b.n	80025b0 <HAL_I2C_EV_IRQHandler+0xb4>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025e6:	078d      	lsls	r5, r1, #30
 80025e8:	f140 80e1 	bpl.w	80027ae <HAL_I2C_EV_IRQHandler+0x2b2>
 80025ec:	0595      	lsls	r5, r2, #22
 80025ee:	f140 80de 	bpl.w	80027ae <HAL_I2C_EV_IRQHandler+0x2b2>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80025f2:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80025f6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 80025f8:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80025fa:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 80025fe:	2822      	cmp	r0, #34	; 0x22
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002600:	b2c9      	uxtb	r1, r1
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002602:	f040 80cc 	bne.w	800279e <HAL_I2C_EV_IRQHandler+0x2a2>
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002606:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002608:	b940      	cbnz	r0, 800261c <HAL_I2C_EV_IRQHandler+0x120>
 800260a:	2940      	cmp	r1, #64	; 0x40
 800260c:	d106      	bne.n	800261c <HAL_I2C_EV_IRQHandler+0x120>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800260e:	9001      	str	r0, [sp, #4]
 8002610:	695a      	ldr	r2, [r3, #20]
 8002612:	9201      	str	r2, [sp, #4]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	9301      	str	r3, [sp, #4]
 8002618:	9b01      	ldr	r3, [sp, #4]
 800261a:	e78b      	b.n	8002534 <HAL_I2C_EV_IRQHandler+0x38>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800261c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800261e:	b981      	cbnz	r1, 8002642 <HAL_I2C_EV_IRQHandler+0x146>
 8002620:	6920      	ldr	r0, [r4, #16]
 8002622:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 8002626:	d10c      	bne.n	8002642 <HAL_I2C_EV_IRQHandler+0x146>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002628:	9102      	str	r1, [sp, #8]
 800262a:	695a      	ldr	r2, [r3, #20]
 800262c:	9202      	str	r2, [sp, #8]
 800262e:	699a      	ldr	r2, [r3, #24]
 8002630:	9202      	str	r2, [sp, #8]
 8002632:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800263a:	601a      	str	r2, [r3, #0]
            hi2c->EventCount++;
 800263c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800263e:	3301      	adds	r3, #1
 8002640:	e028      	b.n	8002694 <HAL_I2C_EV_IRQHandler+0x198>
      if (hi2c->XferCount == 0U)
 8002642:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8002644:	b289      	uxth	r1, r1
 8002646:	b951      	cbnz	r1, 800265e <HAL_I2C_EV_IRQHandler+0x162>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002648:	9103      	str	r1, [sp, #12]
 800264a:	695a      	ldr	r2, [r3, #20]
 800264c:	9203      	str	r2, [sp, #12]
 800264e:	699a      	ldr	r2, [r3, #24]
 8002650:	9203      	str	r2, [sp, #12]
 8002652:	9a03      	ldr	r2, [sp, #12]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	e019      	b.n	8002692 <HAL_I2C_EV_IRQHandler+0x196>
      else if (hi2c->XferCount == 1U)
 800265e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8002660:	b289      	uxth	r1, r1
 8002662:	2901      	cmp	r1, #1
 8002664:	d14a      	bne.n	80026fc <HAL_I2C_EV_IRQHandler+0x200>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002666:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 800266a:	d11c      	bne.n	80026a6 <HAL_I2C_EV_IRQHandler+0x1aa>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002672:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002674:	685a      	ldr	r2, [r3, #4]
 8002676:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 800267a:	d00d      	beq.n	8002698 <HAL_I2C_EV_IRQHandler+0x19c>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002682:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002684:	2200      	movs	r2, #0
 8002686:	9204      	str	r2, [sp, #16]
 8002688:	695a      	ldr	r2, [r3, #20]
 800268a:	9204      	str	r2, [sp, #16]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	9304      	str	r3, [sp, #16]
 8002690:	9b04      	ldr	r3, [sp, #16]
      hi2c->EventCount = 0U;
 8002692:	2300      	movs	r3, #0
 8002694:	6523      	str	r3, [r4, #80]	; 0x50
 8002696:	e74d      	b.n	8002534 <HAL_I2C_EV_IRQHandler+0x38>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002698:	9205      	str	r2, [sp, #20]
 800269a:	695a      	ldr	r2, [r3, #20]
 800269c:	9205      	str	r2, [sp, #20]
 800269e:	699a      	ldr	r2, [r3, #24]
 80026a0:	9205      	str	r2, [sp, #20]
 80026a2:	9a05      	ldr	r2, [sp, #20]
 80026a4:	e7d6      	b.n	8002654 <HAL_I2C_EV_IRQHandler+0x158>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80026a6:	2a08      	cmp	r2, #8
 80026a8:	d01c      	beq.n	80026e4 <HAL_I2C_EV_IRQHandler+0x1e8>
 80026aa:	2a20      	cmp	r2, #32
 80026ac:	d01a      	beq.n	80026e4 <HAL_I2C_EV_IRQHandler+0x1e8>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80026ae:	2d12      	cmp	r5, #18
 80026b0:	d10d      	bne.n	80026ce <HAL_I2C_EV_IRQHandler+0x1d2>
 80026b2:	2a01      	cmp	r2, #1
 80026b4:	d116      	bne.n	80026e4 <HAL_I2C_EV_IRQHandler+0x1e8>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026bc:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026be:	2200      	movs	r2, #0
 80026c0:	9206      	str	r2, [sp, #24]
 80026c2:	695a      	ldr	r2, [r3, #20]
 80026c4:	9206      	str	r2, [sp, #24]
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	9306      	str	r3, [sp, #24]
 80026ca:	9b06      	ldr	r3, [sp, #24]
 80026cc:	e7e1      	b.n	8002692 <HAL_I2C_EV_IRQHandler+0x196>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80026ce:	2a10      	cmp	r2, #16
 80026d0:	d8f1      	bhi.n	80026b6 <HAL_I2C_EV_IRQHandler+0x1ba>
 80026d2:	498e      	ldr	r1, [pc, #568]	; (800290c <HAL_I2C_EV_IRQHandler+0x410>)
 80026d4:	fa21 f202 	lsr.w	r2, r1, r2
 80026d8:	07d0      	lsls	r0, r2, #31
 80026da:	d5ec      	bpl.n	80026b6 <HAL_I2C_EV_IRQHandler+0x1ba>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026e2:	e7eb      	b.n	80026bc <HAL_I2C_EV_IRQHandler+0x1c0>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026ea:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026ec:	2200      	movs	r2, #0
 80026ee:	9207      	str	r2, [sp, #28]
 80026f0:	695a      	ldr	r2, [r3, #20]
 80026f2:	9207      	str	r2, [sp, #28]
 80026f4:	699a      	ldr	r2, [r3, #24]
 80026f6:	9207      	str	r2, [sp, #28]
 80026f8:	9a07      	ldr	r2, [sp, #28]
 80026fa:	e7ab      	b.n	8002654 <HAL_I2C_EV_IRQHandler+0x158>
      else if (hi2c->XferCount == 2U)
 80026fc:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 80026fe:	b289      	uxth	r1, r1
 8002700:	2902      	cmp	r1, #2
 8002702:	d12c      	bne.n	800275e <HAL_I2C_EV_IRQHandler+0x262>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002704:	2a10      	cmp	r2, #16
 8002706:	d803      	bhi.n	8002710 <HAL_I2C_EV_IRQHandler+0x214>
 8002708:	4980      	ldr	r1, [pc, #512]	; (800290c <HAL_I2C_EV_IRQHandler+0x410>)
 800270a:	40d1      	lsrs	r1, r2
 800270c:	07c9      	lsls	r1, r1, #31
 800270e:	d422      	bmi.n	8002756 <HAL_I2C_EV_IRQHandler+0x25a>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002710:	6819      	ldr	r1, [r3, #0]
 8002712:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002716:	6019      	str	r1, [r3, #0]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002718:	6819      	ldr	r1, [r3, #0]
 800271a:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800271e:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002720:	6859      	ldr	r1, [r3, #4]
 8002722:	050d      	lsls	r5, r1, #20
 8002724:	d50f      	bpl.n	8002746 <HAL_I2C_EV_IRQHandler+0x24a>
 8002726:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 800272a:	d008      	beq.n	800273e <HAL_I2C_EV_IRQHandler+0x242>
 800272c:	1e51      	subs	r1, r2, #1
 800272e:	291f      	cmp	r1, #31
 8002730:	bf9d      	ittte	ls
 8002732:	4a77      	ldrls	r2, [pc, #476]	; (8002910 <HAL_I2C_EV_IRQHandler+0x414>)
 8002734:	40ca      	lsrls	r2, r1
 8002736:	43d2      	mvnls	r2, r2
 8002738:	2201      	movhi	r2, #1
 800273a:	07d0      	lsls	r0, r2, #31
 800273c:	d403      	bmi.n	8002746 <HAL_I2C_EV_IRQHandler+0x24a>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800273e:	685a      	ldr	r2, [r3, #4]
 8002740:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002744:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002746:	2200      	movs	r2, #0
 8002748:	9208      	str	r2, [sp, #32]
 800274a:	695a      	ldr	r2, [r3, #20]
 800274c:	9208      	str	r2, [sp, #32]
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	9308      	str	r3, [sp, #32]
 8002752:	9b08      	ldr	r3, [sp, #32]
 8002754:	e79d      	b.n	8002692 <HAL_I2C_EV_IRQHandler+0x196>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002756:	6819      	ldr	r1, [r3, #0]
 8002758:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 800275c:	e7df      	b.n	800271e <HAL_I2C_EV_IRQHandler+0x222>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800275e:	6819      	ldr	r1, [r3, #0]
 8002760:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8002764:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002766:	6859      	ldr	r1, [r3, #4]
 8002768:	0509      	lsls	r1, r1, #20
 800276a:	d510      	bpl.n	800278e <HAL_I2C_EV_IRQHandler+0x292>
 800276c:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8002770:	d009      	beq.n	8002786 <HAL_I2C_EV_IRQHandler+0x28a>
 8002772:	3a01      	subs	r2, #1
 8002774:	2a1f      	cmp	r2, #31
 8002776:	bf9d      	ittte	ls
 8002778:	4965      	ldrls	r1, [pc, #404]	; (8002910 <HAL_I2C_EV_IRQHandler+0x414>)
 800277a:	fa21 f202 	lsrls.w	r2, r1, r2
 800277e:	43d2      	mvnls	r2, r2
 8002780:	2201      	movhi	r2, #1
 8002782:	07d2      	lsls	r2, r2, #31
 8002784:	d403      	bmi.n	800278e <HAL_I2C_EV_IRQHandler+0x292>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800278c:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800278e:	2200      	movs	r2, #0
 8002790:	9209      	str	r2, [sp, #36]	; 0x24
 8002792:	695a      	ldr	r2, [r3, #20]
 8002794:	9209      	str	r2, [sp, #36]	; 0x24
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	9309      	str	r3, [sp, #36]	; 0x24
 800279a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800279c:	e779      	b.n	8002692 <HAL_I2C_EV_IRQHandler+0x196>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800279e:	2200      	movs	r2, #0
 80027a0:	920a      	str	r2, [sp, #40]	; 0x28
 80027a2:	695a      	ldr	r2, [r3, #20]
 80027a4:	920a      	str	r2, [sp, #40]	; 0x28
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	930a      	str	r3, [sp, #40]	; 0x28
 80027aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80027ac:	e6c2      	b.n	8002534 <HAL_I2C_EV_IRQHandler+0x38>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80027ae:	f010 0f04 	tst.w	r0, #4
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80027b2:	6858      	ldr	r0, [r3, #4]
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80027b4:	f000 80ae 	beq.w	8002914 <HAL_I2C_EV_IRQHandler+0x418>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80027b8:	0505      	lsls	r5, r0, #20
 80027ba:	f53f aebb 	bmi.w	8002534 <HAL_I2C_EV_IRQHandler+0x38>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80027be:	f011 0f80 	tst.w	r1, #128	; 0x80
 80027c2:	f001 0104 	and.w	r1, r1, #4
 80027c6:	d069      	beq.n	800289c <HAL_I2C_EV_IRQHandler+0x3a0>
 80027c8:	0550      	lsls	r0, r2, #21
 80027ca:	d567      	bpl.n	800289c <HAL_I2C_EV_IRQHandler+0x3a0>
 80027cc:	2900      	cmp	r1, #0
 80027ce:	d165      	bne.n	800289c <HAL_I2C_EV_IRQHandler+0x3a0>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80027d0:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80027d4:	8d25      	ldrh	r5, [r4, #40]	; 0x28
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80027d6:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80027da:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80027dc:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80027de:	b2c9      	uxtb	r1, r1
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80027e0:	b9c5      	cbnz	r5, 8002814 <HAL_I2C_EV_IRQHandler+0x318>
 80027e2:	2a21      	cmp	r2, #33	; 0x21
 80027e4:	d118      	bne.n	8002818 <HAL_I2C_EV_IRQHandler+0x31c>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80027e6:	2808      	cmp	r0, #8
 80027e8:	d078      	beq.n	80028dc <HAL_I2C_EV_IRQHandler+0x3e0>
 80027ea:	2820      	cmp	r0, #32
 80027ec:	d076      	beq.n	80028dc <HAL_I2C_EV_IRQHandler+0x3e0>
 80027ee:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 80027f2:	d073      	beq.n	80028dc <HAL_I2C_EV_IRQHandler+0x3e0>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80027f4:	685a      	ldr	r2, [r3, #4]
 80027f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80027fa:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80027fc:	2311      	movs	r3, #17
 80027fe:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002800:	2300      	movs	r3, #0
 8002802:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002806:	2320      	movs	r3, #32
 8002808:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800280c:	4620      	mov	r0, r4
 800280e:	f7ff fd8d 	bl	800232c <HAL_I2C_MasterTxCpltCallback>
 8002812:	e68f      	b.n	8002534 <HAL_I2C_EV_IRQHandler+0x38>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002814:	2a21      	cmp	r2, #33	; 0x21
 8002816:	d005      	beq.n	8002824 <HAL_I2C_EV_IRQHandler+0x328>
 8002818:	2940      	cmp	r1, #64	; 0x40
 800281a:	f47f ae8b 	bne.w	8002534 <HAL_I2C_EV_IRQHandler+0x38>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800281e:	2a22      	cmp	r2, #34	; 0x22
 8002820:	f47f ae88 	bne.w	8002534 <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->XferCount == 0U)
 8002824:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002826:	b292      	uxth	r2, r2
 8002828:	b91a      	cbnz	r2, 8002832 <HAL_I2C_EV_IRQHandler+0x336>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002830:	e6ba      	b.n	80025a8 <HAL_I2C_EV_IRQHandler+0xac>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002832:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8002836:	2a40      	cmp	r2, #64	; 0x40
 8002838:	d126      	bne.n	8002888 <HAL_I2C_EV_IRQHandler+0x38c>
        if (hi2c->EventCount == 0U)
 800283a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800283c:	b962      	cbnz	r2, 8002858 <HAL_I2C_EV_IRQHandler+0x35c>
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800283e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8002840:	2a01      	cmp	r2, #1
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002842:	6ca2      	ldr	r2, [r4, #72]	; 0x48
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002844:	d104      	bne.n	8002850 <HAL_I2C_EV_IRQHandler+0x354>
 8002846:	b2d2      	uxtb	r2, r2
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002848:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2U;
 800284a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800284c:	3302      	adds	r3, #2
 800284e:	e721      	b.n	8002694 <HAL_I2C_EV_IRQHandler+0x198>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002850:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002854:	611a      	str	r2, [r3, #16]
 8002856:	e6f1      	b.n	800263c <HAL_I2C_EV_IRQHandler+0x140>
        else if (hi2c->EventCount == 1U)
 8002858:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800285a:	2a01      	cmp	r2, #1
 800285c:	d102      	bne.n	8002864 <HAL_I2C_EV_IRQHandler+0x368>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800285e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002860:	b2d2      	uxtb	r2, r2
 8002862:	e7f7      	b.n	8002854 <HAL_I2C_EV_IRQHandler+0x358>
        else if (hi2c->EventCount == 2U)
 8002864:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002866:	2a02      	cmp	r2, #2
 8002868:	f47f ae64 	bne.w	8002534 <HAL_I2C_EV_IRQHandler+0x38>
          if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800286c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8002870:	2a22      	cmp	r2, #34	; 0x22
 8002872:	d104      	bne.n	800287e <HAL_I2C_EV_IRQHandler+0x382>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800287a:	601a      	str	r2, [r3, #0]
 800287c:	e65a      	b.n	8002534 <HAL_I2C_EV_IRQHandler+0x38>
          else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800287e:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8002882:	2a21      	cmp	r2, #33	; 0x21
 8002884:	f47f ae56 	bne.w	8002534 <HAL_I2C_EV_IRQHandler+0x38>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002888:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800288a:	f812 1b01 	ldrb.w	r1, [r2], #1
 800288e:	6119      	str	r1, [r3, #16]
    hi2c->pBuffPtr++;
 8002890:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8002892:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002894:	3b01      	subs	r3, #1
 8002896:	b29b      	uxth	r3, r3
 8002898:	8563      	strh	r3, [r4, #42]	; 0x2a
 800289a:	e64b      	b.n	8002534 <HAL_I2C_EV_IRQHandler+0x38>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800289c:	2900      	cmp	r1, #0
 800289e:	f43f ae49 	beq.w	8002534 <HAL_I2C_EV_IRQHandler+0x38>
 80028a2:	0592      	lsls	r2, r2, #22
 80028a4:	f57f ae46 	bpl.w	8002534 <HAL_I2C_EV_IRQHandler+0x38>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80028a8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80028aa:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80028ae:	2a21      	cmp	r2, #33	; 0x21
 80028b0:	f47f ae40 	bne.w	8002534 <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->XferCount != 0U)
 80028b4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80028b6:	b292      	uxth	r2, r2
 80028b8:	2a00      	cmp	r2, #0
 80028ba:	d1e5      	bne.n	8002888 <HAL_I2C_EV_IRQHandler+0x38c>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80028bc:	2908      	cmp	r1, #8
 80028be:	d00d      	beq.n	80028dc <HAL_I2C_EV_IRQHandler+0x3e0>
 80028c0:	2920      	cmp	r1, #32
 80028c2:	d00b      	beq.n	80028dc <HAL_I2C_EV_IRQHandler+0x3e0>
 80028c4:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 80028c8:	d008      	beq.n	80028dc <HAL_I2C_EV_IRQHandler+0x3e0>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028ca:	6859      	ldr	r1, [r3, #4]
 80028cc:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 80028d0:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80028d2:	2311      	movs	r3, #17
 80028d4:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028d6:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
 80028da:	e794      	b.n	8002806 <HAL_I2C_EV_IRQHandler+0x30a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028dc:	685a      	ldr	r2, [r3, #4]
 80028de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80028e2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028ea:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80028ec:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 80028ee:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80028f0:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80028f2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80028f6:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80028fa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80028fe:	2a40      	cmp	r2, #64	; 0x40
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002900:	4620      	mov	r0, r4
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002902:	d184      	bne.n	800280e <HAL_I2C_EV_IRQHandler+0x312>
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002904:	f7ff fd18 	bl	8002338 <HAL_I2C_MemTxCpltCallback>
 8002908:	e614      	b.n	8002534 <HAL_I2C_EV_IRQHandler+0x38>
 800290a:	bf00      	nop
 800290c:	00010014 	.word	0x00010014
 8002910:	80008081 	.word	0x80008081
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002914:	0505      	lsls	r5, r0, #20
 8002916:	f53f ae0d 	bmi.w	8002534 <HAL_I2C_EV_IRQHandler+0x38>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800291a:	f011 0f40 	tst.w	r1, #64	; 0x40
 800291e:	f001 0104 	and.w	r1, r1, #4
 8002922:	d048      	beq.n	80029b6 <HAL_I2C_EV_IRQHandler+0x4ba>
 8002924:	0550      	lsls	r0, r2, #21
 8002926:	d546      	bpl.n	80029b6 <HAL_I2C_EV_IRQHandler+0x4ba>
 8002928:	2900      	cmp	r1, #0
 800292a:	d144      	bne.n	80029b6 <HAL_I2C_EV_IRQHandler+0x4ba>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800292c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8002930:	2a22      	cmp	r2, #34	; 0x22
 8002932:	f47f adff 	bne.w	8002534 <HAL_I2C_EV_IRQHandler+0x38>
    tmp = hi2c->XferCount;
 8002936:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002938:	b292      	uxth	r2, r2
    if (tmp > 3U)
 800293a:	2a03      	cmp	r2, #3
 800293c:	d914      	bls.n	8002968 <HAL_I2C_EV_IRQHandler+0x46c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800293e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8002944:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002946:	3301      	adds	r3, #1
 8002948:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800294a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800294c:	3b01      	subs	r3, #1
 800294e:	b29b      	uxth	r3, r3
 8002950:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 8002952:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002954:	b29b      	uxth	r3, r3
 8002956:	2b03      	cmp	r3, #3
 8002958:	f47f adec 	bne.w	8002534 <HAL_I2C_EV_IRQHandler+0x38>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800295c:	6822      	ldr	r2, [r4, #0]
 800295e:	6853      	ldr	r3, [r2, #4]
 8002960:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002964:	6053      	str	r3, [r2, #4]
 8002966:	e5e5      	b.n	8002534 <HAL_I2C_EV_IRQHandler+0x38>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002968:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800296a:	2802      	cmp	r0, #2
 800296c:	f43f ade2 	beq.w	8002534 <HAL_I2C_EV_IRQHandler+0x38>
 8002970:	2a01      	cmp	r2, #1
 8002972:	f63f addf 	bhi.w	8002534 <HAL_I2C_EV_IRQHandler+0x38>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800297c:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800297e:	685a      	ldr	r2, [r3, #4]
 8002980:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002984:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002986:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 800298c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800298e:	3301      	adds	r3, #1
 8002990:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002992:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002994:	3b01      	subs	r3, #1
 8002996:	b29b      	uxth	r3, r3
 8002998:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 800299a:	2320      	movs	r3, #32
 800299c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80029a0:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029a4:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80029a8:	2b40      	cmp	r3, #64	; 0x40
 80029aa:	d168      	bne.n	8002a7e <HAL_I2C_EV_IRQHandler+0x582>
        hi2c->PreviousState = I2C_STATE_NONE;
 80029ac:	6321      	str	r1, [r4, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80029ae:	4620      	mov	r0, r4
 80029b0:	f7ff fcc3 	bl	800233a <HAL_I2C_MemRxCpltCallback>
 80029b4:	e5be      	b.n	8002534 <HAL_I2C_EV_IRQHandler+0x38>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029b6:	2900      	cmp	r1, #0
 80029b8:	f43f adbc 	beq.w	8002534 <HAL_I2C_EV_IRQHandler+0x38>
 80029bc:	0592      	lsls	r2, r2, #22
 80029be:	f57f adb9 	bpl.w	8002534 <HAL_I2C_EV_IRQHandler+0x38>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80029c2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 80029c4:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 80029c6:	b289      	uxth	r1, r1
 80029c8:	2904      	cmp	r1, #4
 80029ca:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80029cc:	d109      	bne.n	80029e2 <HAL_I2C_EV_IRQHandler+0x4e6>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80029ce:	685a      	ldr	r2, [r3, #4]
 80029d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029d4:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 80029da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80029dc:	3301      	adds	r3, #1
 80029de:	6263      	str	r3, [r4, #36]	; 0x24
 80029e0:	e757      	b.n	8002892 <HAL_I2C_EV_IRQHandler+0x396>
  else if (hi2c->XferCount == 3U)
 80029e2:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 80029e4:	b280      	uxth	r0, r0
 80029e6:	2803      	cmp	r0, #3
 80029e8:	d10c      	bne.n	8002a04 <HAL_I2C_EV_IRQHandler+0x508>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80029ea:	6858      	ldr	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80029ec:	2a04      	cmp	r2, #4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80029ee:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 80029f2:	6058      	str	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80029f4:	d0ef      	beq.n	80029d6 <HAL_I2C_EV_IRQHandler+0x4da>
 80029f6:	2a02      	cmp	r2, #2
 80029f8:	d0ed      	beq.n	80029d6 <HAL_I2C_EV_IRQHandler+0x4da>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a00:	601a      	str	r2, [r3, #0]
 8002a02:	e7e8      	b.n	80029d6 <HAL_I2C_EV_IRQHandler+0x4da>
  else if (hi2c->XferCount == 2U)
 8002a04:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8002a06:	b280      	uxth	r0, r0
 8002a08:	2802      	cmp	r0, #2
 8002a0a:	d1e4      	bne.n	80029d6 <HAL_I2C_EV_IRQHandler+0x4da>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002a0c:	2a01      	cmp	r2, #1
 8002a0e:	d001      	beq.n	8002a14 <HAL_I2C_EV_IRQHandler+0x518>
 8002a10:	2a10      	cmp	r2, #16
 8002a12:	d128      	bne.n	8002a66 <HAL_I2C_EV_IRQHandler+0x56a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a1a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 8002a20:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002a22:	1c53      	adds	r3, r2, #1
 8002a24:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8002a26:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	8563      	strh	r3, [r4, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a2e:	6823      	ldr	r3, [r4, #0]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	7053      	strb	r3, [r2, #1]
    hi2c->pBuffPtr++;
 8002a34:	6a63      	ldr	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002a36:	6822      	ldr	r2, [r4, #0]
    hi2c->pBuffPtr++;
 8002a38:	3301      	adds	r3, #1
 8002a3a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8002a3c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	8563      	strh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002a44:	6853      	ldr	r3, [r2, #4]
 8002a46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a4a:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002a4c:	2320      	movs	r3, #32
 8002a4e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a52:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8002a56:	2b40      	cmp	r3, #64	; 0x40
 8002a58:	f04f 0300 	mov.w	r3, #0
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a5c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a60:	d10d      	bne.n	8002a7e <HAL_I2C_EV_IRQHandler+0x582>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002a62:	6323      	str	r3, [r4, #48]	; 0x30
 8002a64:	e7a3      	b.n	80029ae <HAL_I2C_EV_IRQHandler+0x4b2>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002a66:	2a04      	cmp	r2, #4
 8002a68:	d001      	beq.n	8002a6e <HAL_I2C_EV_IRQHandler+0x572>
 8002a6a:	2a02      	cmp	r2, #2
 8002a6c:	d103      	bne.n	8002a76 <HAL_I2C_EV_IRQHandler+0x57a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a74:	e7d1      	b.n	8002a1a <HAL_I2C_EV_IRQHandler+0x51e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a7c:	e7cd      	b.n	8002a1a <HAL_I2C_EV_IRQHandler+0x51e>
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002a7e:	2312      	movs	r3, #18
 8002a80:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002a82:	4620      	mov	r0, r4
 8002a84:	f7ff fc53 	bl	800232e <HAL_I2C_MasterRxCpltCallback>
 8002a88:	e554      	b.n	8002534 <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002a8a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002a8c:	b321      	cbz	r1, 8002ad8 <HAL_I2C_EV_IRQHandler+0x5dc>
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002a8e:	6959      	ldr	r1, [r3, #20]
  uint32_t sr2itflags               = 0U;
 8002a90:	2500      	movs	r5, #0
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a92:	f011 0f02 	tst.w	r1, #2
 8002a96:	d029      	beq.n	8002aec <HAL_I2C_EV_IRQHandler+0x5f0>
 8002a98:	f412 7f00 	tst.w	r2, #512	; 0x200
 8002a9c:	d026      	beq.n	8002aec <HAL_I2C_EV_IRQHandler+0x5f0>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002a9e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002aa0:	b102      	cbz	r2, 8002aa4 <HAL_I2C_EV_IRQHandler+0x5a8>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002aa2:	699d      	ldr	r5, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002aa4:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8002aa8:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8002aac:	2a28      	cmp	r2, #40	; 0x28
 8002aae:	d116      	bne.n	8002ade <HAL_I2C_EV_IRQHandler+0x5e2>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002ab0:	685a      	ldr	r2, [r3, #4]
 8002ab2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ab6:	605a      	str	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002ab8:	f085 0104 	eor.w	r1, r5, #4
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002abc:	062b      	lsls	r3, r5, #24
    __HAL_UNLOCK(hi2c);
 8002abe:	f04f 0300 	mov.w	r3, #0
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002ac2:	f3c1 0180 	ubfx	r1, r1, #2, #1
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002ac6:	bf54      	ite	pl
 8002ac8:	89a2      	ldrhpl	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002aca:	8b22      	ldrhmi	r2, [r4, #24]
    __HAL_UNLOCK(hi2c);
 8002acc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002ad0:	4620      	mov	r0, r4
 8002ad2:	f7ff fc2f 	bl	8002334 <HAL_I2C_AddrCallback>
 8002ad6:	e52d      	b.n	8002534 <HAL_I2C_EV_IRQHandler+0x38>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002ad8:	699d      	ldr	r5, [r3, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002ada:	6959      	ldr	r1, [r3, #20]
 8002adc:	e7d9      	b.n	8002a92 <HAL_I2C_EV_IRQHandler+0x596>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ade:	f06f 0202 	mvn.w	r2, #2
 8002ae2:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8002aea:	e523      	b.n	8002534 <HAL_I2C_EV_IRQHandler+0x38>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002aec:	06cd      	lsls	r5, r1, #27
 8002aee:	f140 80af 	bpl.w	8002c50 <HAL_I2C_EV_IRQHandler+0x754>
 8002af2:	0595      	lsls	r5, r2, #22
 8002af4:	f140 80ac 	bpl.w	8002c50 <HAL_I2C_EV_IRQHandler+0x754>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002af8:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002b02:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002b04:	2200      	movs	r2, #0
 8002b06:	920b      	str	r2, [sp, #44]	; 0x2c
 8002b08:	695a      	ldr	r2, [r3, #20]
 8002b0a:	920b      	str	r2, [sp, #44]	; 0x2c
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	f042 0201 	orr.w	r2, r2, #1
 8002b12:	601a      	str	r2, [r3, #0]
 8002b14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b1c:	601a      	str	r2, [r3, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002b1e:	685a      	ldr	r2, [r3, #4]
 8002b20:	0511      	lsls	r1, r2, #20
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b22:	b2ed      	uxtb	r5, r5
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002b24:	d520      	bpl.n	8002b68 <HAL_I2C_EV_IRQHandler+0x66c>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002b26:	f005 02f7 	and.w	r2, r5, #247	; 0xf7
 8002b2a:	2a22      	cmp	r2, #34	; 0x22
 8002b2c:	d148      	bne.n	8002bc0 <HAL_I2C_EV_IRQHandler+0x6c4>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002b2e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002b30:	6802      	ldr	r2, [r0, #0]
 8002b32:	6852      	ldr	r2, [r2, #4]
 8002b34:	b292      	uxth	r2, r2
 8002b36:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8002b38:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002b3a:	b292      	uxth	r2, r2
 8002b3c:	b11a      	cbz	r2, 8002b46 <HAL_I2C_EV_IRQHandler+0x64a>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b3e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002b40:	f042 0204 	orr.w	r2, r2, #4
 8002b44:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b4c:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002b4e:	f7fe fd77 	bl	8001640 <HAL_DMA_GetState>
 8002b52:	2801      	cmp	r0, #1
 8002b54:	d008      	beq.n	8002b68 <HAL_I2C_EV_IRQHandler+0x66c>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002b56:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002b58:	4b78      	ldr	r3, [pc, #480]	; (8002d3c <HAL_I2C_EV_IRQHandler+0x840>)
 8002b5a:	6503      	str	r3, [r0, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002b5c:	f7fe fca4 	bl	80014a8 <HAL_DMA_Abort_IT>
 8002b60:	b110      	cbz	r0, 8002b68 <HAL_I2C_EV_IRQHandler+0x66c>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002b62:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002b64:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002b66:	4798      	blx	r3
  if (hi2c->XferCount != 0U)
 8002b68:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	b313      	cbz	r3, 8002bb4 <HAL_I2C_EV_IRQHandler+0x6b8>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b6e:	6823      	ldr	r3, [r4, #0]
 8002b70:	695a      	ldr	r2, [r3, #20]
 8002b72:	0752      	lsls	r2, r2, #29
 8002b74:	d509      	bpl.n	8002b8a <HAL_I2C_EV_IRQHandler+0x68e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b76:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8002b7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b7e:	3301      	adds	r3, #1
 8002b80:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002b82:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002b84:	3b01      	subs	r3, #1
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002b8a:	6823      	ldr	r3, [r4, #0]
 8002b8c:	695a      	ldr	r2, [r3, #20]
 8002b8e:	0650      	lsls	r0, r2, #25
 8002b90:	d509      	bpl.n	8002ba6 <HAL_I2C_EV_IRQHandler+0x6aa>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b92:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8002b98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002b9e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 8002ba6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	b11b      	cbz	r3, 8002bb4 <HAL_I2C_EV_IRQHandler+0x6b8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002bac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002bae:	f043 0304 	orr.w	r3, r3, #4
 8002bb2:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002bb4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002bb6:	b303      	cbz	r3, 8002bfa <HAL_I2C_EV_IRQHandler+0x6fe>
    I2C_ITError(hi2c);
 8002bb8:	4620      	mov	r0, r4
 8002bba:	f7ff fbfd 	bl	80023b8 <I2C_ITError>
 8002bbe:	e4b9      	b.n	8002534 <HAL_I2C_EV_IRQHandler+0x38>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002bc0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002bc2:	6802      	ldr	r2, [r0, #0]
 8002bc4:	6852      	ldr	r2, [r2, #4]
 8002bc6:	b292      	uxth	r2, r2
 8002bc8:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8002bca:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002bcc:	b292      	uxth	r2, r2
 8002bce:	b11a      	cbz	r2, 8002bd8 <HAL_I2C_EV_IRQHandler+0x6dc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002bd0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002bd2:	f042 0204 	orr.w	r2, r2, #4
 8002bd6:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002bd8:	685a      	ldr	r2, [r3, #4]
 8002bda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bde:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002be0:	f7fe fd2e 	bl	8001640 <HAL_DMA_GetState>
 8002be4:	2801      	cmp	r0, #1
 8002be6:	d0bf      	beq.n	8002b68 <HAL_I2C_EV_IRQHandler+0x66c>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002be8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002bea:	4b54      	ldr	r3, [pc, #336]	; (8002d3c <HAL_I2C_EV_IRQHandler+0x840>)
 8002bec:	6503      	str	r3, [r0, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002bee:	f7fe fc5b 	bl	80014a8 <HAL_DMA_Abort_IT>
 8002bf2:	2800      	cmp	r0, #0
 8002bf4:	d0b8      	beq.n	8002b68 <HAL_I2C_EV_IRQHandler+0x66c>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002bf6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002bf8:	e7b4      	b.n	8002b64 <HAL_I2C_EV_IRQHandler+0x668>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002bfa:	2d2a      	cmp	r5, #42	; 0x2a
 8002bfc:	d106      	bne.n	8002c0c <HAL_I2C_EV_IRQHandler+0x710>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002bfe:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002c00:	2328      	movs	r3, #40	; 0x28
 8002c02:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002c06:	4620      	mov	r0, r4
 8002c08:	f7ff fb93 	bl	8002332 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002c0c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002c10:	2b28      	cmp	r3, #40	; 0x28
 8002c12:	d10c      	bne.n	8002c2e <HAL_I2C_EV_IRQHandler+0x732>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c14:	4b4a      	ldr	r3, [pc, #296]	; (8002d40 <HAL_I2C_EV_IRQHandler+0x844>)
 8002c16:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->State = HAL_I2C_STATE_READY;
 8002c18:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_ListenCpltCallback(hi2c);
 8002c1e:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_READY;
 8002c20:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c24:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002c28:	f7ff fb85 	bl	8002336 <HAL_I2C_ListenCpltCallback>
 8002c2c:	e482      	b.n	8002534 <HAL_I2C_EV_IRQHandler+0x38>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002c2e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002c30:	2b22      	cmp	r3, #34	; 0x22
 8002c32:	d002      	beq.n	8002c3a <HAL_I2C_EV_IRQHandler+0x73e>
 8002c34:	2d22      	cmp	r5, #34	; 0x22
 8002c36:	f47f ac7d 	bne.w	8002534 <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002c3a:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8002c3c:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8002c3e:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002c40:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c44:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002c48:	4620      	mov	r0, r4
 8002c4a:	f7ff fb72 	bl	8002332 <HAL_I2C_SlaveRxCpltCallback>
 8002c4e:	e471      	b.n	8002534 <HAL_I2C_EV_IRQHandler+0x38>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002c50:	f000 00f7 	and.w	r0, r0, #247	; 0xf7
 8002c54:	2821      	cmp	r0, #33	; 0x21
 8002c56:	f001 0504 	and.w	r5, r1, #4
 8002c5a:	d135      	bne.n	8002cc8 <HAL_I2C_EV_IRQHandler+0x7cc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c5c:	0609      	lsls	r1, r1, #24
 8002c5e:	d527      	bpl.n	8002cb0 <HAL_I2C_EV_IRQHandler+0x7b4>
 8002c60:	0551      	lsls	r1, r2, #21
 8002c62:	d525      	bpl.n	8002cb0 <HAL_I2C_EV_IRQHandler+0x7b4>
 8002c64:	bb25      	cbnz	r5, 8002cb0 <HAL_I2C_EV_IRQHandler+0x7b4>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c66:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 8002c6a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002c6c:	b292      	uxth	r2, r2
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c6e:	b2c9      	uxtb	r1, r1
  if (hi2c->XferCount != 0U)
 8002c70:	2a00      	cmp	r2, #0
 8002c72:	f43f ac5f 	beq.w	8002534 <HAL_I2C_EV_IRQHandler+0x38>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c76:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002c78:	f812 5b01 	ldrb.w	r5, [r2], #1
 8002c7c:	611d      	str	r5, [r3, #16]
    hi2c->pBuffPtr++;
 8002c7e:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8002c80:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002c82:	3a01      	subs	r2, #1
 8002c84:	b292      	uxth	r2, r2
 8002c86:	8562      	strh	r2, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002c88:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002c8a:	b292      	uxth	r2, r2
 8002c8c:	2a00      	cmp	r2, #0
 8002c8e:	f47f ac51 	bne.w	8002534 <HAL_I2C_EV_IRQHandler+0x38>
 8002c92:	2929      	cmp	r1, #41	; 0x29
 8002c94:	f47f ac4e 	bne.w	8002534 <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c98:	685a      	ldr	r2, [r3, #4]
 8002c9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c9e:	605a      	str	r2, [r3, #4]
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002ca0:	2328      	movs	r3, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002ca2:	6320      	str	r0, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002ca4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002ca8:	4620      	mov	r0, r4
 8002caa:	f7ff fb41 	bl	8002330 <HAL_I2C_SlaveTxCpltCallback>
 8002cae:	e441      	b.n	8002534 <HAL_I2C_EV_IRQHandler+0x38>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002cb0:	2d00      	cmp	r5, #0
 8002cb2:	f43f ac3f 	beq.w	8002534 <HAL_I2C_EV_IRQHandler+0x38>
 8002cb6:	0595      	lsls	r5, r2, #22
 8002cb8:	f57f ac3c 	bpl.w	8002534 <HAL_I2C_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 8002cbc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002cbe:	b292      	uxth	r2, r2
 8002cc0:	2a00      	cmp	r2, #0
 8002cc2:	f47f ade1 	bne.w	8002888 <HAL_I2C_EV_IRQHandler+0x38c>
 8002cc6:	e435      	b.n	8002534 <HAL_I2C_EV_IRQHandler+0x38>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002cc8:	0648      	lsls	r0, r1, #25
 8002cca:	d527      	bpl.n	8002d1c <HAL_I2C_EV_IRQHandler+0x820>
 8002ccc:	0551      	lsls	r1, r2, #21
 8002cce:	d525      	bpl.n	8002d1c <HAL_I2C_EV_IRQHandler+0x820>
 8002cd0:	bb25      	cbnz	r5, 8002d1c <HAL_I2C_EV_IRQHandler+0x820>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002cd2:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 8002cd6:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8002cd8:	b289      	uxth	r1, r1
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002cda:	b2d2      	uxtb	r2, r2
  if (hi2c->XferCount != 0U)
 8002cdc:	2900      	cmp	r1, #0
 8002cde:	f43f ac29 	beq.w	8002534 <HAL_I2C_EV_IRQHandler+0x38>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ce2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 8002ce8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002cea:	3301      	adds	r3, #1
 8002cec:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8002cee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002cf6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f47f ac1a 	bne.w	8002534 <HAL_I2C_EV_IRQHandler+0x38>
 8002d00:	2a2a      	cmp	r2, #42	; 0x2a
 8002d02:	f47f ac17 	bne.w	8002534 <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d06:	6822      	ldr	r2, [r4, #0]
 8002d08:	6853      	ldr	r3, [r2, #4]
 8002d0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d0e:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002d10:	2322      	movs	r3, #34	; 0x22
 8002d12:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002d14:	2328      	movs	r3, #40	; 0x28
 8002d16:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8002d1a:	e795      	b.n	8002c48 <HAL_I2C_EV_IRQHandler+0x74c>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d1c:	2d00      	cmp	r5, #0
 8002d1e:	f43f ac09 	beq.w	8002534 <HAL_I2C_EV_IRQHandler+0x38>
 8002d22:	0592      	lsls	r2, r2, #22
 8002d24:	f57f ac06 	bpl.w	8002534 <HAL_I2C_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 8002d28:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002d2a:	b292      	uxth	r2, r2
 8002d2c:	2a00      	cmp	r2, #0
 8002d2e:	f43f ac01 	beq.w	8002534 <HAL_I2C_EV_IRQHandler+0x38>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d32:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	7013      	strb	r3, [r2, #0]
 8002d38:	e64f      	b.n	80029da <HAL_I2C_EV_IRQHandler+0x4de>
 8002d3a:	bf00      	nop
 8002d3c:	08002341 	.word	0x08002341
 8002d40:	ffff0000 	.word	0xffff0000

08002d44 <HAL_I2C_ER_IRQHandler>:
{
 8002d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002d46:	6803      	ldr	r3, [r0, #0]
 8002d48:	695f      	ldr	r7, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002d4a:	685e      	ldr	r6, [r3, #4]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002d4c:	f417 7580 	ands.w	r5, r7, #256	; 0x100
{
 8002d50:	4604      	mov	r4, r0
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002d52:	d006      	beq.n	8002d62 <HAL_I2C_ER_IRQHandler+0x1e>
 8002d54:	f416 7580 	ands.w	r5, r6, #256	; 0x100
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d58:	bf1e      	ittt	ne
 8002d5a:	f46f 7280 	mvnne.w	r2, #256	; 0x100
 8002d5e:	615a      	strne	r2, [r3, #20]
    error |= HAL_I2C_ERROR_BERR;
 8002d60:	2501      	movne	r5, #1
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002d62:	05b9      	lsls	r1, r7, #22
 8002d64:	d506      	bpl.n	8002d74 <HAL_I2C_ER_IRQHandler+0x30>
 8002d66:	05f2      	lsls	r2, r6, #23
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d68:	bf42      	ittt	mi
 8002d6a:	f46f 7200 	mvnmi.w	r2, #512	; 0x200
    error |= HAL_I2C_ERROR_ARLO;
 8002d6e:	f045 0502 	orrmi.w	r5, r5, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d72:	615a      	strmi	r2, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002d74:	0578      	lsls	r0, r7, #21
 8002d76:	d537      	bpl.n	8002de8 <HAL_I2C_ER_IRQHandler+0xa4>
 8002d78:	05f1      	lsls	r1, r6, #23
 8002d7a:	d535      	bpl.n	8002de8 <HAL_I2C_ER_IRQHandler+0xa4>
    tmp1 = hi2c->Mode;
 8002d7c:	f894 e03e 	ldrb.w	lr, [r4, #62]	; 0x3e
    tmp2 = hi2c->XferCount;
 8002d80:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    tmp3 = hi2c->State;
 8002d82:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
    tmp4 = hi2c->PreviousState;
 8002d86:	6b20      	ldr	r0, [r4, #48]	; 0x30
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002d88:	f1be 0f20 	cmp.w	lr, #32
    tmp2 = hi2c->XferCount;
 8002d8c:	b289      	uxth	r1, r1
    tmp3 = hi2c->State;
 8002d8e:	b2d2      	uxtb	r2, r2
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002d90:	d15a      	bne.n	8002e48 <HAL_I2C_ER_IRQHandler+0x104>
 8002d92:	2900      	cmp	r1, #0
 8002d94:	d158      	bne.n	8002e48 <HAL_I2C_ER_IRQHandler+0x104>
 8002d96:	f002 01f7 	and.w	r1, r2, #247	; 0xf7
 8002d9a:	2921      	cmp	r1, #33	; 0x21
 8002d9c:	d003      	beq.n	8002da6 <HAL_I2C_ER_IRQHandler+0x62>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002d9e:	2a28      	cmp	r2, #40	; 0x28
 8002da0:	d152      	bne.n	8002e48 <HAL_I2C_ER_IRQHandler+0x104>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002da2:	2821      	cmp	r0, #33	; 0x21
 8002da4:	d150      	bne.n	8002e48 <HAL_I2C_ER_IRQHandler+0x104>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002da6:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002daa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002dac:	2908      	cmp	r1, #8
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002dae:	b2d2      	uxtb	r2, r2
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002db0:	d001      	beq.n	8002db6 <HAL_I2C_ER_IRQHandler+0x72>
 8002db2:	2920      	cmp	r1, #32
 8002db4:	d12a      	bne.n	8002e0c <HAL_I2C_ER_IRQHandler+0xc8>
 8002db6:	2a28      	cmp	r2, #40	; 0x28
 8002db8:	d128      	bne.n	8002e0c <HAL_I2C_ER_IRQHandler+0xc8>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002dba:	4a2c      	ldr	r2, [pc, #176]	; (8002e6c <HAL_I2C_ER_IRQHandler+0x128>)
 8002dbc:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002dbe:	685a      	ldr	r2, [r3, #4]
 8002dc0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002dc4:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dc6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002dca:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dd2:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002dd4:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 8002dd6:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8002dd8:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 8002dda:	4620      	mov	r0, r4
    hi2c->State         = HAL_I2C_STATE_READY;
 8002ddc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002de0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8002de4:	f7ff faa7 	bl	8002336 <HAL_I2C_ListenCpltCallback>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002de8:	053a      	lsls	r2, r7, #20
 8002dea:	d53c      	bpl.n	8002e66 <HAL_I2C_ER_IRQHandler+0x122>
 8002dec:	05f3      	lsls	r3, r6, #23
 8002dee:	d53a      	bpl.n	8002e66 <HAL_I2C_ER_IRQHandler+0x122>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002df0:	6823      	ldr	r3, [r4, #0]
 8002df2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
    error |= HAL_I2C_ERROR_OVR;
 8002df6:	f045 0508 	orr.w	r5, r5, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002dfa:	615a      	str	r2, [r3, #20]
    hi2c->ErrorCode |= error;
 8002dfc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002dfe:	431d      	orrs	r5, r3
 8002e00:	6425      	str	r5, [r4, #64]	; 0x40
    I2C_ITError(hi2c);
 8002e02:	4620      	mov	r0, r4
}
 8002e04:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    I2C_ITError(hi2c);
 8002e08:	f7ff bad6 	b.w	80023b8 <I2C_ITError>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002e0c:	2a21      	cmp	r2, #33	; 0x21
 8002e0e:	d117      	bne.n	8002e40 <HAL_I2C_ER_IRQHandler+0xfc>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002e10:	4916      	ldr	r1, [pc, #88]	; (8002e6c <HAL_I2C_ER_IRQHandler+0x128>)
 8002e12:	62e1      	str	r1, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002e14:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002e16:	2220      	movs	r2, #32
 8002e18:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e22:	685a      	ldr	r2, [r3, #4]
 8002e24:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e28:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e2a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e2e:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e36:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002e38:	4620      	mov	r0, r4
 8002e3a:	f7ff fa79 	bl	8002330 <HAL_I2C_SlaveTxCpltCallback>
 8002e3e:	e7d3      	b.n	8002de8 <HAL_I2C_ER_IRQHandler+0xa4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e40:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e44:	615a      	str	r2, [r3, #20]
 8002e46:	e7cf      	b.n	8002de8 <HAL_I2C_ER_IRQHandler+0xa4>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e48:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e4c:	615a      	str	r2, [r3, #20]
      if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 8002e4e:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8002e52:	2a10      	cmp	r2, #16
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e54:	bf04      	itt	eq
 8002e56:	681a      	ldreq	r2, [r3, #0]
 8002e58:	f442 7200 	orreq.w	r2, r2, #512	; 0x200
      error |= HAL_I2C_ERROR_AF;
 8002e5c:	f045 0504 	orr.w	r5, r5, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e60:	bf08      	it	eq
 8002e62:	601a      	streq	r2, [r3, #0]
 8002e64:	e7c0      	b.n	8002de8 <HAL_I2C_ER_IRQHandler+0xa4>
  if (error != HAL_I2C_ERROR_NONE)
 8002e66:	2d00      	cmp	r5, #0
 8002e68:	d1c8      	bne.n	8002dfc <HAL_I2C_ER_IRQHandler+0xb8>
 8002e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e6c:	ffff0000 	.word	0xffff0000

08002e70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e70:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e74:	4604      	mov	r4, r0
 8002e76:	b918      	cbnz	r0, 8002e80 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8002e78:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8002e7a:	b002      	add	sp, #8
 8002e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e80:	6803      	ldr	r3, [r0, #0]
 8002e82:	07dd      	lsls	r5, r3, #31
 8002e84:	d410      	bmi.n	8002ea8 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e86:	6823      	ldr	r3, [r4, #0]
 8002e88:	0798      	lsls	r0, r3, #30
 8002e8a:	d458      	bmi.n	8002f3e <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e8c:	6823      	ldr	r3, [r4, #0]
 8002e8e:	071a      	lsls	r2, r3, #28
 8002e90:	f100 809a 	bmi.w	8002fc8 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e94:	6823      	ldr	r3, [r4, #0]
 8002e96:	075b      	lsls	r3, r3, #29
 8002e98:	f100 80b8 	bmi.w	800300c <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e9c:	69a2      	ldr	r2, [r4, #24]
 8002e9e:	2a00      	cmp	r2, #0
 8002ea0:	f040 8119 	bne.w	80030d6 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8002ea4:	2000      	movs	r0, #0
 8002ea6:	e7e8      	b.n	8002e7a <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ea8:	4ba6      	ldr	r3, [pc, #664]	; (8003144 <HAL_RCC_OscConfig+0x2d4>)
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	f002 020c 	and.w	r2, r2, #12
 8002eb0:	2a04      	cmp	r2, #4
 8002eb2:	d007      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eb4:	689a      	ldr	r2, [r3, #8]
 8002eb6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002eba:	2a08      	cmp	r2, #8
 8002ebc:	d10a      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	0259      	lsls	r1, r3, #9
 8002ec2:	d507      	bpl.n	8002ed4 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ec4:	4b9f      	ldr	r3, [pc, #636]	; (8003144 <HAL_RCC_OscConfig+0x2d4>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	039a      	lsls	r2, r3, #14
 8002eca:	d5dc      	bpl.n	8002e86 <HAL_RCC_OscConfig+0x16>
 8002ecc:	6863      	ldr	r3, [r4, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1d9      	bne.n	8002e86 <HAL_RCC_OscConfig+0x16>
 8002ed2:	e7d1      	b.n	8002e78 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ed4:	6863      	ldr	r3, [r4, #4]
 8002ed6:	4d9b      	ldr	r5, [pc, #620]	; (8003144 <HAL_RCC_OscConfig+0x2d4>)
 8002ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002edc:	d111      	bne.n	8002f02 <HAL_RCC_OscConfig+0x92>
 8002ede:	682b      	ldr	r3, [r5, #0]
 8002ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002ee6:	f7fe f84d 	bl	8000f84 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eea:	4d96      	ldr	r5, [pc, #600]	; (8003144 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8002eec:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eee:	682b      	ldr	r3, [r5, #0]
 8002ef0:	039b      	lsls	r3, r3, #14
 8002ef2:	d4c8      	bmi.n	8002e86 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ef4:	f7fe f846 	bl	8000f84 <HAL_GetTick>
 8002ef8:	1b80      	subs	r0, r0, r6
 8002efa:	2864      	cmp	r0, #100	; 0x64
 8002efc:	d9f7      	bls.n	8002eee <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8002efe:	2003      	movs	r0, #3
 8002f00:	e7bb      	b.n	8002e7a <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f02:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f06:	d104      	bne.n	8002f12 <HAL_RCC_OscConfig+0xa2>
 8002f08:	682b      	ldr	r3, [r5, #0]
 8002f0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f0e:	602b      	str	r3, [r5, #0]
 8002f10:	e7e5      	b.n	8002ede <HAL_RCC_OscConfig+0x6e>
 8002f12:	682a      	ldr	r2, [r5, #0]
 8002f14:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002f18:	602a      	str	r2, [r5, #0]
 8002f1a:	682a      	ldr	r2, [r5, #0]
 8002f1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f20:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1df      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8002f26:	f7fe f82d 	bl	8000f84 <HAL_GetTick>
 8002f2a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f2c:	682b      	ldr	r3, [r5, #0]
 8002f2e:	039f      	lsls	r7, r3, #14
 8002f30:	d5a9      	bpl.n	8002e86 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f32:	f7fe f827 	bl	8000f84 <HAL_GetTick>
 8002f36:	1b80      	subs	r0, r0, r6
 8002f38:	2864      	cmp	r0, #100	; 0x64
 8002f3a:	d9f7      	bls.n	8002f2c <HAL_RCC_OscConfig+0xbc>
 8002f3c:	e7df      	b.n	8002efe <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f3e:	4b81      	ldr	r3, [pc, #516]	; (8003144 <HAL_RCC_OscConfig+0x2d4>)
 8002f40:	689a      	ldr	r2, [r3, #8]
 8002f42:	f012 0f0c 	tst.w	r2, #12
 8002f46:	d007      	beq.n	8002f58 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f48:	689a      	ldr	r2, [r3, #8]
 8002f4a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f4e:	2a08      	cmp	r2, #8
 8002f50:	d111      	bne.n	8002f76 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	025e      	lsls	r6, r3, #9
 8002f56:	d40e      	bmi.n	8002f76 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f58:	4b7a      	ldr	r3, [pc, #488]	; (8003144 <HAL_RCC_OscConfig+0x2d4>)
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	0795      	lsls	r5, r2, #30
 8002f5e:	d502      	bpl.n	8002f66 <HAL_RCC_OscConfig+0xf6>
 8002f60:	68e2      	ldr	r2, [r4, #12]
 8002f62:	2a01      	cmp	r2, #1
 8002f64:	d188      	bne.n	8002e78 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	6921      	ldr	r1, [r4, #16]
 8002f6a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002f6e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8002f72:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f74:	e78a      	b.n	8002e8c <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f76:	68e2      	ldr	r2, [r4, #12]
 8002f78:	4b73      	ldr	r3, [pc, #460]	; (8003148 <HAL_RCC_OscConfig+0x2d8>)
 8002f7a:	b1b2      	cbz	r2, 8002faa <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002f80:	f7fe f800 	bl	8000f84 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f84:	4d6f      	ldr	r5, [pc, #444]	; (8003144 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8002f86:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f88:	682b      	ldr	r3, [r5, #0]
 8002f8a:	0798      	lsls	r0, r3, #30
 8002f8c:	d507      	bpl.n	8002f9e <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f8e:	682b      	ldr	r3, [r5, #0]
 8002f90:	6922      	ldr	r2, [r4, #16]
 8002f92:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002f96:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002f9a:	602b      	str	r3, [r5, #0]
 8002f9c:	e776      	b.n	8002e8c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f9e:	f7fd fff1 	bl	8000f84 <HAL_GetTick>
 8002fa2:	1b80      	subs	r0, r0, r6
 8002fa4:	2802      	cmp	r0, #2
 8002fa6:	d9ef      	bls.n	8002f88 <HAL_RCC_OscConfig+0x118>
 8002fa8:	e7a9      	b.n	8002efe <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8002faa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002fac:	f7fd ffea 	bl	8000f84 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fb0:	4d64      	ldr	r5, [pc, #400]	; (8003144 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8002fb2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fb4:	682b      	ldr	r3, [r5, #0]
 8002fb6:	0799      	lsls	r1, r3, #30
 8002fb8:	f57f af68 	bpl.w	8002e8c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fbc:	f7fd ffe2 	bl	8000f84 <HAL_GetTick>
 8002fc0:	1b80      	subs	r0, r0, r6
 8002fc2:	2802      	cmp	r0, #2
 8002fc4:	d9f6      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x144>
 8002fc6:	e79a      	b.n	8002efe <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002fc8:	6962      	ldr	r2, [r4, #20]
 8002fca:	4b60      	ldr	r3, [pc, #384]	; (800314c <HAL_RCC_OscConfig+0x2dc>)
 8002fcc:	b17a      	cbz	r2, 8002fee <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8002fce:	2201      	movs	r2, #1
 8002fd0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002fd2:	f7fd ffd7 	bl	8000f84 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fd6:	4d5b      	ldr	r5, [pc, #364]	; (8003144 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8002fd8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fda:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002fdc:	079f      	lsls	r7, r3, #30
 8002fde:	f53f af59 	bmi.w	8002e94 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fe2:	f7fd ffcf 	bl	8000f84 <HAL_GetTick>
 8002fe6:	1b80      	subs	r0, r0, r6
 8002fe8:	2802      	cmp	r0, #2
 8002fea:	d9f6      	bls.n	8002fda <HAL_RCC_OscConfig+0x16a>
 8002fec:	e787      	b.n	8002efe <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8002fee:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002ff0:	f7fd ffc8 	bl	8000f84 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ff4:	4d53      	ldr	r5, [pc, #332]	; (8003144 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8002ff6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ff8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002ffa:	0798      	lsls	r0, r3, #30
 8002ffc:	f57f af4a 	bpl.w	8002e94 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003000:	f7fd ffc0 	bl	8000f84 <HAL_GetTick>
 8003004:	1b80      	subs	r0, r0, r6
 8003006:	2802      	cmp	r0, #2
 8003008:	d9f6      	bls.n	8002ff8 <HAL_RCC_OscConfig+0x188>
 800300a:	e778      	b.n	8002efe <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800300c:	4b4d      	ldr	r3, [pc, #308]	; (8003144 <HAL_RCC_OscConfig+0x2d4>)
 800300e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003010:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8003014:	d128      	bne.n	8003068 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003016:	9201      	str	r2, [sp, #4]
 8003018:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800301a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800301e:	641a      	str	r2, [r3, #64]	; 0x40
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003026:	9301      	str	r3, [sp, #4]
 8003028:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800302a:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800302c:	4d48      	ldr	r5, [pc, #288]	; (8003150 <HAL_RCC_OscConfig+0x2e0>)
 800302e:	682b      	ldr	r3, [r5, #0]
 8003030:	05d9      	lsls	r1, r3, #23
 8003032:	d51b      	bpl.n	800306c <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003034:	68a3      	ldr	r3, [r4, #8]
 8003036:	4d43      	ldr	r5, [pc, #268]	; (8003144 <HAL_RCC_OscConfig+0x2d4>)
 8003038:	2b01      	cmp	r3, #1
 800303a:	d127      	bne.n	800308c <HAL_RCC_OscConfig+0x21c>
 800303c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800303e:	f043 0301 	orr.w	r3, r3, #1
 8003042:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8003044:	f7fd ff9e 	bl	8000f84 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003048:	4d3e      	ldr	r5, [pc, #248]	; (8003144 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800304a:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800304c:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003050:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003052:	079b      	lsls	r3, r3, #30
 8003054:	d539      	bpl.n	80030ca <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8003056:	2e00      	cmp	r6, #0
 8003058:	f43f af20 	beq.w	8002e9c <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 800305c:	4a39      	ldr	r2, [pc, #228]	; (8003144 <HAL_RCC_OscConfig+0x2d4>)
 800305e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003060:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003064:	6413      	str	r3, [r2, #64]	; 0x40
 8003066:	e719      	b.n	8002e9c <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8003068:	2600      	movs	r6, #0
 800306a:	e7df      	b.n	800302c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800306c:	682b      	ldr	r3, [r5, #0]
 800306e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003072:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003074:	f7fd ff86 	bl	8000f84 <HAL_GetTick>
 8003078:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800307a:	682b      	ldr	r3, [r5, #0]
 800307c:	05da      	lsls	r2, r3, #23
 800307e:	d4d9      	bmi.n	8003034 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003080:	f7fd ff80 	bl	8000f84 <HAL_GetTick>
 8003084:	1bc0      	subs	r0, r0, r7
 8003086:	2802      	cmp	r0, #2
 8003088:	d9f7      	bls.n	800307a <HAL_RCC_OscConfig+0x20a>
 800308a:	e738      	b.n	8002efe <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800308c:	2b05      	cmp	r3, #5
 800308e:	d104      	bne.n	800309a <HAL_RCC_OscConfig+0x22a>
 8003090:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003092:	f043 0304 	orr.w	r3, r3, #4
 8003096:	672b      	str	r3, [r5, #112]	; 0x70
 8003098:	e7d0      	b.n	800303c <HAL_RCC_OscConfig+0x1cc>
 800309a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800309c:	f022 0201 	bic.w	r2, r2, #1
 80030a0:	672a      	str	r2, [r5, #112]	; 0x70
 80030a2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80030a4:	f022 0204 	bic.w	r2, r2, #4
 80030a8:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1ca      	bne.n	8003044 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 80030ae:	f7fd ff69 	bl	8000f84 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030b2:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80030b6:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030b8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80030ba:	0798      	lsls	r0, r3, #30
 80030bc:	d5cb      	bpl.n	8003056 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030be:	f7fd ff61 	bl	8000f84 <HAL_GetTick>
 80030c2:	1bc0      	subs	r0, r0, r7
 80030c4:	4540      	cmp	r0, r8
 80030c6:	d9f7      	bls.n	80030b8 <HAL_RCC_OscConfig+0x248>
 80030c8:	e719      	b.n	8002efe <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030ca:	f7fd ff5b 	bl	8000f84 <HAL_GetTick>
 80030ce:	1bc0      	subs	r0, r0, r7
 80030d0:	4540      	cmp	r0, r8
 80030d2:	d9bd      	bls.n	8003050 <HAL_RCC_OscConfig+0x1e0>
 80030d4:	e713      	b.n	8002efe <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030d6:	4d1b      	ldr	r5, [pc, #108]	; (8003144 <HAL_RCC_OscConfig+0x2d4>)
 80030d8:	68ab      	ldr	r3, [r5, #8]
 80030da:	f003 030c 	and.w	r3, r3, #12
 80030de:	2b08      	cmp	r3, #8
 80030e0:	f43f aeca 	beq.w	8002e78 <HAL_RCC_OscConfig+0x8>
 80030e4:	4e1b      	ldr	r6, [pc, #108]	; (8003154 <HAL_RCC_OscConfig+0x2e4>)
 80030e6:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030e8:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80030ea:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030ec:	d134      	bne.n	8003158 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 80030ee:	f7fd ff49 	bl	8000f84 <HAL_GetTick>
 80030f2:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030f4:	682b      	ldr	r3, [r5, #0]
 80030f6:	0199      	lsls	r1, r3, #6
 80030f8:	d41e      	bmi.n	8003138 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030fa:	6a22      	ldr	r2, [r4, #32]
 80030fc:	69e3      	ldr	r3, [r4, #28]
 80030fe:	4313      	orrs	r3, r2
 8003100:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003102:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003106:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003108:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800310c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800310e:	4c0d      	ldr	r4, [pc, #52]	; (8003144 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003110:	0852      	lsrs	r2, r2, #1
 8003112:	3a01      	subs	r2, #1
 8003114:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003118:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800311a:	2301      	movs	r3, #1
 800311c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800311e:	f7fd ff31 	bl	8000f84 <HAL_GetTick>
 8003122:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003124:	6823      	ldr	r3, [r4, #0]
 8003126:	019a      	lsls	r2, r3, #6
 8003128:	f53f aebc 	bmi.w	8002ea4 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800312c:	f7fd ff2a 	bl	8000f84 <HAL_GetTick>
 8003130:	1b40      	subs	r0, r0, r5
 8003132:	2802      	cmp	r0, #2
 8003134:	d9f6      	bls.n	8003124 <HAL_RCC_OscConfig+0x2b4>
 8003136:	e6e2      	b.n	8002efe <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003138:	f7fd ff24 	bl	8000f84 <HAL_GetTick>
 800313c:	1bc0      	subs	r0, r0, r7
 800313e:	2802      	cmp	r0, #2
 8003140:	d9d8      	bls.n	80030f4 <HAL_RCC_OscConfig+0x284>
 8003142:	e6dc      	b.n	8002efe <HAL_RCC_OscConfig+0x8e>
 8003144:	40023800 	.word	0x40023800
 8003148:	42470000 	.word	0x42470000
 800314c:	42470e80 	.word	0x42470e80
 8003150:	40007000 	.word	0x40007000
 8003154:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8003158:	f7fd ff14 	bl	8000f84 <HAL_GetTick>
 800315c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800315e:	682b      	ldr	r3, [r5, #0]
 8003160:	019b      	lsls	r3, r3, #6
 8003162:	f57f ae9f 	bpl.w	8002ea4 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003166:	f7fd ff0d 	bl	8000f84 <HAL_GetTick>
 800316a:	1b00      	subs	r0, r0, r4
 800316c:	2802      	cmp	r0, #2
 800316e:	d9f6      	bls.n	800315e <HAL_RCC_OscConfig+0x2ee>
 8003170:	e6c5      	b.n	8002efe <HAL_RCC_OscConfig+0x8e>
 8003172:	bf00      	nop

08003174 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003174:	4913      	ldr	r1, [pc, #76]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8003176:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003178:	688b      	ldr	r3, [r1, #8]
 800317a:	f003 030c 	and.w	r3, r3, #12
 800317e:	2b04      	cmp	r3, #4
 8003180:	d003      	beq.n	800318a <HAL_RCC_GetSysClockFreq+0x16>
 8003182:	2b08      	cmp	r3, #8
 8003184:	d003      	beq.n	800318e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003186:	4810      	ldr	r0, [pc, #64]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003188:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 800318a:	4810      	ldr	r0, [pc, #64]	; (80031cc <HAL_RCC_GetSysClockFreq+0x58>)
 800318c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800318e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003190:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003192:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003194:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003198:	bf14      	ite	ne
 800319a:	480c      	ldrne	r0, [pc, #48]	; (80031cc <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800319c:	480a      	ldreq	r0, [pc, #40]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800319e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80031a2:	bf18      	it	ne
 80031a4:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031a6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031aa:	fba1 0100 	umull	r0, r1, r1, r0
 80031ae:	f7fd fd17 	bl	8000be0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031b2:	4b04      	ldr	r3, [pc, #16]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x50>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80031ba:	3301      	adds	r3, #1
 80031bc:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80031be:	fbb0 f0f3 	udiv	r0, r0, r3
 80031c2:	bd08      	pop	{r3, pc}
 80031c4:	40023800 	.word	0x40023800
 80031c8:	00f42400 	.word	0x00f42400
 80031cc:	007a1200 	.word	0x007a1200

080031d0 <HAL_RCC_ClockConfig>:
{
 80031d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031d4:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80031d6:	4604      	mov	r4, r0
 80031d8:	b910      	cbnz	r0, 80031e0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80031da:	2001      	movs	r0, #1
 80031dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031e0:	4b44      	ldr	r3, [pc, #272]	; (80032f4 <HAL_RCC_ClockConfig+0x124>)
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	f002 020f 	and.w	r2, r2, #15
 80031e8:	428a      	cmp	r2, r1
 80031ea:	d328      	bcc.n	800323e <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031ec:	6821      	ldr	r1, [r4, #0]
 80031ee:	078f      	lsls	r7, r1, #30
 80031f0:	d42d      	bmi.n	800324e <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031f2:	07c8      	lsls	r0, r1, #31
 80031f4:	d440      	bmi.n	8003278 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031f6:	4b3f      	ldr	r3, [pc, #252]	; (80032f4 <HAL_RCC_ClockConfig+0x124>)
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	f002 020f 	and.w	r2, r2, #15
 80031fe:	4295      	cmp	r5, r2
 8003200:	d366      	bcc.n	80032d0 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003202:	6822      	ldr	r2, [r4, #0]
 8003204:	0751      	lsls	r1, r2, #29
 8003206:	d46c      	bmi.n	80032e2 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003208:	0713      	lsls	r3, r2, #28
 800320a:	d507      	bpl.n	800321c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800320c:	4a3a      	ldr	r2, [pc, #232]	; (80032f8 <HAL_RCC_ClockConfig+0x128>)
 800320e:	6921      	ldr	r1, [r4, #16]
 8003210:	6893      	ldr	r3, [r2, #8]
 8003212:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003216:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800321a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800321c:	f7ff ffaa 	bl	8003174 <HAL_RCC_GetSysClockFreq>
 8003220:	4b35      	ldr	r3, [pc, #212]	; (80032f8 <HAL_RCC_ClockConfig+0x128>)
 8003222:	4a36      	ldr	r2, [pc, #216]	; (80032fc <HAL_RCC_ClockConfig+0x12c>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800322a:	5cd3      	ldrb	r3, [r2, r3]
 800322c:	40d8      	lsrs	r0, r3
 800322e:	4b34      	ldr	r3, [pc, #208]	; (8003300 <HAL_RCC_ClockConfig+0x130>)
 8003230:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8003232:	200f      	movs	r0, #15
 8003234:	f7fd fe5c 	bl	8000ef0 <HAL_InitTick>
  return HAL_OK;
 8003238:	2000      	movs	r0, #0
 800323a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800323e:	b2ca      	uxtb	r2, r1
 8003240:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 030f 	and.w	r3, r3, #15
 8003248:	4299      	cmp	r1, r3
 800324a:	d1c6      	bne.n	80031da <HAL_RCC_ClockConfig+0xa>
 800324c:	e7ce      	b.n	80031ec <HAL_RCC_ClockConfig+0x1c>
 800324e:	4b2a      	ldr	r3, [pc, #168]	; (80032f8 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003250:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003254:	bf1e      	ittt	ne
 8003256:	689a      	ldrne	r2, [r3, #8]
 8003258:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 800325c:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800325e:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003260:	bf42      	ittt	mi
 8003262:	689a      	ldrmi	r2, [r3, #8]
 8003264:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8003268:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	68a0      	ldr	r0, [r4, #8]
 800326e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003272:	4302      	orrs	r2, r0
 8003274:	609a      	str	r2, [r3, #8]
 8003276:	e7bc      	b.n	80031f2 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003278:	6862      	ldr	r2, [r4, #4]
 800327a:	4b1f      	ldr	r3, [pc, #124]	; (80032f8 <HAL_RCC_ClockConfig+0x128>)
 800327c:	2a01      	cmp	r2, #1
 800327e:	d11d      	bne.n	80032bc <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003286:	d0a8      	beq.n	80031da <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003288:	4e1b      	ldr	r6, [pc, #108]	; (80032f8 <HAL_RCC_ClockConfig+0x128>)
 800328a:	68b3      	ldr	r3, [r6, #8]
 800328c:	f023 0303 	bic.w	r3, r3, #3
 8003290:	4313      	orrs	r3, r2
 8003292:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8003294:	f7fd fe76 	bl	8000f84 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003298:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800329c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800329e:	68b3      	ldr	r3, [r6, #8]
 80032a0:	6862      	ldr	r2, [r4, #4]
 80032a2:	f003 030c 	and.w	r3, r3, #12
 80032a6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80032aa:	d0a4      	beq.n	80031f6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032ac:	f7fd fe6a 	bl	8000f84 <HAL_GetTick>
 80032b0:	1bc0      	subs	r0, r0, r7
 80032b2:	4540      	cmp	r0, r8
 80032b4:	d9f3      	bls.n	800329e <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 80032b6:	2003      	movs	r0, #3
}
 80032b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032bc:	1e91      	subs	r1, r2, #2
 80032be:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032c0:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032c2:	d802      	bhi.n	80032ca <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032c4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80032c8:	e7dd      	b.n	8003286 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ca:	f013 0f02 	tst.w	r3, #2
 80032ce:	e7da      	b.n	8003286 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032d0:	b2ea      	uxtb	r2, r5
 80032d2:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 030f 	and.w	r3, r3, #15
 80032da:	429d      	cmp	r5, r3
 80032dc:	f47f af7d 	bne.w	80031da <HAL_RCC_ClockConfig+0xa>
 80032e0:	e78f      	b.n	8003202 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032e2:	4905      	ldr	r1, [pc, #20]	; (80032f8 <HAL_RCC_ClockConfig+0x128>)
 80032e4:	68e0      	ldr	r0, [r4, #12]
 80032e6:	688b      	ldr	r3, [r1, #8]
 80032e8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80032ec:	4303      	orrs	r3, r0
 80032ee:	608b      	str	r3, [r1, #8]
 80032f0:	e78a      	b.n	8003208 <HAL_RCC_ClockConfig+0x38>
 80032f2:	bf00      	nop
 80032f4:	40023c00 	.word	0x40023c00
 80032f8:	40023800 	.word	0x40023800
 80032fc:	0800ce2c 	.word	0x0800ce2c
 8003300:	20000010 	.word	0x20000010

08003304 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003304:	4b04      	ldr	r3, [pc, #16]	; (8003318 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003306:	4a05      	ldr	r2, [pc, #20]	; (800331c <HAL_RCC_GetPCLK1Freq+0x18>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800330e:	5cd3      	ldrb	r3, [r2, r3]
 8003310:	4a03      	ldr	r2, [pc, #12]	; (8003320 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003312:	6810      	ldr	r0, [r2, #0]
}
 8003314:	40d8      	lsrs	r0, r3
 8003316:	4770      	bx	lr
 8003318:	40023800 	.word	0x40023800
 800331c:	0800ce3c 	.word	0x0800ce3c
 8003320:	20000010 	.word	0x20000010

08003324 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003324:	4b04      	ldr	r3, [pc, #16]	; (8003338 <HAL_RCC_GetPCLK2Freq+0x14>)
 8003326:	4a05      	ldr	r2, [pc, #20]	; (800333c <HAL_RCC_GetPCLK2Freq+0x18>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800332e:	5cd3      	ldrb	r3, [r2, r3]
 8003330:	4a03      	ldr	r2, [pc, #12]	; (8003340 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003332:	6810      	ldr	r0, [r2, #0]
}
 8003334:	40d8      	lsrs	r0, r3
 8003336:	4770      	bx	lr
 8003338:	40023800 	.word	0x40023800
 800333c:	0800ce3c 	.word	0x0800ce3c
 8003340:	20000010 	.word	0x20000010

08003344 <SD_DMATransmitCplt>:
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
{
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
  
  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8003344:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800334a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800334e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003350:	4770      	bx	lr
	...

08003354 <HAL_SD_ReadBlocks_DMA>:
{
 8003354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003358:	4605      	mov	r5, r0
 800335a:	b086      	sub	sp, #24
 800335c:	4616      	mov	r6, r2
 800335e:	461f      	mov	r7, r3
  if(NULL == pData)
 8003360:	b939      	cbnz	r1, 8003372 <HAL_SD_ReadBlocks_DMA+0x1e>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003362:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003364:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003368:	63ab      	str	r3, [r5, #56]	; 0x38
    return HAL_ERROR;
 800336a:	2001      	movs	r0, #1
}
 800336c:	b006      	add	sp, #24
 800336e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 8003372:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8003376:	b2c4      	uxtb	r4, r0
 8003378:	2c01      	cmp	r4, #1
 800337a:	d16d      	bne.n	8003458 <HAL_SD_ReadBlocks_DMA+0x104>
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800337c:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 800337e:	18f3      	adds	r3, r6, r3
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8003380:	2200      	movs	r2, #0
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003382:	4283      	cmp	r3, r0
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8003384:	63aa      	str	r2, [r5, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003386:	d903      	bls.n	8003390 <HAL_SD_ReadBlocks_DMA+0x3c>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003388:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800338a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800338e:	e7eb      	b.n	8003368 <HAL_SD_ReadBlocks_DMA+0x14>
    hsd->Instance->DCTRL = 0U;
 8003390:	f8d5 e000 	ldr.w	lr, [r5]
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8003394:	6be8      	ldr	r0, [r5, #60]	; 0x3c
    hsd->State = HAL_SD_STATE_BUSY;
 8003396:	2303      	movs	r3, #3
 8003398:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 800339c:	f8ce 202c 	str.w	r2, [lr, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 80033a0:	f8de 303c 	ldr.w	r3, [lr, #60]	; 0x3c
 80033a4:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 80033a8:	f043 0302 	orr.w	r3, r3, #2
 80033ac:	f8ce 303c 	str.w	r3, [lr, #60]	; 0x3c
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80033b0:	4b2a      	ldr	r3, [pc, #168]	; (800345c <HAL_SD_ReadBlocks_DMA+0x108>)
 80033b2:	63c3      	str	r3, [r0, #60]	; 0x3c
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 80033b4:	ea4f 2847 	mov.w	r8, r7, lsl #9
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80033b8:	4b29      	ldr	r3, [pc, #164]	; (8003460 <HAL_SD_ReadBlocks_DMA+0x10c>)
 80033ba:	64c3      	str	r3, [r0, #76]	; 0x4c
    hsd->hdmarx->XferAbortCallback = NULL;
 80033bc:	6502      	str	r2, [r0, #80]	; 0x50
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 80033be:	ea4f 0398 	mov.w	r3, r8, lsr #2
 80033c2:	460a      	mov	r2, r1
 80033c4:	f10e 0180 	add.w	r1, lr, #128	; 0x80
 80033c8:	f7fe f830 	bl	800142c <HAL_DMA_Start_IT>
    __HAL_SD_DMA_ENABLE(hsd);
 80033cc:	4b25      	ldr	r3, [pc, #148]	; (8003464 <HAL_SD_ReadBlocks_DMA+0x110>)
    SDIO_ConfigData(hsd->Instance, &config);
 80033ce:	6828      	ldr	r0, [r5, #0]
    __HAL_SD_DMA_ENABLE(hsd);
 80033d0:	601c      	str	r4, [r3, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80033d2:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80033d4:	2b01      	cmp	r3, #1
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80033d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80033da:	e88d 0108 	stmia.w	sp, {r3, r8}
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80033de:	f04f 0390 	mov.w	r3, #144	; 0x90
 80033e2:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80033e4:	f04f 0302 	mov.w	r3, #2
 80033e8:	9303      	str	r3, [sp, #12]
    SDIO_ConfigData(hsd->Instance, &config);
 80033ea:	4669      	mov	r1, sp
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80033ec:	f04f 0300 	mov.w	r3, #0
    config.DPSM          = SDIO_DPSM_ENABLE;
 80033f0:	f04f 0401 	mov.w	r4, #1
      BlockAdd *= 512U;
 80033f4:	bf18      	it	ne
 80033f6:	0276      	lslne	r6, r6, #9
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80033f8:	9304      	str	r3, [sp, #16]
    config.DPSM          = SDIO_DPSM_ENABLE;
 80033fa:	9405      	str	r4, [sp, #20]
    SDIO_ConfigData(hsd->Instance, &config);
 80033fc:	f000 ffd4 	bl	80043a8 <SDIO_ConfigData>
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003400:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003404:	6828      	ldr	r0, [r5, #0]
 8003406:	f000 ffe2 	bl	80043ce <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 800340a:	b148      	cbz	r0, 8003420 <HAL_SD_ReadBlocks_DMA+0xcc>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 800340c:	682b      	ldr	r3, [r5, #0]
 800340e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003412:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003414:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003416:	4318      	orrs	r0, r3
 8003418:	63a8      	str	r0, [r5, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800341a:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
 800341e:	e7a4      	b.n	800336a <HAL_SD_ReadBlocks_DMA+0x16>
    if(NumberOfBlocks > 1U)
 8003420:	2f01      	cmp	r7, #1
 8003422:	d912      	bls.n	800344a <HAL_SD_ReadBlocks_DMA+0xf6>
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003424:	2382      	movs	r3, #130	; 0x82
 8003426:	632b      	str	r3, [r5, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8003428:	4631      	mov	r1, r6
 800342a:	6828      	ldr	r0, [r5, #0]
 800342c:	f000 ffff 	bl	800442e <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003430:	2800      	cmp	r0, #0
 8003432:	d09b      	beq.n	800336c <HAL_SD_ReadBlocks_DMA+0x18>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 8003434:	682b      	ldr	r3, [r5, #0]
 8003436:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800343a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800343c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800343e:	4318      	orrs	r0, r3
 8003440:	63a8      	str	r0, [r5, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003442:	2001      	movs	r0, #1
 8003444:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
      return HAL_ERROR;
 8003448:	e790      	b.n	800336c <HAL_SD_ReadBlocks_DMA+0x18>
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800344a:	2381      	movs	r3, #129	; 0x81
 800344c:	632b      	str	r3, [r5, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 800344e:	4631      	mov	r1, r6
 8003450:	6828      	ldr	r0, [r5, #0]
 8003452:	f000 ffd4 	bl	80043fe <SDMMC_CmdReadSingleBlock>
 8003456:	e7eb      	b.n	8003430 <HAL_SD_ReadBlocks_DMA+0xdc>
    return HAL_BUSY;
 8003458:	2002      	movs	r0, #2
 800345a:	e787      	b.n	800336c <HAL_SD_ReadBlocks_DMA+0x18>
 800345c:	0800356f 	.word	0x0800356f
 8003460:	080039c5 	.word	0x080039c5
 8003464:	4225858c 	.word	0x4225858c

08003468 <HAL_SD_WriteBlocks_DMA>:
{
 8003468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800346c:	4604      	mov	r4, r0
 800346e:	b086      	sub	sp, #24
 8003470:	4615      	mov	r5, r2
 8003472:	461e      	mov	r6, r3
  if(NULL == pData)
 8003474:	460f      	mov	r7, r1
 8003476:	b939      	cbnz	r1, 8003488 <HAL_SD_WriteBlocks_DMA+0x20>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003478:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800347a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800347e:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 8003480:	2001      	movs	r0, #1
}
 8003482:	b006      	add	sp, #24
 8003484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 8003488:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 800348c:	b2c0      	uxtb	r0, r0
 800348e:	2801      	cmp	r0, #1
 8003490:	d164      	bne.n	800355c <HAL_SD_WriteBlocks_DMA+0xf4>
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003492:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003494:	18eb      	adds	r3, r5, r3
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8003496:	2200      	movs	r2, #0
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003498:	428b      	cmp	r3, r1
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800349a:	63a2      	str	r2, [r4, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800349c:	d904      	bls.n	80034a8 <HAL_SD_WriteBlocks_DMA+0x40>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800349e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80034a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80034a4:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 80034a6:	e7ec      	b.n	8003482 <HAL_SD_WriteBlocks_DMA+0x1a>
    hsd->Instance->DCTRL = 0U;
 80034a8:	6820      	ldr	r0, [r4, #0]
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80034aa:	492d      	ldr	r1, [pc, #180]	; (8003560 <HAL_SD_WriteBlocks_DMA+0xf8>)
    hsd->State = HAL_SD_STATE_BUSY;
 80034ac:	2303      	movs	r3, #3
 80034ae:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 80034b2:	62c2      	str	r2, [r0, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));    
 80034b4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80034b6:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 80034ba:	f043 0302 	orr.w	r3, r3, #2
 80034be:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80034c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80034c2:	63d9      	str	r1, [r3, #60]	; 0x3c
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80034c4:	4927      	ldr	r1, [pc, #156]	; (8003564 <HAL_SD_WriteBlocks_DMA+0xfc>)
 80034c6:	64d9      	str	r1, [r3, #76]	; 0x4c
    hsd->hdmatx->XferAbortCallback = NULL;
 80034c8:	651a      	str	r2, [r3, #80]	; 0x50
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80034ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80034cc:	f44f 7100 	mov.w	r1, #512	; 0x200
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80034d0:	2b01      	cmp	r3, #1
      BlockAdd *= 512U;
 80034d2:	bf18      	it	ne
 80034d4:	026d      	lslne	r5, r5, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80034d6:	f000 ff7a 	bl	80043ce <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 80034da:	b150      	cbz	r0, 80034f2 <HAL_SD_WriteBlocks_DMA+0x8a>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 80034dc:	6823      	ldr	r3, [r4, #0]
 80034de:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80034e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80034e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80034e6:	4318      	orrs	r0, r3
 80034e8:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80034ea:	2001      	movs	r0, #1
 80034ec:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 80034f0:	e7c7      	b.n	8003482 <HAL_SD_WriteBlocks_DMA+0x1a>
    if(NumberOfBlocks > 1U)
 80034f2:	2e01      	cmp	r6, #1
 80034f4:	d90f      	bls.n	8003516 <HAL_SD_WriteBlocks_DMA+0xae>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80034f6:	23a0      	movs	r3, #160	; 0xa0
 80034f8:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 80034fa:	4629      	mov	r1, r5
 80034fc:	6820      	ldr	r0, [r4, #0]
 80034fe:	f000 ffc6 	bl	800448e <SDMMC_CmdWriteMultiBlock>
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8003502:	4605      	mov	r5, r0
 8003504:	6822      	ldr	r2, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003506:	b168      	cbz	r0, 8003524 <HAL_SD_WriteBlocks_DMA+0xbc>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS); 
 8003508:	f240 53ff 	movw	r3, #1535	; 0x5ff
 800350c:	6393      	str	r3, [r2, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800350e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003510:	4305      	orrs	r5, r0
 8003512:	63a5      	str	r5, [r4, #56]	; 0x38
 8003514:	e7e9      	b.n	80034ea <HAL_SD_WriteBlocks_DMA+0x82>
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003516:	2390      	movs	r3, #144	; 0x90
 8003518:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 800351a:	4629      	mov	r1, r5
 800351c:	6820      	ldr	r0, [r4, #0]
 800351e:	f000 ff9e 	bl	800445e <SDMMC_CmdWriteSingleBlock>
 8003522:	e7ee      	b.n	8003502 <HAL_SD_WriteBlocks_DMA+0x9a>
    __HAL_SD_DMA_ENABLE(hsd);
 8003524:	4b10      	ldr	r3, [pc, #64]	; (8003568 <HAL_SD_WriteBlocks_DMA+0x100>)
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8003526:	6c20      	ldr	r0, [r4, #64]	; 0x40
    __HAL_SD_DMA_ENABLE(hsd);
 8003528:	f04f 0801 	mov.w	r8, #1
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 800352c:	0276      	lsls	r6, r6, #9
    __HAL_SD_DMA_ENABLE(hsd);
 800352e:	f8c3 8000 	str.w	r8, [r3]
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8003532:	3280      	adds	r2, #128	; 0x80
 8003534:	08b3      	lsrs	r3, r6, #2
 8003536:	4639      	mov	r1, r7
 8003538:	f7fd ff78 	bl	800142c <HAL_DMA_Start_IT>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800353c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003540:	e88d 0048 	stmia.w	sp, {r3, r6}
    SDIO_ConfigData(hsd->Instance, &config);
 8003544:	4669      	mov	r1, sp
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003546:	2390      	movs	r3, #144	; 0x90
    SDIO_ConfigData(hsd->Instance, &config);
 8003548:	6820      	ldr	r0, [r4, #0]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800354a:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800354c:	9503      	str	r5, [sp, #12]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800354e:	9504      	str	r5, [sp, #16]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003550:	f8cd 8014 	str.w	r8, [sp, #20]
    SDIO_ConfigData(hsd->Instance, &config);
 8003554:	f000 ff28 	bl	80043a8 <SDIO_ConfigData>
    return HAL_OK;
 8003558:	4628      	mov	r0, r5
 800355a:	e792      	b.n	8003482 <HAL_SD_WriteBlocks_DMA+0x1a>
    return HAL_BUSY;
 800355c:	2002      	movs	r0, #2
 800355e:	e790      	b.n	8003482 <HAL_SD_WriteBlocks_DMA+0x1a>
 8003560:	08003345 	.word	0x08003345
 8003564:	080039c5 	.word	0x080039c5
 8003568:	4225858c 	.word	0x4225858c

0800356c <HAL_SD_ErrorCallback>:
 800356c:	4770      	bx	lr

0800356e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)  
{
 800356e:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003570:	6b84      	ldr	r4, [r0, #56]	; 0x38
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  
  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8003572:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003574:	2b82      	cmp	r3, #130	; 0x82
 8003576:	d109      	bne.n	800358c <SD_DMAReceiveCplt+0x1e>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003578:	6820      	ldr	r0, [r4, #0]
 800357a:	f000 ffa1 	bl	80044c0 <SDMMC_CmdStopTransfer>
    if(errorstate != HAL_SD_ERROR_NONE)
 800357e:	b128      	cbz	r0, 800358c <SD_DMAReceiveCplt+0x1e>
    {
      hsd->ErrorCode |= errorstate;
 8003580:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003582:	4318      	orrs	r0, r3
 8003584:	63a0      	str	r0, [r4, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8003586:	4620      	mov	r0, r4
 8003588:	f7ff fff0 	bl	800356c <HAL_SD_ErrorCallback>
    }
  }
  
  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800358c:	6823      	ldr	r3, [r4, #0]
 800358e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003590:	f022 0208 	bic.w	r2, r2, #8
 8003594:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003596:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800359a:	639a      	str	r2, [r3, #56]	; 0x38
  
  hsd->State = HAL_SD_STATE_READY;
 800359c:	2301      	movs	r3, #1
 800359e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80035a2:	4620      	mov	r0, r4
 80035a4:	f004 fb75 	bl	8007c92 <HAL_SD_RxCpltCallback>
 80035a8:	bd10      	pop	{r4, pc}

080035aa <HAL_SD_GetCardCSD>:
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 80035aa:	6e43      	ldr	r3, [r0, #100]	; 0x64
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 80035ac:	0f9a      	lsrs	r2, r3, #30
 80035ae:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 80035b0:	f3c3 6283 	ubfx	r2, r3, #26, #4
 80035b4:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1      = tmp & 0x03U;
 80035b6:	f3c3 6201 	ubfx	r2, r3, #24, #2
 80035ba:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)tmp;
 80035bc:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80035c0:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)tmp;
 80035c2:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 80035c6:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)tmp;
 80035c8:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 80035ca:	714b      	strb	r3, [r1, #5]
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 80035cc:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80035ce:	0e1a      	lsrs	r2, r3, #24
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
 80035d0:	0112      	lsls	r2, r2, #4
 80035d2:	80ca      	strh	r2, [r1, #6]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 80035d4:	88ca      	ldrh	r2, [r1, #6]
{
 80035d6:	b530      	push	{r4, r5, lr}
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 80035d8:	b292      	uxth	r2, r2
 80035da:	f3c3 5403 	ubfx	r4, r3, #20, #4
 80035de:	4322      	orrs	r2, r4
 80035e0:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 80035e2:	f3c3 4203 	ubfx	r2, r3, #16, #4
 80035e6:	720a      	strb	r2, [r1, #8]
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 80035e8:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 80035ec:	09d4      	lsrs	r4, r2, #7
 80035ee:	724c      	strb	r4, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 80035f0:	f3c2 1480 	ubfx	r4, r2, #6, #1
 80035f4:	728c      	strb	r4, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 80035f6:	f3c2 1440 	ubfx	r4, r2, #5, #1
 80035fa:	72cc      	strb	r4, [r1, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 80035fc:	f3c2 1400 	ubfx	r4, r2, #4, #1
 8003600:	730c      	strb	r4, [r1, #12]
  pCSD->Reserved2       = 0U; /*!< Reserved */
 8003602:	2400      	movs	r4, #0
 8003604:	734c      	strb	r4, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8003606:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003608:	2c00      	cmp	r4, #0
 800360a:	f040 8083 	bne.w	8003714 <HAL_SD_GetCardCSD+0x16a>
    pCSD->DeviceSize = (tmp & 0x03U) << 10U;
 800360e:	0292      	lsls	r2, r2, #10
 8003610:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8003614:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp) << 2U;
 8003616:	690a      	ldr	r2, [r1, #16]
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 800361e:	4313      	orrs	r3, r2
 8003620:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8003622:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 8003624:	690b      	ldr	r3, [r1, #16]
 8003626:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 800362a:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 800362c:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 8003630:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 8003632:	f3c2 6302 	ubfx	r3, r2, #24, #3
 8003636:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 8003638:	f3c2 5342 	ubfx	r3, r2, #21, #3
 800363c:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 800363e:	f3c2 4382 	ubfx	r3, r2, #18, #3
 8003642:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 8003644:	0bd3      	lsrs	r3, r2, #15
 8003646:	f003 0306 	and.w	r3, r3, #6
 800364a:	760b      	strb	r3, [r1, #24]
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 800364c:	7e0c      	ldrb	r4, [r1, #24]
 800364e:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8003652:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8003656:	4322      	orrs	r2, r4
 8003658:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800365a:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 800365c:	7e0c      	ldrb	r4, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800365e:	3201      	adds	r2, #1
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 8003660:	3402      	adds	r4, #2
 8003662:	40a2      	lsls	r2, r4
 8003664:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = 1U << (pCSD->RdBlockLen);
 8003666:	7a0d      	ldrb	r5, [r1, #8]
 8003668:	2401      	movs	r4, #1
 800366a:	40ac      	lsls	r4, r5
 800366c:	6584      	str	r4, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 800366e:	0a64      	lsrs	r4, r4, #9
 8003670:	4362      	muls	r2, r4
 8003672:	65c2      	str	r2, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003674:	f44f 7200 	mov.w	r2, #512	; 0x200
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 8003678:	6602      	str	r2, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 800367a:	f3c3 1280 	ubfx	r2, r3, #6, #1
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 800367e:	005b      	lsls	r3, r3, #1
 8003680:	f003 037e 	and.w	r3, r3, #126	; 0x7e
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 8003684:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 8003686:	768b      	strb	r3, [r1, #26]
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 8003688:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 800368a:	7e8a      	ldrb	r2, [r1, #26]
 800368c:	f3c3 14c0 	ubfx	r4, r3, #7, #1
 8003690:	4322      	orrs	r2, r4
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 8003692:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 8003696:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 8003698:	76cb      	strb	r3, [r1, #27]
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 800369a:	6f03      	ldr	r3, [r0, #112]	; 0x70
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 800369c:	0fda      	lsrs	r2, r3, #31
 800369e:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 80036a0:	f3c3 7241 	ubfx	r2, r3, #29, #2
 80036a4:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 80036a6:	f3c3 6282 	ubfx	r2, r3, #26, #3
 80036aa:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 80036ac:	0d9a      	lsrs	r2, r3, #22
 80036ae:	f002 020c 	and.w	r2, r2, #12
 80036b2:	77ca      	strb	r2, [r1, #31]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 80036b4:	7fca      	ldrb	r2, [r1, #31]
 80036b6:	f3c3 5081 	ubfx	r0, r3, #22, #2
 80036ba:	4302      	orrs	r2, r0
 80036bc:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 80036be:	f3c3 5240 	ubfx	r2, r3, #21, #1
 80036c2:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3           = 0U;
 80036c6:	2000      	movs	r0, #0
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 80036c8:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3           = 0U;
 80036cc:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 80036d0:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 80036d4:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 80036d8:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 80036dc:	f3c3 3280 	ubfx	r2, r3, #14, #1
 80036e0:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 80036e4:	f3c3 3240 	ubfx	r2, r3, #13, #1
 80036e8:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 80036ec:	f3c3 3200 	ubfx	r2, r3, #12, #1
 80036f0:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 80036f4:	f3c3 2281 	ubfx	r2, r3, #10, #2
 80036f8:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03U);
 80036fc:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 8003700:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC              = (tmp & 0x03U);
 8003704:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 8003708:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1U;
 800370c:	2301      	movs	r3, #1
 800370e:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
}
 8003712:	bd30      	pop	{r4, r5, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003714:	2c01      	cmp	r4, #1
 8003716:	d11a      	bne.n	800374e <HAL_SD_GetCardCSD+0x1a4>
    pCSD->DeviceSize = (tmp & 0x3FU) << 16U;
 8003718:	041b      	lsls	r3, r3, #16
 800371a:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800371e:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8003720:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    pCSD->DeviceSize |= (tmp << 8U);
 8003722:	690a      	ldr	r2, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8003724:	0e1c      	lsrs	r4, r3, #24
    pCSD->DeviceSize |= (tmp << 8U);
 8003726:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 800372a:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp);
 800372c:	690c      	ldr	r4, [r1, #16]
 800372e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8003732:	4322      	orrs	r2, r4
 8003734:	610a      	str	r2, [r1, #16]
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 8003736:	690a      	ldr	r2, [r1, #16]
 8003738:	0292      	lsls	r2, r2, #10
 800373a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800373e:	6542      	str	r2, [r0, #84]	; 0x54
 8003740:	65c2      	str	r2, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 8003742:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003746:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800374a:	6582      	str	r2, [r0, #88]	; 0x58
 800374c:	e794      	b.n	8003678 <HAL_SD_GetCardCSD+0xce>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);   
 800374e:	6803      	ldr	r3, [r0, #0]
 8003750:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003754:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003756:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800375c:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800375e:	2301      	movs	r3, #1
 8003760:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 8003764:	4618      	mov	r0, r3
 8003766:	bd30      	pop	{r4, r5, pc}

08003768 <HAL_SD_InitCard>:
{
 8003768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800376a:	b099      	sub	sp, #100	; 0x64
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800376c:	2500      	movs	r5, #0
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800376e:	2376      	movs	r3, #118	; 0x76
 8003770:	930c      	str	r3, [sp, #48]	; 0x30
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003772:	950a      	str	r5, [sp, #40]	; 0x28
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003774:	950b      	str	r5, [sp, #44]	; 0x2c
  SDIO_Init(hsd->Instance, Init);
 8003776:	ab0a      	add	r3, sp, #40	; 0x28
{
 8003778:	4604      	mov	r4, r0
  SDIO_Init(hsd->Instance, Init);
 800377a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800377e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
  __HAL_SD_DISABLE(hsd); 
 8003782:	4e6f      	ldr	r6, [pc, #444]	; (8003940 <HAL_SD_InitCard+0x1d8>)
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003784:	9507      	str	r5, [sp, #28]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003786:	9508      	str	r5, [sp, #32]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003788:	9509      	str	r5, [sp, #36]	; 0x24
  SDIO_Init(hsd->Instance, Init);
 800378a:	ab07      	add	r3, sp, #28
 800378c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800378e:	6820      	ldr	r0, [r4, #0]
 8003790:	f000 fd30 	bl	80041f4 <SDIO_Init>
  __HAL_SD_ENABLE(hsd);
 8003794:	2701      	movs	r7, #1
  __HAL_SD_DISABLE(hsd); 
 8003796:	6035      	str	r5, [r6, #0]
  SDIO_PowerState_ON(hsd->Instance);
 8003798:	6820      	ldr	r0, [r4, #0]
 800379a:	f000 fd4f 	bl	800423c <SDIO_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 800379e:	6037      	str	r7, [r6, #0]
  HAL_Delay(2U);
 80037a0:	2002      	movs	r0, #2
 80037a2:	f7fd fbf5 	bl	8000f90 <HAL_Delay>
  __IO uint32_t count = 0U;
  uint32_t response = 0U, validvoltage = 0U;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80037a6:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 80037a8:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80037aa:	f000 febb 	bl	8004524 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 80037ae:	4606      	mov	r6, r0
 80037b0:	b968      	cbnz	r0, 80037ce <HAL_SD_InitCard+0x66>
  {
    return errorstate;
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80037b2:	6820      	ldr	r0, [r4, #0]
 80037b4:	f000 fede 	bl	8004574 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 80037b8:	b380      	cbz	r0, 800381c <HAL_SD_InitCard+0xb4>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80037ba:	64a6      	str	r6, [r4, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80037bc:	f64f 75ff 	movw	r5, #65535	; 0xffff
 80037c0:	9b06      	ldr	r3, [sp, #24]
 80037c2:	1c5a      	adds	r2, r3, #1
 80037c4:	42ab      	cmp	r3, r5
 80037c6:	9206      	str	r2, [sp, #24]
 80037c8:	d108      	bne.n	80037dc <HAL_SD_InitCard+0x74>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80037ca:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
    hsd->State = HAL_SD_STATE_READY;
 80037ce:	2001      	movs	r0, #1
 80037d0:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80037d4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80037d6:	430e      	orrs	r6, r1
 80037d8:	63a6      	str	r6, [r4, #56]	; 0x38
    return HAL_ERROR;
 80037da:	e081      	b.n	80038e0 <HAL_SD_InitCard+0x178>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 80037dc:	2100      	movs	r1, #0
 80037de:	6820      	ldr	r0, [r4, #0]
 80037e0:	f000 ff00 	bl	80045e4 <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 80037e4:	4601      	mov	r1, r0
 80037e6:	b110      	cbz	r0, 80037ee <HAL_SD_InitCard+0x86>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80037e8:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 80037ec:	e7ef      	b.n	80037ce <HAL_SD_InitCard+0x66>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 80037ee:	6820      	ldr	r0, [r4, #0]
 80037f0:	f000 ff10 	bl	8004614 <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 80037f4:	4601      	mov	r1, r0
 80037f6:	2800      	cmp	r0, #0
 80037f8:	d1f6      	bne.n	80037e8 <HAL_SD_InitCard+0x80>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80037fa:	6820      	ldr	r0, [r4, #0]
 80037fc:	f000 fd39 	bl	8004272 <SDIO_GetResponse>
    while(validvoltage == 0U)
 8003800:	2800      	cmp	r0, #0
 8003802:	dadd      	bge.n	80037c0 <HAL_SD_InitCard+0x58>
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 8003804:	2300      	movs	r3, #0
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003806:	6463      	str	r3, [r4, #68]	; 0x44
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 8003808:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1U;
 800380a:	2301      	movs	r3, #1
 800380c:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 8003810:	f000 fd18 	bl	8004244 <SDIO_GetPowerState>
 8003814:	bb10      	cbnz	r0, 800385c <HAL_SD_InitCard+0xf4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003816:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 800381a:	e06b      	b.n	80038f4 <HAL_SD_InitCard+0x18c>
    hsd->SdCard.CardVersion = CARD_V2_X;
 800381c:	64a7      	str	r7, [r4, #72]	; 0x48
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800381e:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8003822:	9b06      	ldr	r3, [sp, #24]
 8003824:	1c5a      	adds	r2, r3, #1
 8003826:	42ab      	cmp	r3, r5
 8003828:	9206      	str	r2, [sp, #24]
 800382a:	d0ce      	beq.n	80037ca <HAL_SD_InitCard+0x62>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 800382c:	2100      	movs	r1, #0
 800382e:	6820      	ldr	r0, [r4, #0]
 8003830:	f000 fed8 	bl	80045e4 <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8003834:	4606      	mov	r6, r0
 8003836:	2800      	cmp	r0, #0
 8003838:	d1c9      	bne.n	80037ce <HAL_SD_InitCard+0x66>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 800383a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800383e:	6820      	ldr	r0, [r4, #0]
 8003840:	f000 fee8 	bl	8004614 <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8003844:	4606      	mov	r6, r0
 8003846:	2800      	cmp	r0, #0
 8003848:	d1c1      	bne.n	80037ce <HAL_SD_InitCard+0x66>
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800384a:	4601      	mov	r1, r0
 800384c:	6820      	ldr	r0, [r4, #0]
 800384e:	f000 fd10 	bl	8004272 <SDIO_GetResponse>
    while(validvoltage == 0U)
 8003852:	0fc3      	lsrs	r3, r0, #31
 8003854:	d0e5      	beq.n	8003822 <HAL_SD_InitCard+0xba>
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003856:	0042      	lsls	r2, r0, #1
 8003858:	d5d4      	bpl.n	8003804 <HAL_SD_InitCard+0x9c>
 800385a:	e7d4      	b.n	8003806 <HAL_SD_InitCard+0x9e>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800385c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800385e:	2b03      	cmp	r3, #3
 8003860:	d01a      	beq.n	8003898 <HAL_SD_InitCard+0x130>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003862:	6820      	ldr	r0, [r4, #0]
 8003864:	f000 feef 	bl	8004646 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003868:	4605      	mov	r5, r0
 800386a:	2800      	cmp	r0, #0
 800386c:	d142      	bne.n	80038f4 <HAL_SD_InitCard+0x18c>
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800386e:	4601      	mov	r1, r0
 8003870:	6820      	ldr	r0, [r4, #0]
 8003872:	f000 fcfe 	bl	8004272 <SDIO_GetResponse>
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003876:	2104      	movs	r1, #4
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003878:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800387a:	6820      	ldr	r0, [r4, #0]
 800387c:	f000 fcf9 	bl	8004272 <SDIO_GetResponse>
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003880:	2108      	movs	r1, #8
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003882:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003884:	6820      	ldr	r0, [r4, #0]
 8003886:	f000 fcf4 	bl	8004272 <SDIO_GetResponse>
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800388a:	210c      	movs	r1, #12
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800388c:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800388e:	6820      	ldr	r0, [r4, #0]
 8003890:	f000 fcef 	bl	8004272 <SDIO_GetResponse>
 8003894:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8003898:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800389a:	2b03      	cmp	r3, #3
 800389c:	d122      	bne.n	80038e4 <HAL_SD_InitCard+0x17c>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800389e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80038a0:	2b03      	cmp	r3, #3
 80038a2:	d12e      	bne.n	8003902 <HAL_SD_InitCard+0x19a>
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80038a4:	2104      	movs	r1, #4
 80038a6:	6820      	ldr	r0, [r4, #0]
 80038a8:	f000 fce3 	bl	8004272 <SDIO_GetResponse>
 80038ac:	0d00      	lsrs	r0, r0, #20
 80038ae:	64e0      	str	r0, [r4, #76]	; 0x4c
  HAL_SD_GetCardCSD(hsd, &CSD);
 80038b0:	a90d      	add	r1, sp, #52	; 0x34
 80038b2:	4620      	mov	r0, r4
 80038b4:	f7ff fe79 	bl	80035aa <HAL_SD_GetCardCSD>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80038b8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80038ba:	6820      	ldr	r0, [r4, #0]
 80038bc:	0412      	lsls	r2, r2, #16
 80038be:	2300      	movs	r3, #0
 80038c0:	f000 fe18 	bl	80044f4 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 80038c4:	4605      	mov	r5, r0
 80038c6:	b9a8      	cbnz	r0, 80038f4 <HAL_SD_InitCard+0x18c>
  SDIO_Init(hsd->Instance, hsd->Init);
 80038c8:	f104 0310 	add.w	r3, r4, #16
 80038cc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80038d0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80038d4:	1d23      	adds	r3, r4, #4
 80038d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038d8:	6820      	ldr	r0, [r4, #0]
 80038da:	f000 fc8b 	bl	80041f4 <SDIO_Init>
  return HAL_OK;
 80038de:	4628      	mov	r0, r5
}
 80038e0:	b019      	add	sp, #100	; 0x64
 80038e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80038e4:	f10d 0116 	add.w	r1, sp, #22
 80038e8:	6820      	ldr	r0, [r4, #0]
 80038ea:	f000 fed7 	bl	800469c <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 80038ee:	4605      	mov	r5, r0
 80038f0:	2800      	cmp	r0, #0
 80038f2:	d0d4      	beq.n	800389e <HAL_SD_InitCard+0x136>
    hsd->State = HAL_SD_STATE_READY;
 80038f4:	2001      	movs	r0, #1
 80038f6:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80038fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80038fc:	431d      	orrs	r5, r3
 80038fe:	63a5      	str	r5, [r4, #56]	; 0x38
 8003900:	e7ee      	b.n	80038e0 <HAL_SD_InitCard+0x178>
    hsd->SdCard.RelCardAdd = sd_rca;
 8003902:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8003906:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003908:	6820      	ldr	r0, [r4, #0]
 800390a:	0409      	lsls	r1, r1, #16
 800390c:	f000 feb0 	bl	8004670 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003910:	4605      	mov	r5, r0
 8003912:	2800      	cmp	r0, #0
 8003914:	d1ee      	bne.n	80038f4 <HAL_SD_InitCard+0x18c>
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003916:	4601      	mov	r1, r0
 8003918:	6820      	ldr	r0, [r4, #0]
 800391a:	f000 fcaa 	bl	8004272 <SDIO_GetResponse>
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800391e:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003920:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003922:	6820      	ldr	r0, [r4, #0]
 8003924:	f000 fca5 	bl	8004272 <SDIO_GetResponse>
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003928:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800392a:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800392c:	6820      	ldr	r0, [r4, #0]
 800392e:	f000 fca0 	bl	8004272 <SDIO_GetResponse>
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003932:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003934:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003936:	6820      	ldr	r0, [r4, #0]
 8003938:	f000 fc9b 	bl	8004272 <SDIO_GetResponse>
 800393c:	6720      	str	r0, [r4, #112]	; 0x70
 800393e:	e7b1      	b.n	80038a4 <HAL_SD_InitCard+0x13c>
 8003940:	422580a0 	.word	0x422580a0

08003944 <HAL_SD_Init>:
{
 8003944:	b510      	push	{r4, lr}
  if(hsd == NULL)
 8003946:	4604      	mov	r4, r0
 8003948:	b1a0      	cbz	r0, 8003974 <HAL_SD_Init+0x30>
  if(hsd->State == HAL_SD_STATE_RESET)
 800394a:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800394e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003952:	b913      	cbnz	r3, 800395a <HAL_SD_Init+0x16>
    hsd->Lock = HAL_UNLOCKED;
 8003954:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 8003956:	f006 fbc1 	bl	800a0dc <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 800395a:	2303      	movs	r3, #3
 800395c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  HAL_SD_InitCard(hsd);
 8003960:	4620      	mov	r0, r4
 8003962:	f7ff ff01 	bl	8003768 <HAL_SD_InitCard>
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8003966:	2000      	movs	r0, #0
  hsd->State = HAL_SD_STATE_READY;
 8003968:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800396a:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 800396c:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 800396e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8003972:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003974:	2001      	movs	r0, #1
}
 8003976:	bd10      	pop	{r4, pc}

08003978 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003978:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800397a:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800397c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800397e:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003980:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003982:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003984:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003986:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003988:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800398a:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800398c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800398e:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003990:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8003992:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003994:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8003996:	61cb      	str	r3, [r1, #28]
}
 8003998:	2000      	movs	r0, #0
 800399a:	4770      	bx	lr

0800399c <HAL_SD_GetCardState>:
  {
    return HAL_SD_ERROR_PARAM;
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800399c:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 800399e:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80039a0:	0409      	lsls	r1, r1, #16
{
 80039a2:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80039a4:	6800      	ldr	r0, [r0, #0]
 80039a6:	f000 fecd 	bl	8004744 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_OK)
 80039aa:	4601      	mov	r1, r0
 80039ac:	b928      	cbnz	r0, 80039ba <HAL_SD_GetCardState+0x1e>
  {
    return errorstate;
  }
  
  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80039ae:	6820      	ldr	r0, [r4, #0]
 80039b0:	f000 fc5f 	bl	8004272 <SDIO_GetResponse>
  return cardstate;
 80039b4:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 80039b8:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 80039ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80039bc:	4319      	orrs	r1, r3
 80039be:	63a1      	str	r1, [r4, #56]	; 0x38
  uint32_t resp1 = 0;
 80039c0:	2000      	movs	r0, #0
 80039c2:	e7f7      	b.n	80039b4 <HAL_SD_GetCardState+0x18>

080039c4 <SD_DMAError>:
{
 80039c4:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80039c6:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if((hsd->hdmarx->ErrorCode == HAL_DMA_ERROR_TE) || (hsd->hdmatx->ErrorCode == HAL_DMA_ERROR_TE))
 80039c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80039ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d003      	beq.n	80039d8 <SD_DMAError+0x14>
 80039d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80039d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d11b      	bne.n	8003a10 <SD_DMAError+0x4c>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80039d8:	6823      	ldr	r3, [r4, #0]
 80039da:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80039de:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80039e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039e2:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80039e6:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80039e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80039ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80039ee:	63a3      	str	r3, [r4, #56]	; 0x38
    CardState = HAL_SD_GetCardState(hsd);
 80039f0:	4620      	mov	r0, r4
 80039f2:	f7ff ffd3 	bl	800399c <HAL_SD_GetCardState>
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80039f6:	3805      	subs	r0, #5
 80039f8:	b2c0      	uxtb	r0, r0
 80039fa:	2801      	cmp	r0, #1
 80039fc:	d805      	bhi.n	8003a0a <SD_DMAError+0x46>
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80039fe:	6820      	ldr	r0, [r4, #0]
 8003a00:	f000 fd5e 	bl	80044c0 <SDMMC_CmdStopTransfer>
 8003a04:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003a06:	4318      	orrs	r0, r3
 8003a08:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State= HAL_SD_STATE_READY;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  HAL_SD_ErrorCallback(hsd);
 8003a10:	4620      	mov	r0, r4
 8003a12:	f7ff fdab 	bl	800356c <HAL_SD_ErrorCallback>
 8003a16:	bd10      	pop	{r4, pc}

08003a18 <SD_DMATxAbort>:
{
 8003a18:	b538      	push	{r3, r4, r5, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003a1a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(hsd->hdmatx != NULL)
 8003a1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a1e:	b10b      	cbz	r3, 8003a24 <SD_DMATxAbort+0xc>
    hsd->hdmatx = NULL;
 8003a20:	2300      	movs	r3, #0
 8003a22:	6423      	str	r3, [r4, #64]	; 0x40
  if(hsd->hdmarx == NULL)
 8003a24:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8003a26:	b9c5      	cbnz	r5, 8003a5a <SD_DMATxAbort+0x42>
    CardState = HAL_SD_GetCardState(hsd);
 8003a28:	4620      	mov	r0, r4
 8003a2a:	f7ff ffb7 	bl	800399c <HAL_SD_GetCardState>
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003a2e:	3805      	subs	r0, #5
    hsd->State = HAL_SD_STATE_READY;
 8003a30:	2301      	movs	r3, #1
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003a32:	b2c0      	uxtb	r0, r0
 8003a34:	4298      	cmp	r0, r3
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003a36:	63a5      	str	r5, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003a38:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003a3c:	d80d      	bhi.n	8003a5a <SD_DMATxAbort+0x42>
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003a3e:	6820      	ldr	r0, [r4, #0]
 8003a40:	f000 fd3e 	bl	80044c0 <SDMMC_CmdStopTransfer>
 8003a44:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003a46:	4318      	orrs	r0, r3
 8003a48:	63a0      	str	r0, [r4, #56]	; 0x38
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003a4a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        HAL_SD_AbortCallback(hsd);
 8003a4c:	4620      	mov	r0, r4
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003a4e:	b113      	cbz	r3, 8003a56 <SD_DMATxAbort+0x3e>
        HAL_SD_AbortCallback(hsd);
 8003a50:	f004 f917 	bl	8007c82 <HAL_SD_AbortCallback>
 8003a54:	bd38      	pop	{r3, r4, r5, pc}
        HAL_SD_ErrorCallback(hsd);
 8003a56:	f7ff fd89 	bl	800356c <HAL_SD_ErrorCallback>
 8003a5a:	bd38      	pop	{r3, r4, r5, pc}

08003a5c <SD_DMARxAbort>:
{
 8003a5c:	b538      	push	{r3, r4, r5, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003a5e:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(hsd->hdmarx != NULL)
 8003a60:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003a62:	b10b      	cbz	r3, 8003a68 <SD_DMARxAbort+0xc>
    hsd->hdmarx = NULL;
 8003a64:	2300      	movs	r3, #0
 8003a66:	63e3      	str	r3, [r4, #60]	; 0x3c
  if(hsd->hdmatx == NULL)
 8003a68:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8003a6a:	b9c5      	cbnz	r5, 8003a9e <SD_DMARxAbort+0x42>
    CardState = HAL_SD_GetCardState(hsd);
 8003a6c:	4620      	mov	r0, r4
 8003a6e:	f7ff ff95 	bl	800399c <HAL_SD_GetCardState>
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003a72:	3805      	subs	r0, #5
    hsd->State = HAL_SD_STATE_READY;
 8003a74:	2301      	movs	r3, #1
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003a76:	b2c0      	uxtb	r0, r0
 8003a78:	4298      	cmp	r0, r3
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003a7a:	63a5      	str	r5, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003a7c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003a80:	d80d      	bhi.n	8003a9e <SD_DMARxAbort+0x42>
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003a82:	6820      	ldr	r0, [r4, #0]
 8003a84:	f000 fd1c 	bl	80044c0 <SDMMC_CmdStopTransfer>
 8003a88:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003a8a:	4318      	orrs	r0, r3
 8003a8c:	63a0      	str	r0, [r4, #56]	; 0x38
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003a8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        HAL_SD_AbortCallback(hsd);
 8003a90:	4620      	mov	r0, r4
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003a92:	b113      	cbz	r3, 8003a9a <SD_DMARxAbort+0x3e>
        HAL_SD_AbortCallback(hsd);
 8003a94:	f004 f8f5 	bl	8007c82 <HAL_SD_AbortCallback>
 8003a98:	bd38      	pop	{r3, r4, r5, pc}
        HAL_SD_ErrorCallback(hsd);
 8003a9a:	f7ff fd67 	bl	800356c <HAL_SD_ErrorCallback>
 8003a9e:	bd38      	pop	{r3, r4, r5, pc}

08003aa0 <HAL_SD_IRQHandler>:
{
 8003aa0:	b570      	push	{r4, r5, r6, lr}
 8003aa2:	4604      	mov	r4, r0
  if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DATAEND) != RESET)
 8003aa4:	6800      	ldr	r0, [r0, #0]
 8003aa6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003aa8:	05da      	lsls	r2, r3, #23
 8003aaa:	d54f      	bpl.n	8003b4c <HAL_SD_IRQHandler+0xac>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND); 
 8003aac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ab0:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003ab2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8003ab4:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8003ab8:	f023 0302 	bic.w	r3, r3, #2
 8003abc:	63c3      	str	r3, [r0, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8003abe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003ac0:	f013 0f08 	tst.w	r3, #8
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 8003ac4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8003ac6:	d01e      	beq.n	8003b06 <HAL_SD_IRQHandler+0x66>
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 8003ac8:	079b      	lsls	r3, r3, #30
 8003aca:	d402      	bmi.n	8003ad2 <HAL_SD_IRQHandler+0x32>
 8003acc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003ace:	069e      	lsls	r6, r3, #26
 8003ad0:	d508      	bpl.n	8003ae4 <HAL_SD_IRQHandler+0x44>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003ad2:	f000 fcf5 	bl	80044c0 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8003ad6:	b128      	cbz	r0, 8003ae4 <HAL_SD_IRQHandler+0x44>
          hsd->ErrorCode |= errorstate;
 8003ad8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003ada:	4318      	orrs	r0, r3
 8003adc:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8003ade:	4620      	mov	r0, r4
 8003ae0:	f7ff fd44 	bl	800356c <HAL_SD_ErrorCallback>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003ae4:	6823      	ldr	r3, [r4, #0]
 8003ae6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003aea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003aec:	2301      	movs	r3, #1
 8003aee:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 8003af2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003af4:	07dd      	lsls	r5, r3, #31
        HAL_SD_RxCpltCallback(hsd);
 8003af6:	4620      	mov	r0, r4
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 8003af8:	d402      	bmi.n	8003b00 <HAL_SD_IRQHandler+0x60>
 8003afa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003afc:	079c      	lsls	r4, r3, #30
 8003afe:	d522      	bpl.n	8003b46 <HAL_SD_IRQHandler+0xa6>
        HAL_SD_RxCpltCallback(hsd);
 8003b00:	f004 f8c7 	bl	8007c92 <HAL_SD_RxCpltCallback>
 8003b04:	bd70      	pop	{r4, r5, r6, pc}
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 8003b06:	0619      	lsls	r1, r3, #24
 8003b08:	f140 80a5 	bpl.w	8003c56 <HAL_SD_IRQHandler+0x1b6>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 8003b0c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003b0e:	069a      	lsls	r2, r3, #26
 8003b10:	d508      	bpl.n	8003b24 <HAL_SD_IRQHandler+0x84>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003b12:	f000 fcd5 	bl	80044c0 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8003b16:	b128      	cbz	r0, 8003b24 <HAL_SD_IRQHandler+0x84>
          hsd->ErrorCode |= errorstate;
 8003b18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003b1a:	4318      	orrs	r0, r3
 8003b1c:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8003b1e:	4620      	mov	r0, r4
 8003b20:	f7ff fd24 	bl	800356c <HAL_SD_ErrorCallback>
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) == RESET) && ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == RESET))
 8003b24:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003b26:	07db      	lsls	r3, r3, #31
 8003b28:	f100 8095 	bmi.w	8003c56 <HAL_SD_IRQHandler+0x1b6>
 8003b2c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003b2e:	079e      	lsls	r6, r3, #30
 8003b30:	f100 8091 	bmi.w	8003c56 <HAL_SD_IRQHandler+0x1b6>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003b34:	6822      	ldr	r2, [r4, #0]
 8003b36:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003b38:	f023 0308 	bic.w	r3, r3, #8
 8003b3c:	62d3      	str	r3, [r2, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003b44:	4620      	mov	r0, r4
 8003b46:	f004 f8a0 	bl	8007c8a <HAL_SD_TxCpltCallback>
 8003b4a:	bd70      	pop	{r4, r5, r6, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXFIFOHE) != RESET)
 8003b4c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003b4e:	045d      	lsls	r5, r3, #17
 8003b50:	d510      	bpl.n	8003b74 <HAL_SD_IRQHandler+0xd4>
static HAL_StatusTypeDef SD_Write_IT(SD_HandleTypeDef *hsd)
{
  uint32_t count = 0U;
  uint32_t* tmp;
  
  tmp = (uint32_t*)hsd->pTxBuffPtr;
 8003b52:	6a25      	ldr	r5, [r4, #32]
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_TXFIFOHE);
 8003b54:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003b58:	6383      	str	r3, [r0, #56]	; 0x38
 8003b5a:	f105 0620 	add.w	r6, r5, #32
  
  /* Write data to SDIO Tx FIFO */
  for(count = 0U; count < 8U; count++)
  {
    SDIO_WriteFIFO(hsd->Instance, (tmp + count));
 8003b5e:	4629      	mov	r1, r5
 8003b60:	6820      	ldr	r0, [r4, #0]
 8003b62:	3504      	adds	r5, #4
 8003b64:	f000 fb65 	bl	8004232 <SDIO_WriteFIFO>
  for(count = 0U; count < 8U; count++)
 8003b68:	42ae      	cmp	r6, r5
 8003b6a:	d1f8      	bne.n	8003b5e <HAL_SD_IRQHandler+0xbe>
  }
  
  hsd->pTxBuffPtr += 8U;
 8003b6c:	6a23      	ldr	r3, [r4, #32]
 8003b6e:	3320      	adds	r3, #32
 8003b70:	6223      	str	r3, [r4, #32]
 8003b72:	bd70      	pop	{r4, r5, r6, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXFIFOHF) != RESET)
 8003b74:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003b76:	0419      	lsls	r1, r3, #16
 8003b78:	d510      	bpl.n	8003b9c <HAL_SD_IRQHandler+0xfc>
  tmp = (uint32_t*)hsd->pRxBuffPtr;
 8003b7a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXFIFOHF);
 8003b7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b80:	1f2e      	subs	r6, r5, #4
 8003b82:	6383      	str	r3, [r0, #56]	; 0x38
 8003b84:	351c      	adds	r5, #28
    *(tmp + count) = SDIO_ReadFIFO(hsd->Instance);
 8003b86:	6820      	ldr	r0, [r4, #0]
 8003b88:	f000 fb50 	bl	800422c <SDIO_ReadFIFO>
 8003b8c:	f846 0f04 	str.w	r0, [r6, #4]!
  for(count = 0U; count < 8U; count++)
 8003b90:	42b5      	cmp	r5, r6
 8003b92:	d1f8      	bne.n	8003b86 <HAL_SD_IRQHandler+0xe6>
  hsd->pRxBuffPtr += 8U;
 8003b94:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003b96:	3320      	adds	r3, #32
 8003b98:	62a3      	str	r3, [r4, #40]	; 0x28
 8003b9a:	bd70      	pop	{r4, r5, r6, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR) != RESET)
 8003b9c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8003b9e:	f240 233a 	movw	r3, #570	; 0x23a
 8003ba2:	421a      	tst	r2, r3
 8003ba4:	d057      	beq.n	8003c56 <HAL_SD_IRQHandler+0x1b6>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DCRCFAIL) != RESET)
 8003ba6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003ba8:	079a      	lsls	r2, r3, #30
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL; 
 8003baa:	bf42      	ittt	mi
 8003bac:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 8003bae:	f043 0302 	orrmi.w	r3, r3, #2
 8003bb2:	63a3      	strmi	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_DTIMEOUT) != RESET)
 8003bb4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003bb6:	071b      	lsls	r3, r3, #28
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT; 
 8003bb8:	bf42      	ittt	mi
 8003bba:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 8003bbc:	f043 0308 	orrmi.w	r3, r3, #8
 8003bc0:	63a3      	strmi	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_RXOVERR) != RESET)
 8003bc2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003bc4:	069e      	lsls	r6, r3, #26
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN; 
 8003bc6:	bf42      	ittt	mi
 8003bc8:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 8003bca:	f043 0320 	orrmi.w	r3, r3, #32
 8003bce:	63a3      	strmi	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_TXUNDERR) != RESET)
 8003bd0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003bd2:	06dd      	lsls	r5, r3, #27
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN; 
 8003bd4:	bf42      	ittt	mi
 8003bd6:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 8003bd8:	f043 0310 	orrmi.w	r3, r3, #16
 8003bdc:	63a3      	strmi	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_IT_STBITERR) != RESET)
 8003bde:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003be0:	0599      	lsls	r1, r3, #22
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003be2:	bf42      	ittt	mi
 8003be4:	6ba3      	ldrmi	r3, [r4, #56]	; 0x38
 8003be6:	f043 0308 	orrmi.w	r3, r3, #8
 8003bea:	63a3      	strmi	r3, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS | SDIO_FLAG_STBITERR);
 8003bec:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003bf0:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003bf2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8003bf4:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8003bf8:	f023 0302 	bic.w	r3, r3, #2
 8003bfc:	63c3      	str	r3, [r0, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 8003bfe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003c00:	061a      	lsls	r2, r3, #24
 8003c02:	d51f      	bpl.n	8003c44 <HAL_SD_IRQHandler+0x1a4>
      if(hsd->hdmatx != NULL)
 8003c04:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003c06:	b148      	cbz	r0, 8003c1c <HAL_SD_IRQHandler+0x17c>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8003c08:	4b13      	ldr	r3, [pc, #76]	; (8003c58 <HAL_SD_IRQHandler+0x1b8>)
 8003c0a:	6503      	str	r3, [r0, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003c0c:	f7fd fc4c 	bl	80014a8 <HAL_DMA_Abort_IT>
 8003c10:	b308      	cbz	r0, 8003c56 <HAL_SD_IRQHandler+0x1b6>
          SD_DMATxAbort(hsd->hdmatx);
 8003c12:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
 8003c14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          SD_DMATxAbort(hsd->hdmatx);
 8003c18:	f7ff befe 	b.w	8003a18 <SD_DMATxAbort>
      else if(hsd->hdmarx != NULL)
 8003c1c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003c1e:	b148      	cbz	r0, 8003c34 <HAL_SD_IRQHandler+0x194>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8003c20:	4b0e      	ldr	r3, [pc, #56]	; (8003c5c <HAL_SD_IRQHandler+0x1bc>)
 8003c22:	6503      	str	r3, [r0, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003c24:	f7fd fc40 	bl	80014a8 <HAL_DMA_Abort_IT>
 8003c28:	b1a8      	cbz	r0, 8003c56 <HAL_SD_IRQHandler+0x1b6>
          SD_DMARxAbort(hsd->hdmarx);
 8003c2a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
 8003c2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          SD_DMARxAbort(hsd->hdmarx);
 8003c30:	f7ff bf14 	b.w	8003a5c <SD_DMARxAbort>
        hsd->State = HAL_SD_STATE_READY;
 8003c34:	2301      	movs	r3, #1
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003c36:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003c38:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        HAL_SD_AbortCallback(hsd);
 8003c3c:	4620      	mov	r0, r4
 8003c3e:	f004 f820 	bl	8007c82 <HAL_SD_AbortCallback>
 8003c42:	bd70      	pop	{r4, r5, r6, pc}
    else if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8003c44:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003c46:	071b      	lsls	r3, r3, #28
 8003c48:	d505      	bpl.n	8003c56 <HAL_SD_IRQHandler+0x1b6>
      hsd->State = HAL_SD_STATE_READY;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      HAL_SD_ErrorCallback(hsd);
 8003c50:	4620      	mov	r0, r4
 8003c52:	f7ff fc8b 	bl	800356c <HAL_SD_ErrorCallback>
 8003c56:	bd70      	pop	{r4, r5, r6, pc}
 8003c58:	08003a19 	.word	0x08003a19
 8003c5c:	08003a5d 	.word	0x08003a5d

08003c60 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c60:	6803      	ldr	r3, [r0, #0]
 8003c62:	68da      	ldr	r2, [r3, #12]
 8003c64:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003c68:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c6a:	695a      	ldr	r2, [r3, #20]
 8003c6c:	f022 0201 	bic.w	r2, r2, #1
 8003c70:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c72:	2320      	movs	r3, #32
 8003c74:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8003c78:	4770      	bx	lr
	...

08003c7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c80:	6806      	ldr	r6, [r0, #0]
 8003c82:	68c2      	ldr	r2, [r0, #12]
 8003c84:	6933      	ldr	r3, [r6, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c86:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c88:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	6133      	str	r3, [r6, #16]
{
 8003c90:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c92:	6883      	ldr	r3, [r0, #8]
 8003c94:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8003c96:	68f2      	ldr	r2, [r6, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c98:	4303      	orrs	r3, r0
 8003c9a:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8003c9c:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ca0:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8003ca2:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ca6:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1,
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cac:	6973      	ldr	r3, [r6, #20]
 8003cae:	69a2      	ldr	r2, [r4, #24]
 8003cb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cb4:	4313      	orrs	r3, r2

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cb6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cba:	6173      	str	r3, [r6, #20]
 8003cbc:	4b7a      	ldr	r3, [pc, #488]	; (8003ea8 <UART_SetConfig+0x22c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cbe:	d17c      	bne.n	8003dba <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003cc0:	429e      	cmp	r6, r3
 8003cc2:	d003      	beq.n	8003ccc <UART_SetConfig+0x50>
 8003cc4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cc8:	429e      	cmp	r6, r3
 8003cca:	d144      	bne.n	8003d56 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003ccc:	f7ff fb2a 	bl	8003324 <HAL_RCC_GetPCLK2Freq>
 8003cd0:	2519      	movs	r5, #25
 8003cd2:	fb05 f300 	mul.w	r3, r5, r0
 8003cd6:	6860      	ldr	r0, [r4, #4]
 8003cd8:	f04f 0964 	mov.w	r9, #100	; 0x64
 8003cdc:	0040      	lsls	r0, r0, #1
 8003cde:	fbb3 f3f0 	udiv	r3, r3, r0
 8003ce2:	fbb3 f3f9 	udiv	r3, r3, r9
 8003ce6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003cea:	f7ff fb1b 	bl	8003324 <HAL_RCC_GetPCLK2Freq>
 8003cee:	6863      	ldr	r3, [r4, #4]
 8003cf0:	4368      	muls	r0, r5
 8003cf2:	005b      	lsls	r3, r3, #1
 8003cf4:	fbb0 f7f3 	udiv	r7, r0, r3
 8003cf8:	f7ff fb14 	bl	8003324 <HAL_RCC_GetPCLK2Freq>
 8003cfc:	6863      	ldr	r3, [r4, #4]
 8003cfe:	4368      	muls	r0, r5
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d06:	fbb3 f3f9 	udiv	r3, r3, r9
 8003d0a:	fb09 7313 	mls	r3, r9, r3, r7
 8003d0e:	00db      	lsls	r3, r3, #3
 8003d10:	3332      	adds	r3, #50	; 0x32
 8003d12:	fbb3 f3f9 	udiv	r3, r3, r9
 8003d16:	005b      	lsls	r3, r3, #1
 8003d18:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8003d1c:	f7ff fb02 	bl	8003324 <HAL_RCC_GetPCLK2Freq>
 8003d20:	6862      	ldr	r2, [r4, #4]
 8003d22:	4368      	muls	r0, r5
 8003d24:	0052      	lsls	r2, r2, #1
 8003d26:	fbb0 faf2 	udiv	sl, r0, r2
 8003d2a:	f7ff fafb 	bl	8003324 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003d2e:	6863      	ldr	r3, [r4, #4]
 8003d30:	4368      	muls	r0, r5
 8003d32:	005b      	lsls	r3, r3, #1
 8003d34:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d38:	fbb3 f3f9 	udiv	r3, r3, r9
 8003d3c:	fb09 a313 	mls	r3, r9, r3, sl
 8003d40:	00db      	lsls	r3, r3, #3
 8003d42:	3332      	adds	r3, #50	; 0x32
 8003d44:	fbb3 f3f9 	udiv	r3, r3, r9
 8003d48:	f003 0307 	and.w	r3, r3, #7
 8003d4c:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003d4e:	443b      	add	r3, r7
 8003d50:	60b3      	str	r3, [r6, #8]
 8003d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003d56:	f7ff fad5 	bl	8003304 <HAL_RCC_GetPCLK1Freq>
 8003d5a:	2519      	movs	r5, #25
 8003d5c:	fb05 f300 	mul.w	r3, r5, r0
 8003d60:	6860      	ldr	r0, [r4, #4]
 8003d62:	f04f 0964 	mov.w	r9, #100	; 0x64
 8003d66:	0040      	lsls	r0, r0, #1
 8003d68:	fbb3 f3f0 	udiv	r3, r3, r0
 8003d6c:	fbb3 f3f9 	udiv	r3, r3, r9
 8003d70:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003d74:	f7ff fac6 	bl	8003304 <HAL_RCC_GetPCLK1Freq>
 8003d78:	6863      	ldr	r3, [r4, #4]
 8003d7a:	4368      	muls	r0, r5
 8003d7c:	005b      	lsls	r3, r3, #1
 8003d7e:	fbb0 f7f3 	udiv	r7, r0, r3
 8003d82:	f7ff fabf 	bl	8003304 <HAL_RCC_GetPCLK1Freq>
 8003d86:	6863      	ldr	r3, [r4, #4]
 8003d88:	4368      	muls	r0, r5
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d90:	fbb3 f3f9 	udiv	r3, r3, r9
 8003d94:	fb09 7313 	mls	r3, r9, r3, r7
 8003d98:	00db      	lsls	r3, r3, #3
 8003d9a:	3332      	adds	r3, #50	; 0x32
 8003d9c:	fbb3 f3f9 	udiv	r3, r3, r9
 8003da0:	005b      	lsls	r3, r3, #1
 8003da2:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8003da6:	f7ff faad 	bl	8003304 <HAL_RCC_GetPCLK1Freq>
 8003daa:	6862      	ldr	r2, [r4, #4]
 8003dac:	4368      	muls	r0, r5
 8003dae:	0052      	lsls	r2, r2, #1
 8003db0:	fbb0 faf2 	udiv	sl, r0, r2
 8003db4:	f7ff faa6 	bl	8003304 <HAL_RCC_GetPCLK1Freq>
 8003db8:	e7b9      	b.n	8003d2e <UART_SetConfig+0xb2>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003dba:	429e      	cmp	r6, r3
 8003dbc:	d002      	beq.n	8003dc4 <UART_SetConfig+0x148>
 8003dbe:	4b3b      	ldr	r3, [pc, #236]	; (8003eac <UART_SetConfig+0x230>)
 8003dc0:	429e      	cmp	r6, r3
 8003dc2:	d140      	bne.n	8003e46 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003dc4:	f7ff faae 	bl	8003324 <HAL_RCC_GetPCLK2Freq>
 8003dc8:	6867      	ldr	r7, [r4, #4]
 8003dca:	2519      	movs	r5, #25
 8003dcc:	f04f 0964 	mov.w	r9, #100	; 0x64
 8003dd0:	fb05 f300 	mul.w	r3, r5, r0
 8003dd4:	00bf      	lsls	r7, r7, #2
 8003dd6:	fbb3 f3f7 	udiv	r3, r3, r7
 8003dda:	fbb3 f3f9 	udiv	r3, r3, r9
 8003dde:	011f      	lsls	r7, r3, #4
 8003de0:	f7ff faa0 	bl	8003324 <HAL_RCC_GetPCLK2Freq>
 8003de4:	6863      	ldr	r3, [r4, #4]
 8003de6:	4368      	muls	r0, r5
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	fbb0 f8f3 	udiv	r8, r0, r3
 8003dee:	f7ff fa99 	bl	8003324 <HAL_RCC_GetPCLK2Freq>
 8003df2:	6863      	ldr	r3, [r4, #4]
 8003df4:	4368      	muls	r0, r5
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dfc:	fbb3 f3f9 	udiv	r3, r3, r9
 8003e00:	fb09 8313 	mls	r3, r9, r3, r8
 8003e04:	011b      	lsls	r3, r3, #4
 8003e06:	3332      	adds	r3, #50	; 0x32
 8003e08:	fbb3 f3f9 	udiv	r3, r3, r9
 8003e0c:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8003e10:	f7ff fa88 	bl	8003324 <HAL_RCC_GetPCLK2Freq>
 8003e14:	6862      	ldr	r2, [r4, #4]
 8003e16:	4368      	muls	r0, r5
 8003e18:	0092      	lsls	r2, r2, #2
 8003e1a:	fbb0 faf2 	udiv	sl, r0, r2
 8003e1e:	f7ff fa81 	bl	8003324 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003e22:	6863      	ldr	r3, [r4, #4]
 8003e24:	4368      	muls	r0, r5
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e2c:	fbb3 f3f9 	udiv	r3, r3, r9
 8003e30:	fb09 a313 	mls	r3, r9, r3, sl
 8003e34:	011b      	lsls	r3, r3, #4
 8003e36:	3332      	adds	r3, #50	; 0x32
 8003e38:	fbb3 f3f9 	udiv	r3, r3, r9
 8003e3c:	f003 030f 	and.w	r3, r3, #15
 8003e40:	ea43 0308 	orr.w	r3, r3, r8
 8003e44:	e783      	b.n	8003d4e <UART_SetConfig+0xd2>
 8003e46:	f7ff fa5d 	bl	8003304 <HAL_RCC_GetPCLK1Freq>
 8003e4a:	6867      	ldr	r7, [r4, #4]
 8003e4c:	2519      	movs	r5, #25
 8003e4e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8003e52:	fb05 f300 	mul.w	r3, r5, r0
 8003e56:	00bf      	lsls	r7, r7, #2
 8003e58:	fbb3 f3f7 	udiv	r3, r3, r7
 8003e5c:	fbb3 f3f9 	udiv	r3, r3, r9
 8003e60:	011f      	lsls	r7, r3, #4
 8003e62:	f7ff fa4f 	bl	8003304 <HAL_RCC_GetPCLK1Freq>
 8003e66:	6863      	ldr	r3, [r4, #4]
 8003e68:	4368      	muls	r0, r5
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	fbb0 f8f3 	udiv	r8, r0, r3
 8003e70:	f7ff fa48 	bl	8003304 <HAL_RCC_GetPCLK1Freq>
 8003e74:	6863      	ldr	r3, [r4, #4]
 8003e76:	4368      	muls	r0, r5
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e7e:	fbb3 f3f9 	udiv	r3, r3, r9
 8003e82:	fb09 8313 	mls	r3, r9, r3, r8
 8003e86:	011b      	lsls	r3, r3, #4
 8003e88:	3332      	adds	r3, #50	; 0x32
 8003e8a:	fbb3 f3f9 	udiv	r3, r3, r9
 8003e8e:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8003e92:	f7ff fa37 	bl	8003304 <HAL_RCC_GetPCLK1Freq>
 8003e96:	6862      	ldr	r2, [r4, #4]
 8003e98:	4368      	muls	r0, r5
 8003e9a:	0092      	lsls	r2, r2, #2
 8003e9c:	fbb0 faf2 	udiv	sl, r0, r2
 8003ea0:	f7ff fa30 	bl	8003304 <HAL_RCC_GetPCLK1Freq>
 8003ea4:	e7bd      	b.n	8003e22 <UART_SetConfig+0x1a6>
 8003ea6:	bf00      	nop
 8003ea8:	40011000 	.word	0x40011000
 8003eac:	40011400 	.word	0x40011400

08003eb0 <HAL_UART_Init>:
{
 8003eb0:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003eb2:	4604      	mov	r4, r0
 8003eb4:	b340      	cbz	r0, 8003f08 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003eb6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003eba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003ebe:	b91b      	cbnz	r3, 8003ec8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8003ec0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8003ec4:	f006 f9ce 	bl	800a264 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8003ec8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003eca:	2324      	movs	r3, #36	; 0x24
 8003ecc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8003ed0:	68d3      	ldr	r3, [r2, #12]
 8003ed2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ed6:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003ed8:	4620      	mov	r0, r4
 8003eda:	f7ff fecf 	bl	8003c7c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ede:	6823      	ldr	r3, [r4, #0]
 8003ee0:	691a      	ldr	r2, [r3, #16]
 8003ee2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ee6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ee8:	695a      	ldr	r2, [r3, #20]
 8003eea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003eee:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8003ef0:	68da      	ldr	r2, [r3, #12]
 8003ef2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ef6:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ef8:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8003efa:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003efc:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003efe:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003f02:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8003f06:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003f08:	2001      	movs	r0, #1
}
 8003f0a:	bd10      	pop	{r4, pc}

08003f0c <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8003f0c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003f10:	2b20      	cmp	r3, #32
 8003f12:	d118      	bne.n	8003f46 <HAL_UART_Transmit_IT+0x3a>
    if ((pData == NULL) || (Size == 0U))
 8003f14:	b1a9      	cbz	r1, 8003f42 <HAL_UART_Transmit_IT+0x36>
 8003f16:	b1a2      	cbz	r2, 8003f42 <HAL_UART_Transmit_IT+0x36>
    __HAL_LOCK(huart);
 8003f18:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d012      	beq.n	8003f46 <HAL_UART_Transmit_IT+0x3a>
    huart->TxXferCount = Size;
 8003f20:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->pTxBuffPtr = pData;
 8003f22:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 8003f24:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f26:	2300      	movs	r3, #0
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003f28:	6801      	ldr	r1, [r0, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f2a:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f2c:	2221      	movs	r2, #33	; 0x21
 8003f2e:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003f32:	68ca      	ldr	r2, [r1, #12]
    __HAL_UNLOCK(huart);
 8003f34:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003f38:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f3c:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 8003f3e:	4618      	mov	r0, r3
 8003f40:	4770      	bx	lr
      return HAL_ERROR;
 8003f42:	2001      	movs	r0, #1
 8003f44:	4770      	bx	lr
    return HAL_BUSY;
 8003f46:	2002      	movs	r0, #2
}
 8003f48:	4770      	bx	lr

08003f4a <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f4a:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8003f4e:	2b20      	cmp	r3, #32
 8003f50:	d120      	bne.n	8003f94 <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 8003f52:	b1e9      	cbz	r1, 8003f90 <HAL_UART_Receive_IT+0x46>
 8003f54:	b1e2      	cbz	r2, 8003f90 <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 8003f56:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d01a      	beq.n	8003f94 <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 8003f5e:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 8003f60:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f62:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f64:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f66:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f68:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003f6c:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 8003f6e:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003f70:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 8003f72:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003f76:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8003f7a:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003f7c:	6951      	ldr	r1, [r2, #20]
 8003f7e:	f041 0101 	orr.w	r1, r1, #1
 8003f82:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003f84:	68d1      	ldr	r1, [r2, #12]
 8003f86:	f041 0120 	orr.w	r1, r1, #32
 8003f8a:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	4770      	bx	lr
      return HAL_ERROR;
 8003f90:	2001      	movs	r0, #1
 8003f92:	4770      	bx	lr
    return HAL_BUSY;
 8003f94:	2002      	movs	r0, #2
}
 8003f96:	4770      	bx	lr

08003f98 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f98:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8003f9c:	2b22      	cmp	r3, #34	; 0x22
{
 8003f9e:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003fa0:	d136      	bne.n	8004010 <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003fa2:	6883      	ldr	r3, [r0, #8]
 8003fa4:	6901      	ldr	r1, [r0, #16]
 8003fa6:	6802      	ldr	r2, [r0, #0]
 8003fa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fac:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003fae:	d123      	bne.n	8003ff8 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003fb0:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003fb2:	b9e9      	cbnz	r1, 8003ff0 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003fb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fb8:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8003fbc:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8003fbe:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8003fc0:	3c01      	subs	r4, #1
 8003fc2:	b2a4      	uxth	r4, r4
 8003fc4:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8003fc6:	b98c      	cbnz	r4, 8003fec <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003fc8:	6803      	ldr	r3, [r0, #0]
 8003fca:	68da      	ldr	r2, [r3, #12]
 8003fcc:	f022 0220 	bic.w	r2, r2, #32
 8003fd0:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003fd2:	68da      	ldr	r2, [r3, #12]
 8003fd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fd8:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003fda:	695a      	ldr	r2, [r3, #20]
 8003fdc:	f022 0201 	bic.w	r2, r2, #1
 8003fe0:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8003fe2:	2320      	movs	r3, #32
 8003fe4:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8003fe8:	f005 fb3c 	bl	8009664 <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 8003fec:	2000      	movs	r0, #0
}
 8003fee:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003ff0:	b2d2      	uxtb	r2, r2
 8003ff2:	f823 2b01 	strh.w	r2, [r3], #1
 8003ff6:	e7e1      	b.n	8003fbc <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003ff8:	b921      	cbnz	r1, 8004004 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ffa:	1c59      	adds	r1, r3, #1
 8003ffc:	6852      	ldr	r2, [r2, #4]
 8003ffe:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004000:	701a      	strb	r2, [r3, #0]
 8004002:	e7dc      	b.n	8003fbe <UART_Receive_IT+0x26>
 8004004:	6852      	ldr	r2, [r2, #4]
 8004006:	1c59      	adds	r1, r3, #1
 8004008:	6281      	str	r1, [r0, #40]	; 0x28
 800400a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800400e:	e7f7      	b.n	8004000 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8004010:	2002      	movs	r0, #2
 8004012:	bd10      	pop	{r4, pc}

08004014 <HAL_UART_ErrorCallback>:
 8004014:	4770      	bx	lr
	...

08004018 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004018:	6803      	ldr	r3, [r0, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800401c:	68d9      	ldr	r1, [r3, #12]
{
 800401e:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8004020:	0716      	lsls	r6, r2, #28
{
 8004022:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004024:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8004026:	d107      	bne.n	8004038 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004028:	0696      	lsls	r6, r2, #26
 800402a:	d55a      	bpl.n	80040e2 <HAL_UART_IRQHandler+0xca>
 800402c:	068d      	lsls	r5, r1, #26
 800402e:	d558      	bpl.n	80040e2 <HAL_UART_IRQHandler+0xca>
}
 8004030:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8004034:	f7ff bfb0 	b.w	8003f98 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004038:	f015 0501 	ands.w	r5, r5, #1
 800403c:	d102      	bne.n	8004044 <HAL_UART_IRQHandler+0x2c>
 800403e:	f411 7f90 	tst.w	r1, #288	; 0x120
 8004042:	d04e      	beq.n	80040e2 <HAL_UART_IRQHandler+0xca>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004044:	07d3      	lsls	r3, r2, #31
 8004046:	d505      	bpl.n	8004054 <HAL_UART_IRQHandler+0x3c>
 8004048:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800404a:	bf42      	ittt	mi
 800404c:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 800404e:	f043 0301 	orrmi.w	r3, r3, #1
 8004052:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004054:	0750      	lsls	r0, r2, #29
 8004056:	d504      	bpl.n	8004062 <HAL_UART_IRQHandler+0x4a>
 8004058:	b11d      	cbz	r5, 8004062 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800405a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800405c:	f043 0302 	orr.w	r3, r3, #2
 8004060:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004062:	0793      	lsls	r3, r2, #30
 8004064:	d504      	bpl.n	8004070 <HAL_UART_IRQHandler+0x58>
 8004066:	b11d      	cbz	r5, 8004070 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004068:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800406a:	f043 0304 	orr.w	r3, r3, #4
 800406e:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004070:	0716      	lsls	r6, r2, #28
 8004072:	d504      	bpl.n	800407e <HAL_UART_IRQHandler+0x66>
 8004074:	b11d      	cbz	r5, 800407e <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004076:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004078:	f043 0308 	orr.w	r3, r3, #8
 800407c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800407e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004080:	2b00      	cmp	r3, #0
 8004082:	d066      	beq.n	8004152 <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004084:	0695      	lsls	r5, r2, #26
 8004086:	d504      	bpl.n	8004092 <HAL_UART_IRQHandler+0x7a>
 8004088:	0688      	lsls	r0, r1, #26
 800408a:	d502      	bpl.n	8004092 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 800408c:	4620      	mov	r0, r4
 800408e:	f7ff ff83 	bl	8003f98 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004092:	6823      	ldr	r3, [r4, #0]
 8004094:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004096:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004098:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 800409a:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800409c:	d402      	bmi.n	80040a4 <HAL_UART_IRQHandler+0x8c>
 800409e:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80040a2:	d01a      	beq.n	80040da <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 80040a4:	f7ff fddc 	bl	8003c60 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040a8:	6823      	ldr	r3, [r4, #0]
 80040aa:	695a      	ldr	r2, [r3, #20]
 80040ac:	0652      	lsls	r2, r2, #25
 80040ae:	d510      	bpl.n	80040d2 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040b0:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80040b2:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040b8:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80040ba:	b150      	cbz	r0, 80040d2 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040bc:	4b25      	ldr	r3, [pc, #148]	; (8004154 <HAL_UART_IRQHandler+0x13c>)
 80040be:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040c0:	f7fd f9f2 	bl	80014a8 <HAL_DMA_Abort_IT>
 80040c4:	2800      	cmp	r0, #0
 80040c6:	d044      	beq.n	8004152 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040c8:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 80040ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040ce:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80040d0:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80040d2:	4620      	mov	r0, r4
 80040d4:	f7ff ff9e 	bl	8004014 <HAL_UART_ErrorCallback>
 80040d8:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80040da:	f7ff ff9b 	bl	8004014 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040de:	63e5      	str	r5, [r4, #60]	; 0x3c
 80040e0:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80040e2:	0616      	lsls	r6, r2, #24
 80040e4:	d527      	bpl.n	8004136 <HAL_UART_IRQHandler+0x11e>
 80040e6:	060d      	lsls	r5, r1, #24
 80040e8:	d525      	bpl.n	8004136 <HAL_UART_IRQHandler+0x11e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040ea:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80040ee:	2a21      	cmp	r2, #33	; 0x21
 80040f0:	d12f      	bne.n	8004152 <HAL_UART_IRQHandler+0x13a>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80040f2:	68a2      	ldr	r2, [r4, #8]
 80040f4:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80040f8:	6a22      	ldr	r2, [r4, #32]
 80040fa:	d117      	bne.n	800412c <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80040fc:	8811      	ldrh	r1, [r2, #0]
 80040fe:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8004102:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004104:	6921      	ldr	r1, [r4, #16]
 8004106:	b979      	cbnz	r1, 8004128 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8004108:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 800410a:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 800410c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800410e:	3a01      	subs	r2, #1
 8004110:	b292      	uxth	r2, r2
 8004112:	84e2      	strh	r2, [r4, #38]	; 0x26
 8004114:	b9ea      	cbnz	r2, 8004152 <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004116:	68da      	ldr	r2, [r3, #12]
 8004118:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800411c:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800411e:	68da      	ldr	r2, [r3, #12]
 8004120:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004124:	60da      	str	r2, [r3, #12]
 8004126:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8004128:	3201      	adds	r2, #1
 800412a:	e7ee      	b.n	800410a <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800412c:	1c51      	adds	r1, r2, #1
 800412e:	6221      	str	r1, [r4, #32]
 8004130:	7812      	ldrb	r2, [r2, #0]
 8004132:	605a      	str	r2, [r3, #4]
 8004134:	e7ea      	b.n	800410c <HAL_UART_IRQHandler+0xf4>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004136:	0650      	lsls	r0, r2, #25
 8004138:	d50b      	bpl.n	8004152 <HAL_UART_IRQHandler+0x13a>
 800413a:	064a      	lsls	r2, r1, #25
 800413c:	d509      	bpl.n	8004152 <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800413e:	68da      	ldr	r2, [r3, #12]
 8004140:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004144:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8004146:	2320      	movs	r3, #32
 8004148:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800414c:	4620      	mov	r0, r4
 800414e:	f005 fa47 	bl	80095e0 <HAL_UART_TxCpltCallback>
 8004152:	bd70      	pop	{r4, r5, r6, pc}
 8004154:	08004159 	.word	0x08004159

08004158 <UART_DMAAbortOnError>:
{
 8004158:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800415a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 800415c:	2300      	movs	r3, #0
 800415e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004160:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8004162:	f7ff ff57 	bl	8004014 <HAL_UART_ErrorCallback>
 8004166:	bd08      	pop	{r3, pc}

08004168 <SDMMC_GetCmdResp2>:
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004168:	4b11      	ldr	r3, [pc, #68]	; (80041b0 <SDMMC_GetCmdResp2+0x48>)
 800416a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	fbb3 f2f2 	udiv	r2, r3, r2
 8004174:	f241 3388 	movw	r3, #5000	; 0x1388
 8004178:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 800417a:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800417e:	d314      	bcc.n	80041aa <SDMMC_GetCmdResp2+0x42>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8004180:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8004182:	f012 0f45 	tst.w	r2, #69	; 0x45
 8004186:	d0f8      	beq.n	800417a <SDMMC_GetCmdResp2+0x12>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004188:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800418a:	075b      	lsls	r3, r3, #29
 800418c:	d503      	bpl.n	8004196 <SDMMC_GetCmdResp2+0x2e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800418e:	2304      	movs	r3, #4
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004190:	6383      	str	r3, [r0, #56]	; 0x38
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
  }

  return SDMMC_ERROR_NONE;
}
 8004192:	4618      	mov	r0, r3
 8004194:	4770      	bx	lr
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004196:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004198:	f013 0301 	ands.w	r3, r3, #1
 800419c:	d001      	beq.n	80041a2 <SDMMC_GetCmdResp2+0x3a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800419e:	2301      	movs	r3, #1
 80041a0:	e7f6      	b.n	8004190 <SDMMC_GetCmdResp2+0x28>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80041a2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80041a6:	6382      	str	r2, [r0, #56]	; 0x38
 80041a8:	e7f3      	b.n	8004192 <SDMMC_GetCmdResp2+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 80041aa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80041ae:	e7f0      	b.n	8004192 <SDMMC_GetCmdResp2+0x2a>
 80041b0:	20000010 	.word	0x20000010

080041b4 <SDMMC_GetCmdResp3>:
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80041b4:	4b0e      	ldr	r3, [pc, #56]	; (80041f0 <SDMMC_GetCmdResp3+0x3c>)
 80041b6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	fbb3 f2f2 	udiv	r2, r3, r2
 80041c0:	f241 3388 	movw	r3, #5000	; 0x1388
 80041c4:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 80041c6:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 80041ca:	d30e      	bcc.n	80041ea <SDMMC_GetCmdResp3+0x36>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80041cc:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80041ce:	f012 0f45 	tst.w	r2, #69	; 0x45
 80041d2:	d0f8      	beq.n	80041c6 <SDMMC_GetCmdResp3+0x12>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80041d4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80041d6:	f013 0304 	ands.w	r3, r3, #4
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80041da:	bf15      	itete	ne
 80041dc:	2304      	movne	r3, #4
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80041de:	f240 52ff 	movweq	r2, #1535	; 0x5ff
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80041e2:	6383      	strne	r3, [r0, #56]	; 0x38
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80041e4:	6382      	streq	r2, [r0, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80041e6:	4618      	mov	r0, r3
 80041e8:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80041ea:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80041ee:	4770      	bx	lr
 80041f0:	20000010 	.word	0x20000010

080041f4 <SDIO_Init>:
{
 80041f4:	b084      	sub	sp, #16
 80041f6:	b510      	push	{r4, lr}
 80041f8:	ac03      	add	r4, sp, #12
 80041fa:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 80041fe:	9904      	ldr	r1, [sp, #16]
 8004200:	9b03      	ldr	r3, [sp, #12]
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004202:	6842      	ldr	r2, [r0, #4]
  tmpreg |= (Init.ClockEdge           |\
 8004204:	430b      	orrs	r3, r1
             Init.ClockBypass         |\
 8004206:	9905      	ldr	r1, [sp, #20]
 8004208:	430b      	orrs	r3, r1
             Init.ClockPowerSave      |\
 800420a:	9906      	ldr	r1, [sp, #24]
 800420c:	430b      	orrs	r3, r1
             Init.BusWide             |\
 800420e:	9907      	ldr	r1, [sp, #28]
 8004210:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 8004212:	9908      	ldr	r1, [sp, #32]
}
 8004214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004218:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
             Init.HardwareFlowControl |\
 800421c:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800421e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8004222:	4313      	orrs	r3, r2
 8004224:	6043      	str	r3, [r0, #4]
}
 8004226:	b004      	add	sp, #16
 8004228:	2000      	movs	r0, #0
 800422a:	4770      	bx	lr

0800422c <SDIO_ReadFIFO>:
 800422c:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 8004230:	4770      	bx	lr

08004232 <SDIO_WriteFIFO>:
  SDIOx->FIFO = *pWriteData;
 8004232:	680b      	ldr	r3, [r1, #0]
 8004234:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 8004238:	2000      	movs	r0, #0
 800423a:	4770      	bx	lr

0800423c <SDIO_PowerState_ON>:
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800423c:	2303      	movs	r3, #3
 800423e:	6003      	str	r3, [r0, #0]
}
 8004240:	2000      	movs	r0, #0
 8004242:	4770      	bx	lr

08004244 <SDIO_GetPowerState>:
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004244:	6800      	ldr	r0, [r0, #0]
}
 8004246:	f000 0003 	and.w	r0, r0, #3
 800424a:	4770      	bx	lr

0800424c <SDIO_SendCommand>:
  SDIOx->ARG = Command->Argument;
 800424c:	680b      	ldr	r3, [r1, #0]
{
 800424e:	b510      	push	{r4, lr}
  SDIOx->ARG = Command->Argument;
 8004250:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004252:	688c      	ldr	r4, [r1, #8]
 8004254:	684b      	ldr	r3, [r1, #4]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004256:	68c2      	ldr	r2, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004258:	4323      	orrs	r3, r4
                       Command->Response         |\
 800425a:	68cc      	ldr	r4, [r1, #12]
                       Command->WaitForInterrupt |\
 800425c:	6909      	ldr	r1, [r1, #16]
                       Command->Response         |\
 800425e:	4323      	orrs	r3, r4
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004260:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
                       Command->WaitForInterrupt |\
 8004264:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004266:	f022 020f 	bic.w	r2, r2, #15
 800426a:	4313      	orrs	r3, r2
 800426c:	60c3      	str	r3, [r0, #12]
}
 800426e:	2000      	movs	r0, #0
 8004270:	bd10      	pop	{r4, pc}

08004272 <SDIO_GetResponse>:
{
 8004272:	b082      	sub	sp, #8
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 8004274:	3014      	adds	r0, #20
 8004276:	4401      	add	r1, r0
  __IO uint32_t tmp = 0U;
 8004278:	2300      	movs	r3, #0
 800427a:	9301      	str	r3, [sp, #4]
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 800427c:	9101      	str	r1, [sp, #4]
  return (*(__IO uint32_t *) tmp);
 800427e:	9b01      	ldr	r3, [sp, #4]
 8004280:	6818      	ldr	r0, [r3, #0]
}  
 8004282:	b002      	add	sp, #8
 8004284:	4770      	bx	lr
	...

08004288 <SDMMC_GetCmdResp1>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004288:	4b45      	ldr	r3, [pc, #276]	; (80043a0 <SDMMC_GetCmdResp1+0x118>)
{
 800428a:	b510      	push	{r4, lr}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f44f 54fa 	mov.w	r4, #8000	; 0x1f40
 8004292:	fbb3 f3f4 	udiv	r3, r3, r4
 8004296:	435a      	muls	r2, r3
    if (count-- == 0U)
 8004298:	2a00      	cmp	r2, #0
 800429a:	d04a      	beq.n	8004332 <SDMMC_GetCmdResp1+0xaa>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800429c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800429e:	f013 0f45 	tst.w	r3, #69	; 0x45
 80042a2:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80042a6:	d0f7      	beq.n	8004298 <SDMMC_GetCmdResp1+0x10>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80042a8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80042aa:	075c      	lsls	r4, r3, #29
 80042ac:	d503      	bpl.n	80042b6 <SDMMC_GetCmdResp1+0x2e>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80042ae:	2304      	movs	r3, #4
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80042b0:	6383      	str	r3, [r0, #56]	; 0x38
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	bd10      	pop	{r4, pc}
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80042b6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80042b8:	f013 0301 	ands.w	r3, r3, #1
 80042bc:	d001      	beq.n	80042c2 <SDMMC_GetCmdResp1+0x3a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80042be:	2301      	movs	r3, #1
 80042c0:	e7f6      	b.n	80042b0 <SDMMC_GetCmdResp1+0x28>
  return (uint8_t)(SDIOx->RESPCMD);
 80042c2:	6902      	ldr	r2, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80042c4:	b2d2      	uxtb	r2, r2
 80042c6:	4291      	cmp	r1, r2
 80042c8:	d136      	bne.n	8004338 <SDMMC_GetCmdResp1+0xb0>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80042ca:	f240 52ff 	movw	r2, #1535	; 0x5ff
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80042ce:	4619      	mov	r1, r3
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80042d0:	6382      	str	r2, [r0, #56]	; 0x38
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80042d2:	f7ff ffce 	bl	8004272 <SDIO_GetResponse>
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80042d6:	4b33      	ldr	r3, [pc, #204]	; (80043a4 <SDMMC_GetCmdResp1+0x11c>)
 80042d8:	4003      	ands	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d0e9      	beq.n	80042b2 <SDMMC_GetCmdResp1+0x2a>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80042de:	2800      	cmp	r0, #0
 80042e0:	db2c      	blt.n	800433c <SDMMC_GetCmdResp1+0xb4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80042e2:	0042      	lsls	r2, r0, #1
 80042e4:	d42d      	bmi.n	8004342 <SDMMC_GetCmdResp1+0xba>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80042e6:	0084      	lsls	r4, r0, #2
 80042e8:	d42d      	bmi.n	8004346 <SDMMC_GetCmdResp1+0xbe>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80042ea:	00c1      	lsls	r1, r0, #3
 80042ec:	d42d      	bmi.n	800434a <SDMMC_GetCmdResp1+0xc2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80042ee:	0102      	lsls	r2, r0, #4
 80042f0:	d42e      	bmi.n	8004350 <SDMMC_GetCmdResp1+0xc8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80042f2:	0144      	lsls	r4, r0, #5
 80042f4:	d42f      	bmi.n	8004356 <SDMMC_GetCmdResp1+0xce>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80042f6:	01c1      	lsls	r1, r0, #7
 80042f8:	d430      	bmi.n	800435c <SDMMC_GetCmdResp1+0xd4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80042fa:	0202      	lsls	r2, r0, #8
 80042fc:	d431      	bmi.n	8004362 <SDMMC_GetCmdResp1+0xda>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80042fe:	0244      	lsls	r4, r0, #9
 8004300:	d432      	bmi.n	8004368 <SDMMC_GetCmdResp1+0xe0>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004302:	0281      	lsls	r1, r0, #10
 8004304:	d433      	bmi.n	800436e <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004306:	02c2      	lsls	r2, r0, #11
 8004308:	d434      	bmi.n	8004374 <SDMMC_GetCmdResp1+0xec>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800430a:	0344      	lsls	r4, r0, #13
 800430c:	d435      	bmi.n	800437a <SDMMC_GetCmdResp1+0xf2>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800430e:	0381      	lsls	r1, r0, #14
 8004310:	d436      	bmi.n	8004380 <SDMMC_GetCmdResp1+0xf8>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004312:	03c2      	lsls	r2, r0, #15
 8004314:	d437      	bmi.n	8004386 <SDMMC_GetCmdResp1+0xfe>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004316:	0404      	lsls	r4, r0, #16
 8004318:	d438      	bmi.n	800438c <SDMMC_GetCmdResp1+0x104>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800431a:	0441      	lsls	r1, r0, #17
 800431c:	d439      	bmi.n	8004392 <SDMMC_GetCmdResp1+0x10a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800431e:	0482      	lsls	r2, r0, #18
 8004320:	d43a      	bmi.n	8004398 <SDMMC_GetCmdResp1+0x110>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004322:	f010 0f08 	tst.w	r0, #8
 8004326:	bf14      	ite	ne
 8004328:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800432c:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8004330:	e7bf      	b.n	80042b2 <SDMMC_GetCmdResp1+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8004332:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004336:	e7bc      	b.n	80042b2 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004338:	2301      	movs	r3, #1
 800433a:	e7ba      	b.n	80042b2 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800433c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004340:	e7b7      	b.n	80042b2 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004342:	2340      	movs	r3, #64	; 0x40
 8004344:	e7b5      	b.n	80042b2 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004346:	2380      	movs	r3, #128	; 0x80
 8004348:	e7b3      	b.n	80042b2 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800434a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800434e:	e7b0      	b.n	80042b2 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004350:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004354:	e7ad      	b.n	80042b2 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004356:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800435a:	e7aa      	b.n	80042b2 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800435c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004360:	e7a7      	b.n	80042b2 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004362:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004366:	e7a4      	b.n	80042b2 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004368:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800436c:	e7a1      	b.n	80042b2 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800436e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004372:	e79e      	b.n	80042b2 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CC_ERR;
 8004374:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004378:	e79b      	b.n	80042b2 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800437a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800437e:	e798      	b.n	80042b2 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004380:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004384:	e795      	b.n	80042b2 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004386:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800438a:	e792      	b.n	80042b2 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800438c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004390:	e78f      	b.n	80042b2 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004392:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004396:	e78c      	b.n	80042b2 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ERASE_RESET;
 8004398:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800439c:	e789      	b.n	80042b2 <SDMMC_GetCmdResp1+0x2a>
 800439e:	bf00      	nop
 80043a0:	20000010 	.word	0x20000010
 80043a4:	fdffe008 	.word	0xfdffe008

080043a8 <SDIO_ConfigData>:
  SDIOx->DTIMER = Data->DataTimeOut;
 80043a8:	680b      	ldr	r3, [r1, #0]
{
 80043aa:	b510      	push	{r4, lr}
  SDIOx->DTIMER = Data->DataTimeOut;
 80043ac:	6243      	str	r3, [r0, #36]	; 0x24
  SDIOx->DLEN = Data->DataLength;
 80043ae:	684b      	ldr	r3, [r1, #4]
 80043b0:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80043b2:	68cc      	ldr	r4, [r1, #12]
 80043b4:	688b      	ldr	r3, [r1, #8]
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80043b6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80043b8:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
 80043ba:	690c      	ldr	r4, [r1, #16]
                       Data->TransferMode  |\
 80043bc:	6949      	ldr	r1, [r1, #20]
                       Data->TransferDir   |\
 80043be:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 80043c0:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80043c2:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
 80043c6:	4313      	orrs	r3, r2
 80043c8:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 80043ca:	2000      	movs	r0, #0
 80043cc:	bd10      	pop	{r4, pc}

080043ce <SDMMC_CmdBlockLength>:
{
 80043ce:	b530      	push	{r4, r5, lr}
 80043d0:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80043d2:	2340      	movs	r3, #64	; 0x40
 80043d4:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80043d6:	2300      	movs	r3, #0
{
 80043d8:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80043da:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80043dc:	2410      	movs	r4, #16
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80043de:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80043e0:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80043e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043e6:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80043e8:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80043ea:	f7ff ff2f 	bl	800424c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80043ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f2:	4621      	mov	r1, r4
 80043f4:	4628      	mov	r0, r5
 80043f6:	f7ff ff47 	bl	8004288 <SDMMC_GetCmdResp1>
}
 80043fa:	b007      	add	sp, #28
 80043fc:	bd30      	pop	{r4, r5, pc}

080043fe <SDMMC_CmdReadSingleBlock>:
{
 80043fe:	b530      	push	{r4, r5, lr}
 8004400:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004402:	2340      	movs	r3, #64	; 0x40
 8004404:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004406:	2300      	movs	r3, #0
{
 8004408:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800440a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800440c:	2411      	movs	r4, #17
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800440e:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004410:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004412:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004416:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004418:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800441a:	f7ff ff17 	bl	800424c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800441e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004422:	4621      	mov	r1, r4
 8004424:	4628      	mov	r0, r5
 8004426:	f7ff ff2f 	bl	8004288 <SDMMC_GetCmdResp1>
}
 800442a:	b007      	add	sp, #28
 800442c:	bd30      	pop	{r4, r5, pc}

0800442e <SDMMC_CmdReadMultiBlock>:
{
 800442e:	b530      	push	{r4, r5, lr}
 8004430:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004432:	2340      	movs	r3, #64	; 0x40
 8004434:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004436:	2300      	movs	r3, #0
{
 8004438:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800443a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800443c:	2412      	movs	r4, #18
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800443e:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004440:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004442:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004446:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004448:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800444a:	f7ff feff 	bl	800424c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800444e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004452:	4621      	mov	r1, r4
 8004454:	4628      	mov	r0, r5
 8004456:	f7ff ff17 	bl	8004288 <SDMMC_GetCmdResp1>
}
 800445a:	b007      	add	sp, #28
 800445c:	bd30      	pop	{r4, r5, pc}

0800445e <SDMMC_CmdWriteSingleBlock>:
{
 800445e:	b530      	push	{r4, r5, lr}
 8004460:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004462:	2340      	movs	r3, #64	; 0x40
 8004464:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004466:	2300      	movs	r3, #0
{
 8004468:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800446a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800446c:	2418      	movs	r4, #24
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800446e:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004470:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004472:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004476:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004478:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800447a:	f7ff fee7 	bl	800424c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800447e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004482:	4621      	mov	r1, r4
 8004484:	4628      	mov	r0, r5
 8004486:	f7ff feff 	bl	8004288 <SDMMC_GetCmdResp1>
}
 800448a:	b007      	add	sp, #28
 800448c:	bd30      	pop	{r4, r5, pc}

0800448e <SDMMC_CmdWriteMultiBlock>:
{
 800448e:	b530      	push	{r4, r5, lr}
 8004490:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004492:	2340      	movs	r3, #64	; 0x40
 8004494:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004496:	2300      	movs	r3, #0
{
 8004498:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800449a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800449c:	2419      	movs	r4, #25
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800449e:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80044a0:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80044a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044a6:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80044a8:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80044aa:	f7ff fecf 	bl	800424c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80044ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80044b2:	4621      	mov	r1, r4
 80044b4:	4628      	mov	r0, r5
 80044b6:	f7ff fee7 	bl	8004288 <SDMMC_GetCmdResp1>
}
 80044ba:	b007      	add	sp, #28
 80044bc:	bd30      	pop	{r4, r5, pc}
	...

080044c0 <SDMMC_CmdStopTransfer>:
{
 80044c0:	b530      	push	{r4, r5, lr}
 80044c2:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0U;
 80044c4:	2300      	movs	r3, #0
{
 80044c6:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0U;
 80044c8:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80044ca:	240c      	movs	r4, #12
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80044cc:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80044ce:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80044d0:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80044d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80044d6:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80044d8:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80044da:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80044dc:	f7ff feb6 	bl	800424c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, 100000000U);
 80044e0:	4a03      	ldr	r2, [pc, #12]	; (80044f0 <SDMMC_CmdStopTransfer+0x30>)
 80044e2:	4621      	mov	r1, r4
 80044e4:	4628      	mov	r0, r5
 80044e6:	f7ff fecf 	bl	8004288 <SDMMC_GetCmdResp1>
}
 80044ea:	b007      	add	sp, #28
 80044ec:	bd30      	pop	{r4, r5, pc}
 80044ee:	bf00      	nop
 80044f0:	05f5e100 	.word	0x05f5e100

080044f4 <SDMMC_CmdSelDesel>:
{
 80044f4:	b530      	push	{r4, r5, lr}
 80044f6:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80044f8:	2340      	movs	r3, #64	; 0x40
 80044fa:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80044fc:	2300      	movs	r3, #0
{
 80044fe:	4605      	mov	r5, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004500:	2407      	movs	r4, #7
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004502:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004504:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004506:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800450a:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800450c:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800450e:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004510:	f7ff fe9c 	bl	800424c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8004514:	f241 3288 	movw	r2, #5000	; 0x1388
 8004518:	4621      	mov	r1, r4
 800451a:	4628      	mov	r0, r5
 800451c:	f7ff feb4 	bl	8004288 <SDMMC_GetCmdResp1>
}
 8004520:	b007      	add	sp, #28
 8004522:	bd30      	pop	{r4, r5, pc}

08004524 <SDMMC_CmdGoIdleState>:
{
 8004524:	b510      	push	{r4, lr}
 8004526:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = 0U;
 8004528:	2300      	movs	r3, #0
 800452a:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800452c:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800452e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004530:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004532:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004534:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004538:	9305      	str	r3, [sp, #20]
{
 800453a:	4604      	mov	r4, r0
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800453c:	f7ff fe86 	bl	800424c <SDIO_SendCommand>
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004540:	4b0b      	ldr	r3, [pc, #44]	; (8004570 <SDMMC_CmdGoIdleState+0x4c>)
 8004542:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	fbb3 f2f2 	udiv	r2, r3, r2
 800454c:	f241 3388 	movw	r3, #5000	; 0x1388
 8004550:	4353      	muls	r3, r2
    if (count-- == 0U)
 8004552:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8004556:	d308      	bcc.n	800456a <SDMMC_CmdGoIdleState+0x46>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8004558:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800455a:	0612      	lsls	r2, r2, #24
 800455c:	d5f9      	bpl.n	8004552 <SDMMC_CmdGoIdleState+0x2e>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 800455e:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8004562:	63a3      	str	r3, [r4, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8004564:	2000      	movs	r0, #0
}
 8004566:	b006      	add	sp, #24
 8004568:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 800456a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 800456e:	e7fa      	b.n	8004566 <SDMMC_CmdGoIdleState+0x42>
 8004570:	20000010 	.word	0x20000010

08004574 <SDMMC_CmdOperCond>:
{
 8004574:	b510      	push	{r4, lr}
 8004576:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004578:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800457c:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800457e:	2308      	movs	r3, #8
 8004580:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004582:	2340      	movs	r3, #64	; 0x40
 8004584:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004586:	2300      	movs	r3, #0
 8004588:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800458a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800458c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004590:	9305      	str	r3, [sp, #20]
{
 8004592:	4604      	mov	r4, r0
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004594:	f7ff fe5a 	bl	800424c <SDIO_SendCommand>
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004598:	4b11      	ldr	r3, [pc, #68]	; (80045e0 <SDMMC_CmdOperCond+0x6c>)
 800459a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	fbb3 f2f2 	udiv	r2, r3, r2
 80045a4:	f241 3388 	movw	r3, #5000	; 0x1388
 80045a8:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 80045aa:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 80045ae:	d314      	bcc.n	80045da <SDMMC_CmdOperCond+0x66>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80045b0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80045b2:	f012 0f45 	tst.w	r2, #69	; 0x45
 80045b6:	d0f8      	beq.n	80045aa <SDMMC_CmdOperCond+0x36>

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80045b8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80045ba:	f012 0204 	ands.w	r2, r2, #4
 80045be:	d004      	beq.n	80045ca <SDMMC_CmdOperCond+0x56>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80045c0:	2340      	movs	r3, #64	; 0x40
 80045c2:	63a3      	str	r3, [r4, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80045c4:	2004      	movs	r0, #4
}
 80045c6:	b006      	add	sp, #24
 80045c8:	bd10      	pop	{r4, pc}
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80045ca:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80045cc:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 80045d0:	d0f9      	beq.n	80045c6 <SDMMC_CmdOperCond+0x52>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80045d2:	2340      	movs	r3, #64	; 0x40
 80045d4:	63a3      	str	r3, [r4, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80045d6:	4610      	mov	r0, r2
 80045d8:	e7f5      	b.n	80045c6 <SDMMC_CmdOperCond+0x52>
      return SDMMC_ERROR_TIMEOUT;
 80045da:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80045de:	e7f2      	b.n	80045c6 <SDMMC_CmdOperCond+0x52>
 80045e0:	20000010 	.word	0x20000010

080045e4 <SDMMC_CmdAppCommand>:
{
 80045e4:	b530      	push	{r4, r5, lr}
 80045e6:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80045e8:	2340      	movs	r3, #64	; 0x40
 80045ea:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80045ec:	2300      	movs	r3, #0
{
 80045ee:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80045f0:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80045f2:	2437      	movs	r4, #55	; 0x37
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80045f4:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80045f6:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80045f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045fc:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80045fe:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004600:	f7ff fe24 	bl	800424c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8004604:	f241 3288 	movw	r2, #5000	; 0x1388
 8004608:	4621      	mov	r1, r4
 800460a:	4628      	mov	r0, r5
 800460c:	f7ff fe3c 	bl	8004288 <SDMMC_GetCmdResp1>
}
 8004610:	b007      	add	sp, #28
 8004612:	bd30      	pop	{r4, r5, pc}

08004614 <SDMMC_CmdAppOperCommand>:
{
 8004614:	b510      	push	{r4, lr}
 8004616:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004618:	2329      	movs	r3, #41	; 0x29
 800461a:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 800461c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004620:	2340      	movs	r3, #64	; 0x40
 8004622:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8004624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004628:	2300      	movs	r3, #0
{
 800462a:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 800462c:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800462e:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004630:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004632:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004636:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004638:	f7ff fe08 	bl	800424c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800463c:	4620      	mov	r0, r4
 800463e:	f7ff fdb9 	bl	80041b4 <SDMMC_GetCmdResp3>
}
 8004642:	b006      	add	sp, #24
 8004644:	bd10      	pop	{r4, pc}

08004646 <SDMMC_CmdSendCID>:
{
 8004646:	b510      	push	{r4, lr}
 8004648:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = 0U;
 800464a:	2300      	movs	r3, #0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800464c:	2202      	movs	r2, #2
{
 800464e:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8004650:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004652:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004654:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004656:	22c0      	movs	r2, #192	; 0xc0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004658:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800465c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800465e:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004660:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004662:	f7ff fdf3 	bl	800424c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004666:	4620      	mov	r0, r4
 8004668:	f7ff fd7e 	bl	8004168 <SDMMC_GetCmdResp2>
}
 800466c:	b006      	add	sp, #24
 800466e:	bd10      	pop	{r4, pc}

08004670 <SDMMC_CmdSendCSD>:
{
 8004670:	b510      	push	{r4, lr}
 8004672:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004674:	2309      	movs	r3, #9
 8004676:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004678:	23c0      	movs	r3, #192	; 0xc0
 800467a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800467c:	2300      	movs	r3, #0
{
 800467e:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004680:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004682:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004684:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004686:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800468a:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800468c:	f7ff fdde 	bl	800424c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004690:	4620      	mov	r0, r4
 8004692:	f7ff fd69 	bl	8004168 <SDMMC_GetCmdResp2>
}
 8004696:	b006      	add	sp, #24
 8004698:	bd10      	pop	{r4, pc}
	...

0800469c <SDMMC_CmdSetRelAdd>:
{
 800469c:	b530      	push	{r4, r5, lr}
 800469e:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0U;
 80046a0:	2300      	movs	r3, #0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80046a2:	2203      	movs	r2, #3
  sdmmc_cmdinit.Argument         = 0U;
 80046a4:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80046a6:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80046a8:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80046aa:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80046ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
{
 80046b0:	460d      	mov	r5, r1
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80046b2:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80046b4:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80046b6:	9305      	str	r3, [sp, #20]
{
 80046b8:	4604      	mov	r4, r0
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80046ba:	f7ff fdc7 	bl	800424c <SDIO_SendCommand>
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80046be:	4b20      	ldr	r3, [pc, #128]	; (8004740 <SDMMC_CmdSetRelAdd+0xa4>)
 80046c0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	fbb3 f2f2 	udiv	r2, r3, r2
 80046ca:	f241 3388 	movw	r3, #5000	; 0x1388
 80046ce:	4353      	muls	r3, r2
    if (count-- == 0U)
 80046d0:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 80046d4:	d32b      	bcc.n	800472e <SDMMC_CmdSetRelAdd+0x92>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80046d6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80046d8:	f012 0f45 	tst.w	r2, #69	; 0x45
 80046dc:	d0f8      	beq.n	80046d0 <SDMMC_CmdSetRelAdd+0x34>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80046de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80046e0:	075a      	lsls	r2, r3, #29
 80046e2:	d503      	bpl.n	80046ec <SDMMC_CmdSetRelAdd+0x50>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80046e4:	2004      	movs	r0, #4
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80046e6:	63a0      	str	r0, [r4, #56]	; 0x38
}
 80046e8:	b007      	add	sp, #28
 80046ea:	bd30      	pop	{r4, r5, pc}
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80046ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80046ee:	f011 0101 	ands.w	r1, r1, #1
 80046f2:	d001      	beq.n	80046f8 <SDMMC_CmdSetRelAdd+0x5c>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80046f4:	2001      	movs	r0, #1
 80046f6:	e7f6      	b.n	80046e6 <SDMMC_CmdSetRelAdd+0x4a>
  return (uint8_t)(SDIOx->RESPCMD);
 80046f8:	6923      	ldr	r3, [r4, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	2b03      	cmp	r3, #3
 80046fe:	d119      	bne.n	8004734 <SDMMC_CmdSetRelAdd+0x98>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8004700:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8004704:	63a3      	str	r3, [r4, #56]	; 0x38
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004706:	4620      	mov	r0, r4
 8004708:	f7ff fdb3 	bl	8004272 <SDIO_GetResponse>
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800470c:	f410 4360 	ands.w	r3, r0, #57344	; 0xe000
 8004710:	d103      	bne.n	800471a <SDMMC_CmdSetRelAdd+0x7e>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004712:	0c00      	lsrs	r0, r0, #16
 8004714:	8028      	strh	r0, [r5, #0]
    return SDMMC_ERROR_NONE;
 8004716:	4618      	mov	r0, r3
 8004718:	e7e6      	b.n	80046e8 <SDMMC_CmdSetRelAdd+0x4c>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800471a:	0443      	lsls	r3, r0, #17
 800471c:	d40c      	bmi.n	8004738 <SDMMC_CmdSetRelAdd+0x9c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800471e:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8004722:	bf14      	ite	ne
 8004724:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8004728:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800472c:	e7dc      	b.n	80046e8 <SDMMC_CmdSetRelAdd+0x4c>
      return SDMMC_ERROR_TIMEOUT;
 800472e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8004732:	e7d9      	b.n	80046e8 <SDMMC_CmdSetRelAdd+0x4c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004734:	2001      	movs	r0, #1
 8004736:	e7d7      	b.n	80046e8 <SDMMC_CmdSetRelAdd+0x4c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004738:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800473c:	e7d4      	b.n	80046e8 <SDMMC_CmdSetRelAdd+0x4c>
 800473e:	bf00      	nop
 8004740:	20000010 	.word	0x20000010

08004744 <SDMMC_CmdSendStatus>:
{
 8004744:	b530      	push	{r4, r5, lr}
 8004746:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004748:	2340      	movs	r3, #64	; 0x40
 800474a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800474c:	2300      	movs	r3, #0
{
 800474e:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004750:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004752:	240d      	movs	r4, #13
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004754:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004756:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004758:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800475c:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800475e:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004760:	f7ff fd74 	bl	800424c <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8004764:	f241 3288 	movw	r2, #5000	; 0x1388
 8004768:	4621      	mov	r1, r4
 800476a:	4628      	mov	r0, r5
 800476c:	f7ff fd8c 	bl	8004288 <SDMMC_GetCmdResp1>
}
 8004770:	b007      	add	sp, #28
 8004772:	bd30      	pop	{r4, r5, pc}

08004774 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004774:	4b03      	ldr	r3, [pc, #12]	; (8004784 <disk_status+0x10>)
 8004776:	181a      	adds	r2, r3, r0
 8004778:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800477c:	7a10      	ldrb	r0, [r2, #8]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	4718      	bx	r3
 8004784:	20000120 	.word	0x20000120

08004788 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8004788:	4b06      	ldr	r3, [pc, #24]	; (80047a4 <disk_initialize+0x1c>)
 800478a:	5c1a      	ldrb	r2, [r3, r0]
 800478c:	b942      	cbnz	r2, 80047a0 <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
 800478e:	2201      	movs	r2, #1
 8004790:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004792:	181a      	adds	r2, r3, r0
 8004794:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8004798:	7a10      	ldrb	r0, [r2, #8]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4718      	bx	r3
  }
  return stat;
}
 80047a0:	2000      	movs	r0, #0
 80047a2:	4770      	bx	lr
 80047a4:	20000120 	.word	0x20000120

080047a8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80047a8:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80047aa:	4c05      	ldr	r4, [pc, #20]	; (80047c0 <disk_read+0x18>)
 80047ac:	1825      	adds	r5, r4, r0
 80047ae:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 80047b2:	6860      	ldr	r0, [r4, #4]
 80047b4:	6884      	ldr	r4, [r0, #8]
 80047b6:	7a28      	ldrb	r0, [r5, #8]
 80047b8:	46a4      	mov	ip, r4
  return res;
}
 80047ba:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80047bc:	4760      	bx	ip
 80047be:	bf00      	nop
 80047c0:	20000120 	.word	0x20000120

080047c4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80047c4:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80047c6:	4c05      	ldr	r4, [pc, #20]	; (80047dc <disk_write+0x18>)
 80047c8:	1825      	adds	r5, r4, r0
 80047ca:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 80047ce:	6860      	ldr	r0, [r4, #4]
 80047d0:	68c4      	ldr	r4, [r0, #12]
 80047d2:	7a28      	ldrb	r0, [r5, #8]
 80047d4:	46a4      	mov	ip, r4
  return res;
}
 80047d6:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80047d8:	4760      	bx	ip
 80047da:	bf00      	nop
 80047dc:	20000120 	.word	0x20000120

080047e0 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80047e0:	4b05      	ldr	r3, [pc, #20]	; (80047f8 <disk_ioctl+0x18>)
{
 80047e2:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80047e4:	181c      	adds	r4, r3, r0
 80047e6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80047ea:	7a20      	ldrb	r0, [r4, #8]
 80047ec:	685b      	ldr	r3, [r3, #4]
  return res;
}
 80047ee:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	4718      	bx	r3
 80047f6:	bf00      	nop
 80047f8:	20000120 	.word	0x20000120

080047fc <ld_dword>:
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
 80047fc:	8842      	ldrh	r2, [r0, #2]
	rv = rv << 8 | ptr[1];
 80047fe:	7843      	ldrb	r3, [r0, #1]
	rv = rv << 8 | ptr[0];
 8004800:	7800      	ldrb	r0, [r0, #0]
	rv = rv << 8 | ptr[1];
 8004802:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	return rv;
}
 8004806:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800480a:	4770      	bx	lr

0800480c <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 800480c:	0a0b      	lsrs	r3, r1, #8
 800480e:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004810:	7043      	strb	r3, [r0, #1]
 8004812:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8004814:	0e09      	lsrs	r1, r1, #24
 8004816:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 8004818:	70c1      	strb	r1, [r0, #3]
 800481a:	4770      	bx	lr

0800481c <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800481c:	4402      	add	r2, r0
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 800481e:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
 8004822:	4290      	cmp	r0, r2
 8004824:	d1fb      	bne.n	800481e <mem_set+0x2>
}
 8004826:	4770      	bx	lr

08004828 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004828:	4b15      	ldr	r3, [pc, #84]	; (8004880 <chk_lock+0x58>)
 800482a:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800482c:	2500      	movs	r5, #0
 800482e:	462a      	mov	r2, r5
 8004830:	461c      	mov	r4, r3
		if (Files[i].fs) {	/* Existing entry */
 8004832:	681e      	ldr	r6, [r3, #0]
 8004834:	b1a6      	cbz	r6, 8004860 <chk_lock+0x38>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004836:	6807      	ldr	r7, [r0, #0]
 8004838:	42be      	cmp	r6, r7
 800483a:	d112      	bne.n	8004862 <chk_lock+0x3a>
 800483c:	685f      	ldr	r7, [r3, #4]
 800483e:	6886      	ldr	r6, [r0, #8]
 8004840:	42b7      	cmp	r7, r6
 8004842:	d10e      	bne.n	8004862 <chk_lock+0x3a>
				Files[i].clu == dp->obj.sclust &&
 8004844:	689f      	ldr	r7, [r3, #8]
 8004846:	6946      	ldr	r6, [r0, #20]
 8004848:	42b7      	cmp	r7, r6
 800484a:	d10a      	bne.n	8004862 <chk_lock+0x3a>
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800484c:	b9b1      	cbnz	r1, 800487c <chk_lock+0x54>
 800484e:	eb04 1202 	add.w	r2, r4, r2, lsl #4
 8004852:	8993      	ldrh	r3, [r2, #12]
 8004854:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004858:	bf14      	ite	ne
 800485a:	2000      	movne	r0, #0
 800485c:	2010      	moveq	r0, #16
 800485e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			be = 1;
 8004860:	2501      	movs	r5, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004862:	3201      	adds	r2, #1
 8004864:	2a08      	cmp	r2, #8
 8004866:	f103 0310 	add.w	r3, r3, #16
 800486a:	d1e2      	bne.n	8004832 <chk_lock+0xa>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800486c:	b10d      	cbz	r5, 8004872 <chk_lock+0x4a>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800486e:	2000      	movs	r0, #0
 8004870:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004872:	2902      	cmp	r1, #2
 8004874:	bf0c      	ite	eq
 8004876:	2000      	moveq	r0, #0
 8004878:	2012      	movne	r0, #18
 800487a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800487c:	2010      	movs	r0, #16
 800487e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004880:	2000009c 	.word	0x2000009c

08004884 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004886:	4c1c      	ldr	r4, [pc, #112]	; (80048f8 <inc_lock+0x74>)
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 8004888:	6807      	ldr	r7, [r0, #0]
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800488a:	2300      	movs	r3, #0
 800488c:	4622      	mov	r2, r4
		if (Files[i].fs == dp->obj.fs &&
 800488e:	6825      	ldr	r5, [r4, #0]
 8004890:	42bd      	cmp	r5, r7
 8004892:	d107      	bne.n	80048a4 <inc_lock+0x20>
 8004894:	6866      	ldr	r6, [r4, #4]
 8004896:	6885      	ldr	r5, [r0, #8]
 8004898:	42ae      	cmp	r6, r5
 800489a:	d103      	bne.n	80048a4 <inc_lock+0x20>
			Files[i].clu == dp->obj.sclust &&
 800489c:	68a6      	ldr	r6, [r4, #8]
 800489e:	6945      	ldr	r5, [r0, #20]
 80048a0:	42ae      	cmp	r6, r5
 80048a2:	d01f      	beq.n	80048e4 <inc_lock+0x60>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80048a4:	3301      	adds	r3, #1
 80048a6:	2b08      	cmp	r3, #8
 80048a8:	f104 0410 	add.w	r4, r4, #16
 80048ac:	d1ef      	bne.n	800488e <inc_lock+0xa>
 80048ae:	2300      	movs	r3, #0
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80048b0:	011d      	lsls	r5, r3, #4
 80048b2:	5956      	ldr	r6, [r2, r5]
 80048b4:	b98e      	cbnz	r6, 80048da <inc_lock+0x56>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->obj.fs;
 80048b6:	1954      	adds	r4, r2, r5
 80048b8:	5157      	str	r7, [r2, r5]
		Files[i].clu = dp->obj.sclust;
 80048ba:	6885      	ldr	r5, [r0, #8]
		Files[i].ofs = dp->dptr;
 80048bc:	6940      	ldr	r0, [r0, #20]
		Files[i].clu = dp->obj.sclust;
 80048be:	6065      	str	r5, [r4, #4]
		Files[i].ofs = dp->dptr;
 80048c0:	60a0      	str	r0, [r4, #8]
		Files[i].ctr = 0;
 80048c2:	81a6      	strh	r6, [r4, #12]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80048c4:	b9a9      	cbnz	r1, 80048f2 <inc_lock+0x6e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80048c6:	eb02 1103 	add.w	r1, r2, r3, lsl #4
 80048ca:	8989      	ldrh	r1, [r1, #12]
 80048cc:	3101      	adds	r1, #1
 80048ce:	b289      	uxth	r1, r1
 80048d0:	eb02 1203 	add.w	r2, r2, r3, lsl #4

	return i + 1;
 80048d4:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80048d6:	8191      	strh	r1, [r2, #12]
	return i + 1;
 80048d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80048da:	3301      	adds	r3, #1
 80048dc:	2b08      	cmp	r3, #8
 80048de:	d1e7      	bne.n	80048b0 <inc_lock+0x2c>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80048e0:	2000      	movs	r0, #0
 80048e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80048e4:	2900      	cmp	r1, #0
 80048e6:	d0ee      	beq.n	80048c6 <inc_lock+0x42>
 80048e8:	eb02 1103 	add.w	r1, r2, r3, lsl #4
 80048ec:	8989      	ldrh	r1, [r1, #12]
 80048ee:	2900      	cmp	r1, #0
 80048f0:	d1f6      	bne.n	80048e0 <inc_lock+0x5c>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80048f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80048f6:	e7eb      	b.n	80048d0 <inc_lock+0x4c>
 80048f8:	2000009c 	.word	0x2000009c

080048fc <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80048fc:	3801      	subs	r0, #1
 80048fe:	2807      	cmp	r0, #7
 8004900:	d80e      	bhi.n	8004920 <dec_lock+0x24>
		n = Files[i].ctr;
 8004902:	4a09      	ldr	r2, [pc, #36]	; (8004928 <dec_lock+0x2c>)
 8004904:	0103      	lsls	r3, r0, #4
 8004906:	18d1      	adds	r1, r2, r3
 8004908:	8989      	ldrh	r1, [r1, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
		if (n > 0) n--;				/* Decrement read mode open count */
 800490a:	f421 7080 	bic.w	r0, r1, #256	; 0x100
 800490e:	b280      	uxth	r0, r0
 8004910:	b108      	cbz	r0, 8004916 <dec_lock+0x1a>
 8004912:	1e48      	subs	r0, r1, #1
 8004914:	b280      	uxth	r0, r0
		Files[i].ctr = n;
 8004916:	18d1      	adds	r1, r2, r3
 8004918:	8188      	strh	r0, [r1, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800491a:	b918      	cbnz	r0, 8004924 <dec_lock+0x28>
 800491c:	50d0      	str	r0, [r2, r3]
 800491e:	4770      	bx	lr
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004920:	2002      	movs	r0, #2
 8004922:	4770      	bx	lr
		res = FR_OK;
 8004924:	2000      	movs	r0, #0
	}
	return res;
}
 8004926:	4770      	bx	lr
 8004928:	2000009c 	.word	0x2000009c

0800492c <clust2sect>:
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800492c:	69c3      	ldr	r3, [r0, #28]
	clst -= 2;
 800492e:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004930:	3b02      	subs	r3, #2
 8004932:	4299      	cmp	r1, r3
	return clst * fs->csize + fs->database;
 8004934:	bf3d      	ittte	cc
 8004936:	8943      	ldrhcc	r3, [r0, #10]
 8004938:	6b00      	ldrcc	r0, [r0, #48]	; 0x30
 800493a:	fb01 0003 	mlacc	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800493e:	2000      	movcs	r0, #0
}
 8004940:	4770      	bx	lr

08004942 <clmt_clust>:
{
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004942:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004944:	6802      	ldr	r2, [r0, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004946:	3304      	adds	r3, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004948:	0a49      	lsrs	r1, r1, #9
 800494a:	8952      	ldrh	r2, [r2, #10]
 800494c:	fbb1 f1f2 	udiv	r1, r1, r2
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004950:	6818      	ldr	r0, [r3, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004952:	b130      	cbz	r0, 8004962 <clmt_clust+0x20>
		if (cl < ncl) break;	/* In this fragment? */
 8004954:	4281      	cmp	r1, r0
 8004956:	d302      	bcc.n	800495e <clmt_clust+0x1c>
		cl -= ncl; tbl++;		/* Next fragment */
 8004958:	1a09      	subs	r1, r1, r0
 800495a:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800495c:	e7f8      	b.n	8004950 <clmt_clust+0xe>
	}
	return cl + *tbl;	/* Return the cluster number */
 800495e:	6858      	ldr	r0, [r3, #4]
 8004960:	4408      	add	r0, r1
}
 8004962:	4770      	bx	lr

08004964 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004964:	6802      	ldr	r2, [r0, #0]
{
 8004966:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 8004968:	b152      	cbz	r2, 8004980 <get_ldnumber+0x1c>
 800496a:	4611      	mov	r1, r2
 800496c:	460b      	mov	r3, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800496e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004972:	2c20      	cmp	r4, #32
 8004974:	d90c      	bls.n	8004990 <get_ldnumber+0x2c>
 8004976:	2c3a      	cmp	r4, #58	; 0x3a
 8004978:	d1f8      	bne.n	800496c <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0';
 800497a:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800497c:	428b      	cmp	r3, r1
 800497e:	d002      	beq.n	8004986 <get_ldnumber+0x22>
	int vol = -1;
 8004980:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 8004984:	bd10      	pop	{r4, pc}
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004986:	7812      	ldrb	r2, [r2, #0]
 8004988:	2a30      	cmp	r2, #48	; 0x30
 800498a:	d1f9      	bne.n	8004980 <get_ldnumber+0x1c>
					*path = ++tt;
 800498c:	3301      	adds	r3, #1
 800498e:	6003      	str	r3, [r0, #0]
		vol = 0;		/* Drive 0 */
 8004990:	2000      	movs	r0, #0
 8004992:	bd10      	pop	{r4, pc}

08004994 <mem_cpy.part.0>:
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004994:	3801      	subs	r0, #1
 8004996:	440a      	add	r2, r1
			*d++ = *s++;
 8004998:	f811 3b01 	ldrb.w	r3, [r1], #1
 800499c:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 80049a0:	4291      	cmp	r1, r2
 80049a2:	d1f9      	bne.n	8004998 <mem_cpy.part.0+0x4>
}
 80049a4:	4770      	bx	lr

080049a6 <ld_clust.isra.1>:
	rv = rv << 8 | ptr[0];
 80049a6:	7eca      	ldrb	r2, [r1, #27]
 80049a8:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32) {
 80049aa:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
 80049ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 80049b0:	bf01      	itttt	eq
 80049b2:	7d48      	ldrbeq	r0, [r1, #21]
 80049b4:	7d0a      	ldrbeq	r2, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80049b6:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 80049ba:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 80049be:	4618      	mov	r0, r3
 80049c0:	4770      	bx	lr

080049c2 <st_clust.isra.2>:
	*ptr++ = (BYTE)val; val >>= 8;
 80049c2:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80049c6:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 80049c8:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 80049ca:	7803      	ldrb	r3, [r0, #0]
 80049cc:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80049ce:	bf01      	itttt	eq
 80049d0:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 80049d2:	750a      	strbeq	r2, [r1, #20]
 80049d4:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
 80049d6:	754a      	strbeq	r2, [r1, #21]
 80049d8:	4770      	bx	lr

080049da <get_fileinfo.part.3>:
void get_fileinfo (		/* No return code */
 80049da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		c = (TCHAR)dp->dir[i++];
 80049dc:	6a04      	ldr	r4, [r0, #32]
 80049de:	2300      	movs	r3, #0
 80049e0:	1e65      	subs	r5, r4, #1
 80049e2:	4618      	mov	r0, r3
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 80049e4:	262e      	movs	r6, #46	; 0x2e
		c = (TCHAR)dp->dir[i++];
 80049e6:	f815 2f01 	ldrb.w	r2, [r5, #1]!
		if (c == ' ') continue;				/* Skip padding spaces */
 80049ea:	2a20      	cmp	r2, #32
		c = (TCHAR)dp->dir[i++];
 80049ec:	f100 0001 	add.w	r0, r0, #1
		if (c == ' ') continue;				/* Skip padding spaces */
 80049f0:	d00a      	beq.n	8004a08 <get_fileinfo.part.3+0x2e>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80049f2:	2a05      	cmp	r2, #5
 80049f4:	bf08      	it	eq
 80049f6:	22e5      	moveq	r2, #229	; 0xe5
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 80049f8:	2809      	cmp	r0, #9
 80049fa:	bf02      	ittt	eq
 80049fc:	18cf      	addeq	r7, r1, r3
 80049fe:	3301      	addeq	r3, #1
 8004a00:	727e      	strbeq	r6, [r7, #9]
		fno->fname[j++] = c;
 8004a02:	18cf      	adds	r7, r1, r3
 8004a04:	3301      	adds	r3, #1
 8004a06:	727a      	strb	r2, [r7, #9]
	while (i < 11) {		/* Copy name body and extension */
 8004a08:	280b      	cmp	r0, #11
 8004a0a:	d1ec      	bne.n	80049e6 <get_fileinfo.part.3+0xc>
	fno->fname[j] = 0;
 8004a0c:	440b      	add	r3, r1
 8004a0e:	2200      	movs	r2, #0
 8004a10:	725a      	strb	r2, [r3, #9]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8004a12:	7ae3      	ldrb	r3, [r4, #11]
 8004a14:	720b      	strb	r3, [r1, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8004a16:	f104 001c 	add.w	r0, r4, #28
 8004a1a:	f7ff feef 	bl	80047fc <ld_dword>
 8004a1e:	6008      	str	r0, [r1, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8004a20:	f104 0016 	add.w	r0, r4, #22
 8004a24:	f7ff feea 	bl	80047fc <ld_dword>
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8004a28:	80c8      	strh	r0, [r1, #6]
 8004a2a:	0c00      	lsrs	r0, r0, #16
 8004a2c:	8088      	strh	r0, [r1, #4]
 8004a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004a30 <sync_window.part.4>:
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8004a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		wsect = fs->winsect;	/* Current sector number */
 8004a32:	6b45      	ldr	r5, [r0, #52]	; 0x34
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004a34:	f100 0738 	add.w	r7, r0, #56	; 0x38
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8004a38:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	462a      	mov	r2, r5
 8004a3e:	4639      	mov	r1, r7
 8004a40:	7840      	ldrb	r0, [r0, #1]
 8004a42:	f7ff febf 	bl	80047c4 <disk_write>
 8004a46:	b9a0      	cbnz	r0, 8004a72 <sync_window.part.4+0x42>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004a48:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004a4a:	6a22      	ldr	r2, [r4, #32]
			fs->wflag = 0;
 8004a4c:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004a4e:	1aeb      	subs	r3, r5, r3
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d301      	bcc.n	8004a58 <sync_window.part.4+0x28>
	FRESULT res = FR_OK;
 8004a54:	2000      	movs	r0, #0
 8004a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004a58:	78a6      	ldrb	r6, [r4, #2]
 8004a5a:	2e01      	cmp	r6, #1
 8004a5c:	d9fa      	bls.n	8004a54 <sync_window.part.4+0x24>
					wsect += fs->fsize;
 8004a5e:	6a23      	ldr	r3, [r4, #32]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004a60:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 8004a62:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8004a64:	462a      	mov	r2, r5
 8004a66:	2301      	movs	r3, #1
 8004a68:	4639      	mov	r1, r7
 8004a6a:	f7ff feab 	bl	80047c4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004a6e:	3e01      	subs	r6, #1
 8004a70:	e7f3      	b.n	8004a5a <sync_window.part.4+0x2a>
			res = FR_DISK_ERR;
 8004a72:	2001      	movs	r0, #1
}
 8004a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004a76 <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004a76:	78c3      	ldrb	r3, [r0, #3]
 8004a78:	b10b      	cbz	r3, 8004a7e <sync_window+0x8>
 8004a7a:	f7ff bfd9 	b.w	8004a30 <sync_window.part.4>
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	4770      	bx	lr

08004a82 <sync_fs>:
{
 8004a82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a84:	4604      	mov	r4, r0
	res = sync_window(fs);
 8004a86:	f7ff fff6 	bl	8004a76 <sync_window>
 8004a8a:	4605      	mov	r5, r0
	if (res == FR_OK) {
 8004a8c:	2800      	cmp	r0, #0
 8004a8e:	d142      	bne.n	8004b16 <sync_fs+0x94>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004a90:	7823      	ldrb	r3, [r4, #0]
 8004a92:	2b03      	cmp	r3, #3
 8004a94:	d137      	bne.n	8004b06 <sync_fs+0x84>
 8004a96:	7927      	ldrb	r7, [r4, #4]
 8004a98:	2f01      	cmp	r7, #1
 8004a9a:	d134      	bne.n	8004b06 <sync_fs+0x84>
			mem_set(fs->win, 0, SS(fs));
 8004a9c:	f104 0638 	add.w	r6, r4, #56	; 0x38
 8004aa0:	4601      	mov	r1, r0
 8004aa2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004aa6:	4630      	mov	r0, r6
 8004aa8:	f7ff feb8 	bl	800481c <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 8004aac:	2355      	movs	r3, #85	; 0x55
 8004aae:	f884 3236 	strb.w	r3, [r4, #566]	; 0x236
	*ptr++ = (BYTE)val;
 8004ab2:	23aa      	movs	r3, #170	; 0xaa
 8004ab4:	f884 3237 	strb.w	r3, [r4, #567]	; 0x237
	*ptr++ = (BYTE)val; val >>= 8;
 8004ab8:	2352      	movs	r3, #82	; 0x52
	*ptr++ = (BYTE)val;
 8004aba:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 8004abc:	2172      	movs	r1, #114	; 0x72
 8004abe:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	*ptr++ = (BYTE)val; val >>= 8;
 8004ac2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	*ptr++ = (BYTE)val; val >>= 8;
 8004ac6:	2361      	movs	r3, #97	; 0x61
 8004ac8:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	*ptr++ = (BYTE)val;
 8004acc:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
	*ptr++ = (BYTE)val; val >>= 8;
 8004ad0:	f884 221e 	strb.w	r2, [r4, #542]	; 0x21e
	*ptr++ = (BYTE)val;
 8004ad4:	f884 321f 	strb.w	r3, [r4, #543]	; 0x21f
	*ptr++ = (BYTE)val; val >>= 8;
 8004ad8:	f884 121c 	strb.w	r1, [r4, #540]	; 0x21c
	*ptr++ = (BYTE)val; val >>= 8;
 8004adc:	f884 121d 	strb.w	r1, [r4, #541]	; 0x21d
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004ae0:	f504 7008 	add.w	r0, r4, #544	; 0x220
 8004ae4:	6961      	ldr	r1, [r4, #20]
 8004ae6:	f7ff fe91 	bl	800480c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004aea:	6921      	ldr	r1, [r4, #16]
 8004aec:	f504 7009 	add.w	r0, r4, #548	; 0x224
 8004af0:	f7ff fe8c 	bl	800480c <st_dword>
			fs->winsect = fs->volbase + 1;
 8004af4:	6a62      	ldr	r2, [r4, #36]	; 0x24
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004af6:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 8004af8:	3201      	adds	r2, #1
 8004afa:	6362      	str	r2, [r4, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004afc:	463b      	mov	r3, r7
 8004afe:	4631      	mov	r1, r6
 8004b00:	f7ff fe60 	bl	80047c4 <disk_write>
			fs->fsi_flag = 0;
 8004b04:	7125      	strb	r5, [r4, #4]
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004b06:	2200      	movs	r2, #0
 8004b08:	4611      	mov	r1, r2
 8004b0a:	7860      	ldrb	r0, [r4, #1]
 8004b0c:	f7ff fe68 	bl	80047e0 <disk_ioctl>
 8004b10:	3000      	adds	r0, #0
 8004b12:	bf18      	it	ne
 8004b14:	2001      	movne	r0, #1
}
 8004b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004b18 <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004b18:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004b1a:	428b      	cmp	r3, r1
{
 8004b1c:	b570      	push	{r4, r5, r6, lr}
 8004b1e:	4606      	mov	r6, r0
 8004b20:	460d      	mov	r5, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004b22:	d012      	beq.n	8004b4a <move_window+0x32>
		res = sync_window(fs);		/* Write-back changes */
 8004b24:	f7ff ffa7 	bl	8004a76 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004b28:	4604      	mov	r4, r0
 8004b2a:	b960      	cbnz	r0, 8004b46 <move_window+0x2e>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004b2c:	462a      	mov	r2, r5
 8004b2e:	2301      	movs	r3, #1
 8004b30:	f106 0138 	add.w	r1, r6, #56	; 0x38
 8004b34:	7870      	ldrb	r0, [r6, #1]
 8004b36:	f7ff fe37 	bl	80047a8 <disk_read>
 8004b3a:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
 8004b3c:	bf1c      	itt	ne
 8004b3e:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 8004b42:	2401      	movne	r4, #1
			fs->winsect = sector;
 8004b44:	6375      	str	r5, [r6, #52]	; 0x34
}
 8004b46:	4620      	mov	r0, r4
 8004b48:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_OK;
 8004b4a:	2400      	movs	r4, #0
 8004b4c:	e7fb      	b.n	8004b46 <move_window+0x2e>
	...

08004b50 <check_fs>:
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004b50:	2300      	movs	r3, #0
{
 8004b52:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004b54:	70c3      	strb	r3, [r0, #3]
 8004b56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b5a:	6343      	str	r3, [r0, #52]	; 0x34
{
 8004b5c:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004b5e:	f7ff ffdb 	bl	8004b18 <move_window>
 8004b62:	bb30      	cbnz	r0, 8004bb2 <check_fs+0x62>
	rv = rv << 8 | ptr[0];
 8004b64:	f894 2237 	ldrb.w	r2, [r4, #567]	; 0x237
 8004b68:	f894 3236 	ldrb.w	r3, [r4, #566]	; 0x236
 8004b6c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8004b70:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d11e      	bne.n	8004bb6 <check_fs+0x66>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8004b78:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8004b7c:	2be9      	cmp	r3, #233	; 0xe9
 8004b7e:	d005      	beq.n	8004b8c <check_fs+0x3c>
 8004b80:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004b82:	4a10      	ldr	r2, [pc, #64]	; (8004bc4 <check_fs+0x74>)
 8004b84:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d116      	bne.n	8004bba <check_fs+0x6a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8004b8c:	f104 006e 	add.w	r0, r4, #110	; 0x6e
 8004b90:	f7ff fe34 	bl	80047fc <ld_dword>
 8004b94:	4b0c      	ldr	r3, [pc, #48]	; (8004bc8 <check_fs+0x78>)
 8004b96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8004b9a:	4298      	cmp	r0, r3
 8004b9c:	d00f      	beq.n	8004bbe <check_fs+0x6e>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8004b9e:	f104 008a 	add.w	r0, r4, #138	; 0x8a
 8004ba2:	f7ff fe2b 	bl	80047fc <ld_dword>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8004ba6:	4b09      	ldr	r3, [pc, #36]	; (8004bcc <check_fs+0x7c>)
 8004ba8:	4298      	cmp	r0, r3
 8004baa:	bf14      	ite	ne
 8004bac:	2002      	movne	r0, #2
 8004bae:	2000      	moveq	r0, #0
 8004bb0:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004bb2:	2004      	movs	r0, #4
 8004bb4:	bd10      	pop	{r4, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8004bb6:	2003      	movs	r0, #3
 8004bb8:	bd10      	pop	{r4, pc}
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8004bba:	2002      	movs	r0, #2
 8004bbc:	bd10      	pop	{r4, pc}
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8004bbe:	2000      	movs	r0, #0
}
 8004bc0:	bd10      	pop	{r4, pc}
 8004bc2:	bf00      	nop
 8004bc4:	009000eb 	.word	0x009000eb
 8004bc8:	00544146 	.word	0x00544146
 8004bcc:	33544146 	.word	0x33544146

08004bd0 <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004bd0:	2901      	cmp	r1, #1
{
 8004bd2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bd6:	4605      	mov	r5, r0
 8004bd8:	460c      	mov	r4, r1
 8004bda:	4617      	mov	r7, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004bdc:	d972      	bls.n	8004cc4 <put_fat+0xf4>
 8004bde:	69c3      	ldr	r3, [r0, #28]
 8004be0:	4299      	cmp	r1, r3
 8004be2:	d26f      	bcs.n	8004cc4 <put_fat+0xf4>
		switch (fs->fs_type) {
 8004be4:	7803      	ldrb	r3, [r0, #0]
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d03f      	beq.n	8004c6a <put_fat+0x9a>
 8004bea:	2b03      	cmp	r3, #3
 8004bec:	d050      	beq.n	8004c90 <put_fat+0xc0>
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d168      	bne.n	8004cc4 <put_fat+0xf4>
			bc = (UINT)clst; bc += bc / 2;
 8004bf2:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004bf6:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8004bf8:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 8004bfc:	f7ff ff8c 	bl	8004b18 <move_window>
 8004c00:	4606      	mov	r6, r0
			if (res != FR_OK) break;
 8004c02:	bb38      	cbnz	r0, 8004c54 <put_fat+0x84>
			p = fs->win + bc++ % SS(fs);
 8004c04:	f105 0938 	add.w	r9, r5, #56	; 0x38
 8004c08:	f108 0a01 	add.w	sl, r8, #1
 8004c0c:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004c10:	f014 0401 	ands.w	r4, r4, #1
 8004c14:	bf1f      	itttt	ne
 8004c16:	f819 3008 	ldrbne.w	r3, [r9, r8]
 8004c1a:	f003 020f 	andne.w	r2, r3, #15
 8004c1e:	013b      	lslne	r3, r7, #4
 8004c20:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 8004c24:	bf14      	ite	ne
 8004c26:	4313      	orrne	r3, r2
 8004c28:	b2fb      	uxtbeq	r3, r7
 8004c2a:	f809 3008 	strb.w	r3, [r9, r8]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004c2e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
			fs->wflag = 1;
 8004c30:	2301      	movs	r3, #1
 8004c32:	70eb      	strb	r3, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004c34:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 8004c38:	4628      	mov	r0, r5
 8004c3a:	f7ff ff6d 	bl	8004b18 <move_window>
			if (res != FR_OK) break;
 8004c3e:	4606      	mov	r6, r0
 8004c40:	b940      	cbnz	r0, 8004c54 <put_fat+0x84>
			p = fs->win + bc % SS(fs);
 8004c42:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004c46:	b144      	cbz	r4, 8004c5a <put_fat+0x8a>
 8004c48:	f3c7 1707 	ubfx	r7, r7, #4, #8
 8004c4c:	f809 700a 	strb.w	r7, [r9, sl]
			fs->wflag = 1;
 8004c50:	2301      	movs	r3, #1
 8004c52:	70eb      	strb	r3, [r5, #3]
}
 8004c54:	4630      	mov	r0, r6
 8004c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004c5a:	f819 300a 	ldrb.w	r3, [r9, sl]
 8004c5e:	f3c7 2703 	ubfx	r7, r7, #8, #4
 8004c62:	f023 030f 	bic.w	r3, r3, #15
 8004c66:	431f      	orrs	r7, r3
 8004c68:	e7f0      	b.n	8004c4c <put_fat+0x7c>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004c6a:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8004c6c:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8004c70:	f7ff ff52 	bl	8004b18 <move_window>
			if (res != FR_OK) break;
 8004c74:	4606      	mov	r6, r0
 8004c76:	2800      	cmp	r0, #0
 8004c78:	d1ec      	bne.n	8004c54 <put_fat+0x84>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004c7a:	0064      	lsls	r4, r4, #1
 8004c7c:	f105 0338 	add.w	r3, r5, #56	; 0x38
 8004c80:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8004c84:	191a      	adds	r2, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 8004c86:	551f      	strb	r7, [r3, r4]
 8004c88:	f3c7 2707 	ubfx	r7, r7, #8, #8
	*ptr++ = (BYTE)val;
 8004c8c:	7057      	strb	r7, [r2, #1]
 8004c8e:	e7df      	b.n	8004c50 <put_fat+0x80>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004c90:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8004c92:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8004c96:	f7ff ff3f 	bl	8004b18 <move_window>
			if (res != FR_OK) break;
 8004c9a:	4606      	mov	r6, r0
 8004c9c:	2800      	cmp	r0, #0
 8004c9e:	d1d9      	bne.n	8004c54 <put_fat+0x84>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004ca0:	00a4      	lsls	r4, r4, #2
 8004ca2:	f105 0338 	add.w	r3, r5, #56	; 0x38
 8004ca6:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8004caa:	441c      	add	r4, r3
 8004cac:	4620      	mov	r0, r4
 8004cae:	f7ff fda5 	bl	80047fc <ld_dword>
 8004cb2:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
 8004cb6:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004cba:	4339      	orrs	r1, r7
 8004cbc:	4620      	mov	r0, r4
 8004cbe:	f7ff fda5 	bl	800480c <st_dword>
 8004cc2:	e7c5      	b.n	8004c50 <put_fat+0x80>
	FRESULT res = FR_INT_ERR;
 8004cc4:	2602      	movs	r6, #2
 8004cc6:	e7c5      	b.n	8004c54 <put_fat+0x84>

08004cc8 <get_fat.isra.8>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004cc8:	2901      	cmp	r1, #1
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 8004cca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ccc:	4605      	mov	r5, r0
 8004cce:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004cd0:	d952      	bls.n	8004d78 <get_fat.isra.8+0xb0>
 8004cd2:	69c3      	ldr	r3, [r0, #28]
 8004cd4:	4299      	cmp	r1, r3
 8004cd6:	d24f      	bcs.n	8004d78 <get_fat.isra.8+0xb0>
		switch (fs->fs_type) {
 8004cd8:	7803      	ldrb	r3, [r0, #0]
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d029      	beq.n	8004d32 <get_fat.isra.8+0x6a>
 8004cde:	2b03      	cmp	r3, #3
 8004ce0:	d038      	beq.n	8004d54 <get_fat.isra.8+0x8c>
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d148      	bne.n	8004d78 <get_fat.isra.8+0xb0>
			bc = (UINT)clst; bc += bc / 2;
 8004ce6:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004cea:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8004cec:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 8004cf0:	f7ff ff12 	bl	8004b18 <move_window>
 8004cf4:	b110      	cbz	r0, 8004cfc <get_fat.isra.8+0x34>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004cf6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 8004cfc:	1c77      	adds	r7, r6, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004cfe:	6aa9      	ldr	r1, [r5, #40]	; 0x28
			wc = fs->win[bc++ % SS(fs)];
 8004d00:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8004d04:	442e      	add	r6, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004d06:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 8004d0a:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
 8004d0c:	f896 6038 	ldrb.w	r6, [r6, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004d10:	f7ff ff02 	bl	8004b18 <move_window>
 8004d14:	2800      	cmp	r0, #0
 8004d16:	d1ee      	bne.n	8004cf6 <get_fat.isra.8+0x2e>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004d18:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8004d1c:	443d      	add	r5, r7
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004d1e:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8004d20:	f895 0038 	ldrb.w	r0, [r5, #56]	; 0x38
 8004d24:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004d28:	bf4c      	ite	mi
 8004d2a:	0900      	lsrmi	r0, r0, #4
 8004d2c:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 8004d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004d32:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8004d34:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8004d38:	f7ff feee 	bl	8004b18 <move_window>
 8004d3c:	2800      	cmp	r0, #0
 8004d3e:	d1da      	bne.n	8004cf6 <get_fat.isra.8+0x2e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004d40:	0064      	lsls	r4, r4, #1
 8004d42:	3538      	adds	r5, #56	; 0x38
 8004d44:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8004d48:	192b      	adds	r3, r5, r4
	rv = rv << 8 | ptr[0];
 8004d4a:	5d28      	ldrb	r0, [r5, r4]
 8004d4c:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004d4e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8004d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004d54:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8004d56:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8004d5a:	f7ff fedd 	bl	8004b18 <move_window>
 8004d5e:	2800      	cmp	r0, #0
 8004d60:	d1c9      	bne.n	8004cf6 <get_fat.isra.8+0x2e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004d62:	00a4      	lsls	r4, r4, #2
 8004d64:	f105 0038 	add.w	r0, r5, #56	; 0x38
 8004d68:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8004d6c:	4420      	add	r0, r4
 8004d6e:	f7ff fd45 	bl	80047fc <ld_dword>
 8004d72:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 8004d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = 1;	/* Internal error */
 8004d78:	2001      	movs	r0, #1
}
 8004d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004d7c <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004d7c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
{
 8004d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d82:	4606      	mov	r6, r0
 8004d84:	460d      	mov	r5, r1
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004d86:	d301      	bcc.n	8004d8c <dir_sdi+0x10>
		return FR_INT_ERR;
 8004d88:	2002      	movs	r0, #2
 8004d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004d8c:	06ca      	lsls	r2, r1, #27
 8004d8e:	d1fb      	bne.n	8004d88 <dir_sdi+0xc>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004d90:	6882      	ldr	r2, [r0, #8]
	FATFS *fs = dp->obj.fs;
 8004d92:	6804      	ldr	r4, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 8004d94:	6171      	str	r1, [r6, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004d96:	b9c2      	cbnz	r2, 8004dca <dir_sdi+0x4e>
 8004d98:	7823      	ldrb	r3, [r4, #0]
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d901      	bls.n	8004da2 <dir_sdi+0x26>
		clst = fs->dirbase;
 8004d9e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004da0:	b9a3      	cbnz	r3, 8004dcc <dir_sdi+0x50>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004da2:	8923      	ldrh	r3, [r4, #8]
 8004da4:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 8004da8:	d9ee      	bls.n	8004d88 <dir_sdi+0xc>
		dp->sect = fs->dirbase;
 8004daa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004dac:	61f3      	str	r3, [r6, #28]
	if (!dp->sect) return FR_INT_ERR;
 8004dae:	69f3      	ldr	r3, [r6, #28]
	dp->clust = clst;					/* Current cluster# */
 8004db0:	61b2      	str	r2, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d0e8      	beq.n	8004d88 <dir_sdi+0xc>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004db6:	eb03 2355 	add.w	r3, r3, r5, lsr #9
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004dba:	3438      	adds	r4, #56	; 0x38
 8004dbc:	f3c5 0508 	ubfx	r5, r5, #0, #9
 8004dc0:	442c      	add	r4, r5
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004dc2:	61f3      	str	r3, [r6, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004dc4:	6234      	str	r4, [r6, #32]
	return FR_OK;
 8004dc6:	2000      	movs	r0, #0
 8004dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004dca:	4613      	mov	r3, r2
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004dcc:	8967      	ldrh	r7, [r4, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004dce:	461a      	mov	r2, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004dd0:	027f      	lsls	r7, r7, #9
		while (ofs >= csz) {				/* Follow cluster chain */
 8004dd2:	42bd      	cmp	r5, r7
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004dd4:	4611      	mov	r1, r2
		while (ofs >= csz) {				/* Follow cluster chain */
 8004dd6:	d204      	bcs.n	8004de2 <dir_sdi+0x66>
		dp->sect = clust2sect(fs, clst);
 8004dd8:	4620      	mov	r0, r4
 8004dda:	f7ff fda7 	bl	800492c <clust2sect>
 8004dde:	61f0      	str	r0, [r6, #28]
 8004de0:	e7e5      	b.n	8004dae <dir_sdi+0x32>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004de2:	6830      	ldr	r0, [r6, #0]
 8004de4:	f7ff ff70 	bl	8004cc8 <get_fat.isra.8>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004de8:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004dea:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004dec:	d006      	beq.n	8004dfc <dir_sdi+0x80>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004dee:	2801      	cmp	r0, #1
 8004df0:	d9ca      	bls.n	8004d88 <dir_sdi+0xc>
 8004df2:	69e3      	ldr	r3, [r4, #28]
 8004df4:	4298      	cmp	r0, r3
 8004df6:	d2c7      	bcs.n	8004d88 <dir_sdi+0xc>
			ofs -= csz;
 8004df8:	1bed      	subs	r5, r5, r7
 8004dfa:	e7ea      	b.n	8004dd2 <dir_sdi+0x56>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004dfc:	2001      	movs	r0, #1
}
 8004dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004e00 <create_chain>:
{
 8004e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e04:	4680      	mov	r8, r0
	FATFS *fs = obj->fs;
 8004e06:	6805      	ldr	r5, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 8004e08:	460f      	mov	r7, r1
 8004e0a:	b971      	cbnz	r1, 8004e2a <create_chain+0x2a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004e0c:	692e      	ldr	r6, [r5, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004e0e:	b1f6      	cbz	r6, 8004e4e <create_chain+0x4e>
 8004e10:	69eb      	ldr	r3, [r5, #28]
 8004e12:	429e      	cmp	r6, r3
 8004e14:	bf28      	it	cs
 8004e16:	2601      	movcs	r6, #1
 8004e18:	4634      	mov	r4, r6
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004e1a:	69eb      	ldr	r3, [r5, #28]
			ncl++;							/* Next cluster */
 8004e1c:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004e1e:	429c      	cmp	r4, r3
 8004e20:	d318      	bcc.n	8004e54 <create_chain+0x54>
				if (ncl > scl) return 0;	/* No free cluster */
 8004e22:	2e01      	cmp	r6, #1
 8004e24:	d815      	bhi.n	8004e52 <create_chain+0x52>
 8004e26:	2400      	movs	r4, #0
 8004e28:	e009      	b.n	8004e3e <create_chain+0x3e>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004e2a:	4628      	mov	r0, r5
 8004e2c:	f7ff ff4c 	bl	8004cc8 <get_fat.isra.8>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004e30:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004e32:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004e34:	d937      	bls.n	8004ea6 <create_chain+0xa6>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004e36:	1c43      	adds	r3, r0, #1
 8004e38:	d104      	bne.n	8004e44 <create_chain+0x44>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004e3a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
 8004e3e:	4620      	mov	r0, r4
 8004e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004e44:	69eb      	ldr	r3, [r5, #28]
 8004e46:	4298      	cmp	r0, r3
 8004e48:	d3f9      	bcc.n	8004e3e <create_chain+0x3e>
 8004e4a:	463e      	mov	r6, r7
 8004e4c:	e7e4      	b.n	8004e18 <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004e4e:	2601      	movs	r6, #1
 8004e50:	e7e2      	b.n	8004e18 <create_chain+0x18>
				ncl = 2;
 8004e52:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004e54:	4621      	mov	r1, r4
 8004e56:	f8d8 0000 	ldr.w	r0, [r8]
 8004e5a:	f7ff ff35 	bl	8004cc8 <get_fat.isra.8>
			if (cs == 0) break;				/* Found a free cluster */
 8004e5e:	b130      	cbz	r0, 8004e6e <create_chain+0x6e>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004e60:	2801      	cmp	r0, #1
 8004e62:	d020      	beq.n	8004ea6 <create_chain+0xa6>
 8004e64:	3001      	adds	r0, #1
 8004e66:	d0e8      	beq.n	8004e3a <create_chain+0x3a>
			if (ncl == scl) return 0;		/* No free cluster */
 8004e68:	42b4      	cmp	r4, r6
 8004e6a:	d1d6      	bne.n	8004e1a <create_chain+0x1a>
 8004e6c:	e7db      	b.n	8004e26 <create_chain+0x26>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004e6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e72:	4621      	mov	r1, r4
 8004e74:	4628      	mov	r0, r5
 8004e76:	f7ff feab 	bl	8004bd0 <put_fat>
		if (res == FR_OK && clst != 0) {
 8004e7a:	b990      	cbnz	r0, 8004ea2 <create_chain+0xa2>
 8004e7c:	b957      	cbnz	r7, 8004e94 <create_chain+0x94>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004e7e:	69ea      	ldr	r2, [r5, #28]
 8004e80:	696b      	ldr	r3, [r5, #20]
		fs->last_clst = ncl;
 8004e82:	612c      	str	r4, [r5, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004e84:	3a02      	subs	r2, #2
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d90f      	bls.n	8004eaa <create_chain+0xaa>
		fs->fsi_flag |= 1;
 8004e8a:	792b      	ldrb	r3, [r5, #4]
 8004e8c:	f043 0301 	orr.w	r3, r3, #1
 8004e90:	712b      	strb	r3, [r5, #4]
 8004e92:	e7d4      	b.n	8004e3e <create_chain+0x3e>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004e94:	4622      	mov	r2, r4
 8004e96:	4639      	mov	r1, r7
 8004e98:	4628      	mov	r0, r5
 8004e9a:	f7ff fe99 	bl	8004bd0 <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004e9e:	2800      	cmp	r0, #0
 8004ea0:	d0ed      	beq.n	8004e7e <create_chain+0x7e>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004ea2:	2801      	cmp	r0, #1
 8004ea4:	d0c9      	beq.n	8004e3a <create_chain+0x3a>
 8004ea6:	2401      	movs	r4, #1
 8004ea8:	e7c9      	b.n	8004e3e <create_chain+0x3e>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	616b      	str	r3, [r5, #20]
 8004eae:	e7ec      	b.n	8004e8a <create_chain+0x8a>

08004eb0 <remove_chain>:
{
 8004eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eb2:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004eb4:	2d01      	cmp	r5, #1
{
 8004eb6:	4607      	mov	r7, r0
 8004eb8:	4611      	mov	r1, r2
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004eba:	d801      	bhi.n	8004ec0 <remove_chain+0x10>
 8004ebc:	2002      	movs	r0, #2
 8004ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	FATFS *fs = obj->fs;
 8004ec0:	6804      	ldr	r4, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004ec2:	69e3      	ldr	r3, [r4, #28]
 8004ec4:	429d      	cmp	r5, r3
 8004ec6:	d2f9      	bcs.n	8004ebc <remove_chain+0xc>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004ec8:	b12a      	cbz	r2, 8004ed6 <remove_chain+0x26>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004eca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ece:	4620      	mov	r0, r4
 8004ed0:	f7ff fe7e 	bl	8004bd0 <put_fat>
		if (res != FR_OK) return res;
 8004ed4:	bb08      	cbnz	r0, 8004f1a <remove_chain+0x6a>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004ed6:	4629      	mov	r1, r5
 8004ed8:	6838      	ldr	r0, [r7, #0]
 8004eda:	f7ff fef5 	bl	8004cc8 <get_fat.isra.8>
		if (nxt == 0) break;				/* Empty cluster? */
 8004ede:	4606      	mov	r6, r0
 8004ee0:	b908      	cbnz	r0, 8004ee6 <remove_chain+0x36>
	return FR_OK;
 8004ee2:	2000      	movs	r0, #0
 8004ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004ee6:	2801      	cmp	r0, #1
 8004ee8:	d0e8      	beq.n	8004ebc <remove_chain+0xc>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004eea:	1c43      	adds	r3, r0, #1
 8004eec:	d014      	beq.n	8004f18 <remove_chain+0x68>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004eee:	2200      	movs	r2, #0
 8004ef0:	4629      	mov	r1, r5
 8004ef2:	4620      	mov	r0, r4
 8004ef4:	f7ff fe6c 	bl	8004bd0 <put_fat>
			if (res != FR_OK) return res;
 8004ef8:	b978      	cbnz	r0, 8004f1a <remove_chain+0x6a>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004efa:	69e2      	ldr	r2, [r4, #28]
 8004efc:	6963      	ldr	r3, [r4, #20]
 8004efe:	1e91      	subs	r1, r2, #2
 8004f00:	428b      	cmp	r3, r1
 8004f02:	d205      	bcs.n	8004f10 <remove_chain+0x60>
			fs->free_clst++;
 8004f04:	3301      	adds	r3, #1
 8004f06:	6163      	str	r3, [r4, #20]
			fs->fsi_flag |= 1;
 8004f08:	7923      	ldrb	r3, [r4, #4]
 8004f0a:	f043 0301 	orr.w	r3, r3, #1
 8004f0e:	7123      	strb	r3, [r4, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004f10:	4296      	cmp	r6, r2
 8004f12:	4635      	mov	r5, r6
 8004f14:	d3df      	bcc.n	8004ed6 <remove_chain+0x26>
 8004f16:	e7e4      	b.n	8004ee2 <remove_chain+0x32>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004f18:	2001      	movs	r0, #1
}
 8004f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004f1c <unlock_fs>:
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8004f1c:	b140      	cbz	r0, 8004f30 <unlock_fs+0x14>
 8004f1e:	f1a1 030b 	sub.w	r3, r1, #11
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d904      	bls.n	8004f30 <unlock_fs+0x14>
 8004f26:	290f      	cmp	r1, #15
 8004f28:	d002      	beq.n	8004f30 <unlock_fs+0x14>
		ff_rel_grant(fs->sobj);
 8004f2a:	68c0      	ldr	r0, [r0, #12]
 8004f2c:	f001 b864 	b.w	8005ff8 <ff_rel_grant>
 8004f30:	4770      	bx	lr

08004f32 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8004f32:	b538      	push	{r3, r4, r5, lr}
 8004f34:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8004f36:	4604      	mov	r4, r0
 8004f38:	b1f0      	cbz	r0, 8004f78 <validate+0x46>
 8004f3a:	6803      	ldr	r3, [r0, #0]
 8004f3c:	b17b      	cbz	r3, 8004f5e <validate+0x2c>
 8004f3e:	781a      	ldrb	r2, [r3, #0]
 8004f40:	b1d2      	cbz	r2, 8004f78 <validate+0x46>
 8004f42:	8881      	ldrh	r1, [r0, #4]
 8004f44:	88da      	ldrh	r2, [r3, #6]
 8004f46:	4291      	cmp	r1, r2
 8004f48:	d116      	bne.n	8004f78 <validate+0x46>
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8004f4a:	68d8      	ldr	r0, [r3, #12]
 8004f4c:	f001 f84b 	bl	8005fe6 <ff_req_grant>
 8004f50:	4603      	mov	r3, r0
 8004f52:	b930      	cbnz	r0, 8004f62 <validate+0x30>
				res = FR_OK;
			} else {
				unlock_fs(obj->fs, FR_OK);
			}
		} else {
			res = FR_TIMEOUT;
 8004f54:	200f      	movs	r0, #15
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8004f56:	602b      	str	r3, [r5, #0]
	return res;
}
 8004f58:	bd38      	pop	{r3, r4, r5, pc}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8004f5a:	6823      	ldr	r3, [r4, #0]
 8004f5c:	e7fb      	b.n	8004f56 <validate+0x24>
 8004f5e:	2009      	movs	r0, #9
 8004f60:	e7f9      	b.n	8004f56 <validate+0x24>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8004f62:	6823      	ldr	r3, [r4, #0]
 8004f64:	7858      	ldrb	r0, [r3, #1]
 8004f66:	f7ff fc05 	bl	8004774 <disk_status>
 8004f6a:	f010 0001 	ands.w	r0, r0, #1
 8004f6e:	d0f4      	beq.n	8004f5a <validate+0x28>
				unlock_fs(obj->fs, FR_OK);
 8004f70:	2100      	movs	r1, #0
 8004f72:	6820      	ldr	r0, [r4, #0]
 8004f74:	f7ff ffd2 	bl	8004f1c <unlock_fs>
 8004f78:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	e7eb      	b.n	8004f56 <validate+0x24>

08004f7e <dir_next>:
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004f7e:	69c3      	ldr	r3, [r0, #28]
{
 8004f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f84:	4605      	mov	r5, r0
 8004f86:	460f      	mov	r7, r1
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004f88:	b1ab      	cbz	r3, 8004fb6 <dir_next+0x38>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004f8a:	6942      	ldr	r2, [r0, #20]
 8004f8c:	f102 0820 	add.w	r8, r2, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004f90:	f5b8 1f00 	cmp.w	r8, #2097152	; 0x200000
 8004f94:	d20f      	bcs.n	8004fb6 <dir_next+0x38>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004f96:	f3c8 0908 	ubfx	r9, r8, #0, #9
	FATFS *fs = dp->obj.fs;
 8004f9a:	6804      	ldr	r4, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004f9c:	f1b9 0f00 	cmp.w	r9, #0
 8004fa0:	d14f      	bne.n	8005042 <dir_next+0xc4>
		if (!dp->clust) {		/* Static table */
 8004fa2:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 8004fa8:	b941      	cbnz	r1, 8004fbc <dir_next+0x3e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004faa:	8923      	ldrh	r3, [r4, #8]
 8004fac:	ebb3 1f58 	cmp.w	r3, r8, lsr #5
 8004fb0:	d847      	bhi.n	8005042 <dir_next+0xc4>
				dp->sect = 0; return FR_NO_FILE;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	61eb      	str	r3, [r5, #28]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004fb6:	2004      	movs	r0, #4
 8004fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004fbc:	8963      	ldrh	r3, [r4, #10]
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	ea13 2358 	ands.w	r3, r3, r8, lsr #9
 8004fc4:	d13d      	bne.n	8005042 <dir_next+0xc4>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004fc6:	4620      	mov	r0, r4
 8004fc8:	f7ff fe7e 	bl	8004cc8 <get_fat.isra.8>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004fcc:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004fce:	4606      	mov	r6, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004fd0:	d802      	bhi.n	8004fd8 <dir_next+0x5a>
 8004fd2:	2002      	movs	r0, #2
 8004fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004fd8:	1c42      	adds	r2, r0, #1
 8004fda:	d102      	bne.n	8004fe2 <dir_next+0x64>
 8004fdc:	2001      	movs	r0, #1
 8004fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004fe2:	69e3      	ldr	r3, [r4, #28]
 8004fe4:	4298      	cmp	r0, r3
 8004fe6:	d326      	bcc.n	8005036 <dir_next+0xb8>
					if (!stretch) {								/* If no stretch, report EOT */
 8004fe8:	2f00      	cmp	r7, #0
 8004fea:	d0e2      	beq.n	8004fb2 <dir_next+0x34>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004fec:	69a9      	ldr	r1, [r5, #24]
 8004fee:	4628      	mov	r0, r5
 8004ff0:	f7ff ff06 	bl	8004e00 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004ff4:	4606      	mov	r6, r0
 8004ff6:	2800      	cmp	r0, #0
 8004ff8:	d037      	beq.n	800506a <dir_next+0xec>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004ffa:	2801      	cmp	r0, #1
 8004ffc:	d0e9      	beq.n	8004fd2 <dir_next+0x54>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004ffe:	1c43      	adds	r3, r0, #1
 8005000:	d0ec      	beq.n	8004fdc <dir_next+0x5e>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005002:	4620      	mov	r0, r4
 8005004:	f7ff fd37 	bl	8004a76 <sync_window>
 8005008:	4607      	mov	r7, r0
 800500a:	2800      	cmp	r0, #0
 800500c:	d1e6      	bne.n	8004fdc <dir_next+0x5e>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800500e:	4601      	mov	r1, r0
 8005010:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005014:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8005018:	f7ff fc00 	bl	800481c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800501c:	4631      	mov	r1, r6
 800501e:	4620      	mov	r0, r4
 8005020:	f7ff fc84 	bl	800492c <clust2sect>
						fs->wflag = 1;
 8005024:	f04f 0a01 	mov.w	sl, #1
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005028:	6360      	str	r0, [r4, #52]	; 0x34
 800502a:	8963      	ldrh	r3, [r4, #10]
 800502c:	429f      	cmp	r7, r3
 800502e:	d310      	bcc.n	8005052 <dir_next+0xd4>
					fs->winsect -= n;							/* Restore window offset */
 8005030:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005032:	1bdf      	subs	r7, r3, r7
 8005034:	6367      	str	r7, [r4, #52]	; 0x34
				dp->clust = clst;		/* Initialize data for new cluster */
 8005036:	61ae      	str	r6, [r5, #24]
				dp->sect = clust2sect(fs, clst);
 8005038:	4631      	mov	r1, r6
 800503a:	4620      	mov	r0, r4
 800503c:	f7ff fc76 	bl	800492c <clust2sect>
 8005040:	61e8      	str	r0, [r5, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005042:	3438      	adds	r4, #56	; 0x38
 8005044:	444c      	add	r4, r9
	dp->dptr = ofs;						/* Current entry */
 8005046:	f8c5 8014 	str.w	r8, [r5, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800504a:	622c      	str	r4, [r5, #32]
	return FR_OK;
 800504c:	2000      	movs	r0, #0
 800504e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
						fs->wflag = 1;
 8005052:	f884 a003 	strb.w	sl, [r4, #3]
 8005056:	4620      	mov	r0, r4
 8005058:	f7ff fcea 	bl	8004a30 <sync_window.part.4>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800505c:	2800      	cmp	r0, #0
 800505e:	d1bd      	bne.n	8004fdc <dir_next+0x5e>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005060:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005062:	3301      	adds	r3, #1
 8005064:	3701      	adds	r7, #1
 8005066:	6363      	str	r3, [r4, #52]	; 0x34
 8005068:	e7df      	b.n	800502a <dir_next+0xac>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800506a:	2007      	movs	r0, #7
}
 800506c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005070 <follow_path>:
{
 8005070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8005074:	780b      	ldrb	r3, [r1, #0]
	FATFS *fs = obj->fs;
 8005076:	6806      	ldr	r6, [r0, #0]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8005078:	2b2f      	cmp	r3, #47	; 0x2f
{
 800507a:	4604      	mov	r4, r0
 800507c:	460d      	mov	r5, r1
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 800507e:	d001      	beq.n	8005084 <follow_path+0x14>
 8005080:	2b5c      	cmp	r3, #92	; 0x5c
 8005082:	d10a      	bne.n	800509a <follow_path+0x2a>
 8005084:	462a      	mov	r2, r5
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005086:	7813      	ldrb	r3, [r2, #0]
 8005088:	2b2f      	cmp	r3, #47	; 0x2f
 800508a:	4615      	mov	r5, r2
 800508c:	f102 0201 	add.w	r2, r2, #1
 8005090:	d0f9      	beq.n	8005086 <follow_path+0x16>
 8005092:	2b5c      	cmp	r3, #92	; 0x5c
 8005094:	d0f7      	beq.n	8005086 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005096:	2300      	movs	r3, #0
 8005098:	e000      	b.n	800509c <follow_path+0x2c>
		obj->sclust = fs->cdir;				/* Start from current directory */
 800509a:	69b3      	ldr	r3, [r6, #24]
		obj->sclust = 0;					/* Start from root directory */
 800509c:	60a3      	str	r3, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800509e:	782b      	ldrb	r3, [r5, #0]
 80050a0:	2b1f      	cmp	r3, #31
 80050a2:	d933      	bls.n	800510c <follow_path+0x9c>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80050a4:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 8005260 <follow_path+0x1f0>
	p = *path; sfn = dp->fn;
 80050a8:	f104 0724 	add.w	r7, r4, #36	; 0x24
	mem_set(sfn, ' ', 11);
 80050ac:	220b      	movs	r2, #11
 80050ae:	2120      	movs	r1, #32
 80050b0:	4638      	mov	r0, r7
 80050b2:	f7ff fbb3 	bl	800481c <mem_set>
	if (p[si] == '.') { /* Is this a dot entry? */
 80050b6:	462b      	mov	r3, r5
 80050b8:	f813 2901 	ldrb.w	r2, [r3], #-1
 80050bc:	2a2e      	cmp	r2, #46	; 0x2e
 80050be:	d02e      	beq.n	800511e <follow_path+0xae>
 80050c0:	2100      	movs	r1, #0
 80050c2:	461a      	mov	r2, r3
 80050c4:	4608      	mov	r0, r1
 80050c6:	f04f 0e08 	mov.w	lr, #8
		c = (BYTE)p[si++];
 80050ca:	f812 3f01 	ldrb.w	r3, [r2, #1]!
		if (c <= ' ') break; 			/* Break if end of the path name */
 80050ce:	2b20      	cmp	r3, #32
		c = (BYTE)p[si++];
 80050d0:	f100 0001 	add.w	r0, r0, #1
		if (c <= ' ') break; 			/* Break if end of the path name */
 80050d4:	d90b      	bls.n	80050ee <follow_path+0x7e>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80050d6:	2b2f      	cmp	r3, #47	; 0x2f
 80050d8:	d167      	bne.n	80051aa <follow_path+0x13a>
 80050da:	182a      	adds	r2, r5, r0
 80050dc:	1b50      	subs	r0, r2, r5
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80050de:	f812 eb01 	ldrb.w	lr, [r2], #1
 80050e2:	f1be 0f2f 	cmp.w	lr, #47	; 0x2f
 80050e6:	d0f9      	beq.n	80050dc <follow_path+0x6c>
 80050e8:	f1be 0f5c 	cmp.w	lr, #92	; 0x5c
 80050ec:	d0f6      	beq.n	80050dc <follow_path+0x6c>
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80050ee:	2900      	cmp	r1, #0
 80050f0:	d071      	beq.n	80051d6 <follow_path+0x166>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80050f2:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 80050f6:	2ae5      	cmp	r2, #229	; 0xe5
 80050f8:	bf04      	itt	eq
 80050fa:	2205      	moveq	r2, #5
 80050fc:	f884 2024 	strbeq.w	r2, [r4, #36]	; 0x24
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005100:	2b20      	cmp	r3, #32
 8005102:	bf8c      	ite	hi
 8005104:	2300      	movhi	r3, #0
 8005106:	2304      	movls	r3, #4
	*path = p + si;						/* Return pointer to the next segment */
 8005108:	4405      	add	r5, r0
 800510a:	e021      	b.n	8005150 <follow_path+0xe0>
		dp->fn[NSFLAG] = NS_NONAME;
 800510c:	2380      	movs	r3, #128	; 0x80
 800510e:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8005112:	4620      	mov	r0, r4
 8005114:	2100      	movs	r1, #0
}
 8005116:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		res = dir_sdi(dp, 0);
 800511a:	f7ff be2f 	b.w	8004d7c <dir_sdi>
 800511e:	f104 0023 	add.w	r0, r4, #35	; 0x23
	if (p[si] == '.') { /* Is this a dot entry? */
 8005122:	2100      	movs	r1, #0
			c = (BYTE)p[si++];
 8005124:	f813 2f01 	ldrb.w	r2, [r3, #1]!
			if (c != '.' || si >= 3) break;
 8005128:	2a2e      	cmp	r2, #46	; 0x2e
			c = (BYTE)p[si++];
 800512a:	f101 0101 	add.w	r1, r1, #1
			if (c != '.' || si >= 3) break;
 800512e:	d104      	bne.n	800513a <follow_path+0xca>
 8005130:	2903      	cmp	r1, #3
 8005132:	d050      	beq.n	80051d6 <follow_path+0x166>
			sfn[i++] = c;
 8005134:	f800 2f01 	strb.w	r2, [r0, #1]!
 8005138:	e7f4      	b.n	8005124 <follow_path+0xb4>
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 800513a:	2a2f      	cmp	r2, #47	; 0x2f
 800513c:	d003      	beq.n	8005146 <follow_path+0xd6>
 800513e:	2a5c      	cmp	r2, #92	; 0x5c
 8005140:	d001      	beq.n	8005146 <follow_path+0xd6>
 8005142:	2a20      	cmp	r2, #32
 8005144:	d847      	bhi.n	80051d6 <follow_path+0x166>
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 8005146:	2a20      	cmp	r2, #32
		*path = p + si;								/* Return pointer to the next segment */
 8005148:	440d      	add	r5, r1
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 800514a:	bf8c      	ite	hi
 800514c:	2320      	movhi	r3, #32
 800514e:	2324      	movls	r3, #36	; 0x24
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005150:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005154:	2100      	movs	r1, #0
 8005156:	4620      	mov	r0, r4
	FATFS *fs = dp->obj.fs;
 8005158:	f8d4 9000 	ldr.w	r9, [r4]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800515c:	f7ff fe0e 	bl	8004d7c <dir_sdi>
	if (res != FR_OK) return res;
 8005160:	2800      	cmp	r0, #0
 8005162:	d13d      	bne.n	80051e0 <follow_path+0x170>
		res = move_window(fs, dp->sect);
 8005164:	69e1      	ldr	r1, [r4, #28]
 8005166:	4648      	mov	r0, r9
 8005168:	f7ff fcd6 	bl	8004b18 <move_window>
		if (res != FR_OK) break;
 800516c:	2800      	cmp	r0, #0
 800516e:	d137      	bne.n	80051e0 <follow_path+0x170>
		c = dp->dir[DIR_Name];
 8005170:	6a23      	ldr	r3, [r4, #32]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005172:	781a      	ldrb	r2, [r3, #0]
 8005174:	2a00      	cmp	r2, #0
 8005176:	d046      	beq.n	8005206 <follow_path+0x196>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8005178:	7ada      	ldrb	r2, [r3, #11]
 800517a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800517e:	71a2      	strb	r2, [r4, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005180:	7ada      	ldrb	r2, [r3, #11]
 8005182:	0711      	lsls	r1, r2, #28
 8005184:	d40c      	bmi.n	80051a0 <follow_path+0x130>
 8005186:	f103 0e0b 	add.w	lr, r3, #11
 800518a:	4639      	mov	r1, r7
		r = *d++ - *s++;
 800518c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005190:	f811 cb01 	ldrb.w	ip, [r1], #1
	} while (--cnt && r == 0);
 8005194:	459e      	cmp	lr, r3
		r = *d++ - *s++;
 8005196:	eba2 020c 	sub.w	r2, r2, ip
	} while (--cnt && r == 0);
 800519a:	d01f      	beq.n	80051dc <follow_path+0x16c>
 800519c:	2a00      	cmp	r2, #0
 800519e:	d0f5      	beq.n	800518c <follow_path+0x11c>
		res = dir_next(dp, 0);	/* Next entry */
 80051a0:	2100      	movs	r1, #0
 80051a2:	4620      	mov	r0, r4
 80051a4:	f7ff feeb 	bl	8004f7e <dir_next>
 80051a8:	e7da      	b.n	8005160 <follow_path+0xf0>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80051aa:	2b5c      	cmp	r3, #92	; 0x5c
 80051ac:	d095      	beq.n	80050da <follow_path+0x6a>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80051ae:	2b2e      	cmp	r3, #46	; 0x2e
 80051b0:	d043      	beq.n	800523a <follow_path+0x1ca>
 80051b2:	458e      	cmp	lr, r1
 80051b4:	d90f      	bls.n	80051d6 <follow_path+0x166>
		if (c >= 0x80) {				/* Extended character? */
 80051b6:	f013 0f80 	tst.w	r3, #128	; 0x80
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80051ba:	bf18      	it	ne
 80051bc:	3b80      	subne	r3, #128	; 0x80
 80051be:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8005264 <follow_path+0x1f4>
 80051c2:	bf18      	it	ne
 80051c4:	f818 3003 	ldrbne.w	r3, [r8, r3]
	while (*str && *str != chr) str++;
 80051c8:	f819 cf01 	ldrb.w	ip, [r9, #1]!
 80051cc:	f1bc 0f00 	cmp.w	ip, #0
 80051d0:	d03a      	beq.n	8005248 <follow_path+0x1d8>
 80051d2:	4563      	cmp	r3, ip
 80051d4:	d1f8      	bne.n	80051c8 <follow_path+0x158>
						res = FR_OK;
 80051d6:	2006      	movs	r0, #6
 80051d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80051dc:	2a00      	cmp	r2, #0
 80051de:	d1df      	bne.n	80051a0 <follow_path+0x130>
			ns = dp->fn[NSFLAG];
 80051e0:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 80051e4:	b1b0      	cbz	r0, 8005214 <follow_path+0x1a4>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80051e6:	2804      	cmp	r0, #4
 80051e8:	d138      	bne.n	800525c <follow_path+0x1ec>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 80051ea:	f013 0f20 	tst.w	r3, #32
 80051ee:	f003 0304 	and.w	r3, r3, #4
 80051f2:	d00a      	beq.n	800520a <follow_path+0x19a>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f43f af59 	beq.w	80050ac <follow_path+0x3c>
						dp->fn[NSFLAG] = NS_NONAME;
 80051fa:	2380      	movs	r3, #128	; 0x80
 80051fc:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
						res = FR_OK;
 8005200:	2000      	movs	r0, #0
 8005202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005206:	2004      	movs	r0, #4
 8005208:	e7ea      	b.n	80051e0 <follow_path+0x170>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800520a:	2b00      	cmp	r3, #0
 800520c:	bf08      	it	eq
 800520e:	2005      	moveq	r0, #5
 8005210:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005214:	075a      	lsls	r2, r3, #29
 8005216:	d421      	bmi.n	800525c <follow_path+0x1ec>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005218:	79a3      	ldrb	r3, [r4, #6]
 800521a:	06db      	lsls	r3, r3, #27
 800521c:	d50a      	bpl.n	8005234 <follow_path+0x1c4>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800521e:	6963      	ldr	r3, [r4, #20]
 8005220:	7830      	ldrb	r0, [r6, #0]
 8005222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005226:	f106 0138 	add.w	r1, r6, #56	; 0x38
 800522a:	4419      	add	r1, r3
 800522c:	f7ff fbbb 	bl	80049a6 <ld_clust.isra.1>
 8005230:	60a0      	str	r0, [r4, #8]
 8005232:	e73b      	b.n	80050ac <follow_path+0x3c>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005234:	2005      	movs	r0, #5
	return res;
 8005236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800523a:	f1be 0f0b 	cmp.w	lr, #11
 800523e:	d0ca      	beq.n	80051d6 <follow_path+0x166>
			i = 8; ni = 11;				/* Goto extension */
 8005240:	2108      	movs	r1, #8
 8005242:	f04f 0e0b 	mov.w	lr, #11
 8005246:	e740      	b.n	80050ca <follow_path+0x5a>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8005248:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 800524c:	f1bc 0f19 	cmp.w	ip, #25
 8005250:	d801      	bhi.n	8005256 <follow_path+0x1e6>
 8005252:	3b20      	subs	r3, #32
 8005254:	b2db      	uxtb	r3, r3
			sfn[i++] = c;
 8005256:	547b      	strb	r3, [r7, r1]
 8005258:	3101      	adds	r1, #1
 800525a:	e736      	b.n	80050ca <follow_path+0x5a>
}
 800525c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005260:	0800c8b0 	.word	0x0800c8b0
 8005264:	0800c92f 	.word	0x0800c92f

08005268 <dir_register>:
{
 8005268:	b570      	push	{r4, r5, r6, lr}
	res = dir_sdi(dp, 0);
 800526a:	2100      	movs	r1, #0
{
 800526c:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 800526e:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
 8005270:	f7ff fd84 	bl	8004d7c <dir_sdi>
	if (res == FR_OK) {
 8005274:	4604      	mov	r4, r0
 8005276:	bb28      	cbnz	r0, 80052c4 <dir_register+0x5c>
			res = move_window(fs, dp->sect);
 8005278:	69e9      	ldr	r1, [r5, #28]
 800527a:	4630      	mov	r0, r6
 800527c:	f7ff fc4c 	bl	8004b18 <move_window>
			if (res != FR_OK) break;
 8005280:	4604      	mov	r4, r0
 8005282:	b9f8      	cbnz	r0, 80052c4 <dir_register+0x5c>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005284:	6a2b      	ldr	r3, [r5, #32]
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	2be5      	cmp	r3, #229	; 0xe5
 800528a:	d114      	bne.n	80052b6 <dir_register+0x4e>
		res = move_window(fs, dp->sect);
 800528c:	69e9      	ldr	r1, [r5, #28]
 800528e:	4630      	mov	r0, r6
 8005290:	f7ff fc42 	bl	8004b18 <move_window>
		if (res == FR_OK) {
 8005294:	4604      	mov	r4, r0
 8005296:	b960      	cbnz	r0, 80052b2 <dir_register+0x4a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005298:	4601      	mov	r1, r0
 800529a:	2220      	movs	r2, #32
 800529c:	6a28      	ldr	r0, [r5, #32]
 800529e:	f7ff fabd 	bl	800481c <mem_set>
 80052a2:	220b      	movs	r2, #11
 80052a4:	f105 0124 	add.w	r1, r5, #36	; 0x24
 80052a8:	6a28      	ldr	r0, [r5, #32]
 80052aa:	f7ff fb73 	bl	8004994 <mem_cpy.part.0>
			fs->wflag = 1;
 80052ae:	2301      	movs	r3, #1
 80052b0:	70f3      	strb	r3, [r6, #3]
}
 80052b2:	4620      	mov	r0, r4
 80052b4:	bd70      	pop	{r4, r5, r6, pc}
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d0e8      	beq.n	800528c <dir_register+0x24>
			res = dir_next(dp, 1);
 80052ba:	2101      	movs	r1, #1
 80052bc:	4628      	mov	r0, r5
 80052be:	f7ff fe5e 	bl	8004f7e <dir_next>
 80052c2:	e7d7      	b.n	8005274 <dir_register+0xc>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80052c4:	2c04      	cmp	r4, #4
 80052c6:	bf08      	it	eq
 80052c8:	2407      	moveq	r4, #7
 80052ca:	e7f2      	b.n	80052b2 <dir_register+0x4a>

080052cc <find_volume>:
{
 80052cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*rfs = 0;
 80052d0:	2300      	movs	r3, #0
{
 80052d2:	b085      	sub	sp, #20
	*rfs = 0;
 80052d4:	600b      	str	r3, [r1, #0]
{
 80052d6:	460f      	mov	r7, r1
 80052d8:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 80052da:	f7ff fb43 	bl	8004964 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80052de:	1e06      	subs	r6, r0, #0
 80052e0:	db3e      	blt.n	8005360 <find_volume+0x94>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80052e2:	4ba2      	ldr	r3, [pc, #648]	; (800556c <find_volume+0x2a0>)
 80052e4:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80052e8:	2c00      	cmp	r4, #0
 80052ea:	d03b      	beq.n	8005364 <find_volume+0x98>
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 80052ec:	68e0      	ldr	r0, [r4, #12]
 80052ee:	f000 fe7a 	bl	8005fe6 <ff_req_grant>
 80052f2:	2800      	cmp	r0, #0
 80052f4:	d13a      	bne.n	800536c <find_volume+0xa0>
	ENTER_FF(fs);						/* Lock the volume */
 80052f6:	200f      	movs	r0, #15
}
 80052f8:	b005      	add	sp, #20
 80052fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		stat = disk_status(fs->drv);
 80052fe:	7860      	ldrb	r0, [r4, #1]
 8005300:	f7ff fa38 	bl	8004774 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005304:	07c1      	lsls	r1, r0, #31
 8005306:	d437      	bmi.n	8005378 <find_volume+0xac>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005308:	2d00      	cmp	r5, #0
 800530a:	f000 812d 	beq.w	8005568 <find_volume+0x29c>
 800530e:	f010 0004 	ands.w	r0, r0, #4
 8005312:	d0f1      	beq.n	80052f8 <find_volume+0x2c>
				return FR_WRITE_PROTECTED;
 8005314:	200a      	movs	r0, #10
 8005316:	e7ef      	b.n	80052f8 <find_volume+0x2c>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005318:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800531a:	3501      	adds	r5, #1
 800531c:	2d04      	cmp	r5, #4
 800531e:	d14d      	bne.n	80053bc <find_volume+0xf0>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005320:	2804      	cmp	r0, #4
 8005322:	d105      	bne.n	8005330 <find_volume+0x64>
 8005324:	2001      	movs	r0, #1
 8005326:	e7e7      	b.n	80052f8 <find_volume+0x2c>
 8005328:	2804      	cmp	r0, #4
 800532a:	d0fb      	beq.n	8005324 <find_volume+0x58>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800532c:	2801      	cmp	r0, #1
 800532e:	d901      	bls.n	8005334 <find_volume+0x68>
 8005330:	200d      	movs	r0, #13
 8005332:	e7e1      	b.n	80052f8 <find_volume+0x2c>
	bsect = 0;
 8005334:	2600      	movs	r6, #0
 8005336:	e04b      	b.n	80053d0 <find_volume+0x104>
		fmt = FS_FAT32;
 8005338:	2703      	movs	r7, #3
 800533a:	e0a8      	b.n	800548e <find_volume+0x1c2>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800533c:	f1b9 0f00 	cmp.w	r9, #0
 8005340:	d0f6      	beq.n	8005330 <find_volume+0x64>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005342:	2f02      	cmp	r7, #2
 8005344:	ea4f 0041 	mov.w	r0, r1, lsl #1
 8005348:	bf18      	it	ne
 800534a:	1840      	addne	r0, r0, r1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800534c:	4443      	add	r3, r8
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800534e:	bf18      	it	ne
 8005350:	f001 0101 	andne.w	r1, r1, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005354:	62e3      	str	r3, [r4, #44]	; 0x2c
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005356:	bf0c      	ite	eq
 8005358:	4601      	moveq	r1, r0
 800535a:	eb01 0150 	addne.w	r1, r1, r0, lsr #1
 800535e:	e0b2      	b.n	80054c6 <find_volume+0x1fa>
	if (vol < 0) return FR_INVALID_DRIVE;
 8005360:	200b      	movs	r0, #11
 8005362:	e7c9      	b.n	80052f8 <find_volume+0x2c>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005364:	200c      	movs	r0, #12
 8005366:	e7c7      	b.n	80052f8 <find_volume+0x2c>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005368:	2003      	movs	r0, #3
 800536a:	e7c5      	b.n	80052f8 <find_volume+0x2c>
	*rfs = fs;							/* Return pointer to the file system object */
 800536c:	603c      	str	r4, [r7, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800536e:	7823      	ldrb	r3, [r4, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005370:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005374:	2b00      	cmp	r3, #0
 8005376:	d1c2      	bne.n	80052fe <find_volume+0x32>
	fs->fs_type = 0;					/* Clear the file system object */
 8005378:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800537a:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 800537c:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800537e:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005380:	f7ff fa02 	bl	8004788 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005384:	07c2      	lsls	r2, r0, #31
 8005386:	d4ef      	bmi.n	8005368 <find_volume+0x9c>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005388:	b10d      	cbz	r5, 800538e <find_volume+0xc2>
 800538a:	0743      	lsls	r3, r0, #29
 800538c:	d4c2      	bmi.n	8005314 <find_volume+0x48>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800538e:	2100      	movs	r1, #0
 8005390:	4620      	mov	r0, r4
 8005392:	f7ff fbdd 	bl	8004b50 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005396:	2802      	cmp	r0, #2
 8005398:	d1c6      	bne.n	8005328 <find_volume+0x5c>
 800539a:	f504 75ff 	add.w	r5, r4, #510	; 0x1fe
 800539e:	2100      	movs	r1, #0
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80053a0:	f815 0c04 	ldrb.w	r0, [r5, #-4]
 80053a4:	b110      	cbz	r0, 80053ac <find_volume+0xe0>
 80053a6:	4628      	mov	r0, r5
 80053a8:	f7ff fa28 	bl	80047fc <ld_dword>
 80053ac:	f84d 0021 	str.w	r0, [sp, r1, lsl #2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80053b0:	3101      	adds	r1, #1
 80053b2:	2904      	cmp	r1, #4
 80053b4:	f105 0510 	add.w	r5, r5, #16
 80053b8:	d1f2      	bne.n	80053a0 <find_volume+0xd4>
 80053ba:	2500      	movs	r5, #0
			bsect = br[i];
 80053bc:	f85d 6025 	ldr.w	r6, [sp, r5, lsl #2]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80053c0:	2e00      	cmp	r6, #0
 80053c2:	d0a9      	beq.n	8005318 <find_volume+0x4c>
 80053c4:	4631      	mov	r1, r6
 80053c6:	4620      	mov	r0, r4
 80053c8:	f7ff fbc2 	bl	8004b50 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80053cc:	2801      	cmp	r0, #1
 80053ce:	d8a4      	bhi.n	800531a <find_volume+0x4e>
	rv = rv << 8 | ptr[0];
 80053d0:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 80053d4:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80053d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80053dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053e0:	d1a6      	bne.n	8005330 <find_volume+0x64>
	rv = rv << 8 | ptr[0];
 80053e2:	f894 304f 	ldrb.w	r3, [r4, #79]	; 0x4f
 80053e6:	f894 504e 	ldrb.w	r5, [r4, #78]	; 0x4e
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80053ea:	ea55 2503 	orrs.w	r5, r5, r3, lsl #8
 80053ee:	d104      	bne.n	80053fa <find_volume+0x12e>
 80053f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80053f4:	f7ff fa02 	bl	80047fc <ld_dword>
 80053f8:	4605      	mov	r5, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80053fa:	f894 8048 	ldrb.w	r8, [r4, #72]	; 0x48
		fs->fsize = fasize;
 80053fe:	6225      	str	r5, [r4, #32]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005400:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8005404:	2b01      	cmp	r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005406:	f884 8002 	strb.w	r8, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800540a:	d891      	bhi.n	8005330 <find_volume+0x64>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800540c:	f894 7045 	ldrb.w	r7, [r4, #69]	; 0x45
 8005410:	b2bb      	uxth	r3, r7
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005412:	fb05 f808 	mul.w	r8, r5, r8
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005416:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005418:	2b00      	cmp	r3, #0
 800541a:	d089      	beq.n	8005330 <find_volume+0x64>
 800541c:	1e7b      	subs	r3, r7, #1
 800541e:	423b      	tst	r3, r7
 8005420:	d186      	bne.n	8005330 <find_volume+0x64>
	rv = rv << 8 | ptr[0];
 8005422:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8005426:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 800542a:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800542e:	f019 0f0f 	tst.w	r9, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005432:	f8a4 9008 	strh.w	r9, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005436:	f47f af7b 	bne.w	8005330 <find_volume+0x64>
	rv = rv << 8 | ptr[0];
 800543a:	f894 104c 	ldrb.w	r1, [r4, #76]	; 0x4c
 800543e:	f894 004b 	ldrb.w	r0, [r4, #75]	; 0x4b
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005442:	ea50 2001 	orrs.w	r0, r0, r1, lsl #8
 8005446:	d103      	bne.n	8005450 <find_volume+0x184>
 8005448:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800544c:	f7ff f9d6 	bl	80047fc <ld_dword>
	rv = rv << 8 | ptr[0];
 8005450:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
 8005454:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005458:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 800545c:	f43f af68 	beq.w	8005330 <find_volume+0x64>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005460:	eb03 1219 	add.w	r2, r3, r9, lsr #4
 8005464:	4442      	add	r2, r8
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005466:	4290      	cmp	r0, r2
 8005468:	f4ff af62 	bcc.w	8005330 <find_volume+0x64>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800546c:	1a81      	subs	r1, r0, r2
 800546e:	fbb1 f1f7 	udiv	r1, r1, r7
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005472:	2900      	cmp	r1, #0
 8005474:	f43f af5c 	beq.w	8005330 <find_volume+0x64>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005478:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 800547c:	4281      	cmp	r1, r0
 800547e:	f63f af5b 	bhi.w	8005338 <find_volume+0x6c>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005482:	f640 77f5 	movw	r7, #4085	; 0xff5
 8005486:	42b9      	cmp	r1, r7
 8005488:	bf8c      	ite	hi
 800548a:	2702      	movhi	r7, #2
 800548c:	2701      	movls	r7, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800548e:	3102      	adds	r1, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005490:	4433      	add	r3, r6
		fs->database = bsect + sysect;					/* Data start sector */
 8005492:	4432      	add	r2, r6
		if (fmt == FS_FAT32) {
 8005494:	2f03      	cmp	r7, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005496:	61e1      	str	r1, [r4, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8005498:	6266      	str	r6, [r4, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800549a:	62a3      	str	r3, [r4, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800549c:	6322      	str	r2, [r4, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800549e:	f47f af4d 	bne.w	800533c <find_volume+0x70>
	rv = rv << 8 | ptr[0];
 80054a2:	f894 2063 	ldrb.w	r2, [r4, #99]	; 0x63
 80054a6:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80054aa:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 80054ae:	f47f af3f 	bne.w	8005330 <find_volume+0x64>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80054b2:	f1b9 0f00 	cmp.w	r9, #0
 80054b6:	f47f af3b 	bne.w	8005330 <find_volume+0x64>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80054ba:	f104 0064 	add.w	r0, r4, #100	; 0x64
 80054be:	f7ff f99d 	bl	80047fc <ld_dword>
 80054c2:	62e0      	str	r0, [r4, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80054c4:	0089      	lsls	r1, r1, #2
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80054c6:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
 80054ca:	ebb5 2f51 	cmp.w	r5, r1, lsr #9
 80054ce:	f4ff af2f 	bcc.w	8005330 <find_volume+0x64>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80054d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054d6:	6163      	str	r3, [r4, #20]
 80054d8:	6123      	str	r3, [r4, #16]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80054da:	2f03      	cmp	r7, #3
		fs->fsi_flag = 0x80;
 80054dc:	f04f 0380 	mov.w	r3, #128	; 0x80
 80054e0:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80054e2:	d12f      	bne.n	8005544 <find_volume+0x278>
	rv = rv << 8 | ptr[0];
 80054e4:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
 80054e8:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 80054ec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d127      	bne.n	8005544 <find_volume+0x278>
			&& move_window(fs, bsect + 1) == FR_OK)
 80054f4:	1c71      	adds	r1, r6, #1
 80054f6:	4620      	mov	r0, r4
 80054f8:	f7ff fb0e 	bl	8004b18 <move_window>
 80054fc:	bb10      	cbnz	r0, 8005544 <find_volume+0x278>
	rv = rv << 8 | ptr[0];
 80054fe:	f894 2237 	ldrb.w	r2, [r4, #567]	; 0x237
 8005502:	f894 3236 	ldrb.w	r3, [r4, #566]	; 0x236
			fs->fsi_flag = 0;
 8005506:	7120      	strb	r0, [r4, #4]
	rv = rv << 8 | ptr[0];
 8005508:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800550c:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8005510:	4293      	cmp	r3, r2
 8005512:	d117      	bne.n	8005544 <find_volume+0x278>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005514:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8005518:	f7ff f970 	bl	80047fc <ld_dword>
 800551c:	4b14      	ldr	r3, [pc, #80]	; (8005570 <find_volume+0x2a4>)
 800551e:	4298      	cmp	r0, r3
 8005520:	d110      	bne.n	8005544 <find_volume+0x278>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005522:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8005526:	f7ff f969 	bl	80047fc <ld_dword>
 800552a:	4b12      	ldr	r3, [pc, #72]	; (8005574 <find_volume+0x2a8>)
 800552c:	4298      	cmp	r0, r3
 800552e:	d109      	bne.n	8005544 <find_volume+0x278>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005530:	f504 7008 	add.w	r0, r4, #544	; 0x220
 8005534:	f7ff f962 	bl	80047fc <ld_dword>
 8005538:	6160      	str	r0, [r4, #20]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800553a:	f504 7009 	add.w	r0, r4, #548	; 0x224
 800553e:	f7ff f95d 	bl	80047fc <ld_dword>
 8005542:	6120      	str	r0, [r4, #16]
	fs->id = ++Fsid;		/* File system mount ID */
 8005544:	4a0c      	ldr	r2, [pc, #48]	; (8005578 <find_volume+0x2ac>)
	fs->fs_type = fmt;		/* FAT sub-type */
 8005546:	7027      	strb	r7, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005548:	8813      	ldrh	r3, [r2, #0]
 800554a:	3301      	adds	r3, #1
 800554c:	b29b      	uxth	r3, r3
 800554e:	8013      	strh	r3, [r2, #0]
 8005550:	80e3      	strh	r3, [r4, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005552:	4a0a      	ldr	r2, [pc, #40]	; (800557c <find_volume+0x2b0>)
	fs->cdir = 0;			/* Initialize current directory */
 8005554:	2300      	movs	r3, #0
 8005556:	61a3      	str	r3, [r4, #24]
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005558:	4619      	mov	r1, r3
 800555a:	5898      	ldr	r0, [r3, r2]
 800555c:	4284      	cmp	r4, r0
 800555e:	bf08      	it	eq
 8005560:	5099      	streq	r1, [r3, r2]
 8005562:	3310      	adds	r3, #16
	for (i = 0; i < _FS_LOCK; i++) {
 8005564:	2b80      	cmp	r3, #128	; 0x80
 8005566:	d1f8      	bne.n	800555a <find_volume+0x28e>
	return FR_OK;
 8005568:	2000      	movs	r0, #0
 800556a:	e6c5      	b.n	80052f8 <find_volume+0x2c>
 800556c:	20000098 	.word	0x20000098
 8005570:	41615252 	.word	0x41615252
 8005574:	61417272 	.word	0x61417272
 8005578:	2000011c 	.word	0x2000011c
 800557c:	2000009c 	.word	0x2000009c

08005580 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005582:	b085      	sub	sp, #20
 8005584:	4617      	mov	r7, r2
 8005586:	9001      	str	r0, [sp, #4]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005588:	a804      	add	r0, sp, #16
{
 800558a:	9100      	str	r1, [sp, #0]
	const TCHAR *rp = path;
 800558c:	f840 1d04 	str.w	r1, [r0, #-4]!


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005590:	f7ff f9e8 	bl	8004964 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8005594:	1e06      	subs	r6, r0, #0
 8005596:	db34      	blt.n	8005602 <f_mount+0x82>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005598:	4d1c      	ldr	r5, [pc, #112]	; (800560c <f_mount+0x8c>)
 800559a:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]

	if (cfs) {
 800559e:	b19c      	cbz	r4, 80055c8 <f_mount+0x48>
 80055a0:	2300      	movs	r3, #0
		if (Files[i].fs == fs) Files[i].fs = 0;
 80055a2:	4a1b      	ldr	r2, [pc, #108]	; (8005610 <f_mount+0x90>)
 80055a4:	4619      	mov	r1, r3
 80055a6:	5898      	ldr	r0, [r3, r2]
 80055a8:	4284      	cmp	r4, r0
 80055aa:	bf08      	it	eq
 80055ac:	5099      	streq	r1, [r3, r2]
 80055ae:	3310      	adds	r3, #16
	for (i = 0; i < _FS_LOCK; i++) {
 80055b0:	2b80      	cmp	r3, #128	; 0x80
 80055b2:	d1f8      	bne.n	80055a6 <f_mount+0x26>
#if _FS_LOCK != 0
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80055b4:	68e0      	ldr	r0, [r4, #12]
 80055b6:	f000 fd11 	bl	8005fdc <ff_del_syncobj>
 80055ba:	b918      	cbnz	r0, 80055c4 <f_mount+0x44>
 80055bc:	2402      	movs	r4, #2

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 80055be:	4620      	mov	r0, r4
 80055c0:	b005      	add	sp, #20
 80055c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		cfs->fs_type = 0;				/* Clear old fs object */
 80055c4:	2300      	movs	r3, #0
 80055c6:	7023      	strb	r3, [r4, #0]
	if (fs) {
 80055c8:	9901      	ldr	r1, [sp, #4]
 80055ca:	b989      	cbnz	r1, 80055f0 <f_mount+0x70>
	FatFs[vol] = fs;					/* Register new fs object */
 80055cc:	9c01      	ldr	r4, [sp, #4]
 80055ce:	f845 4026 	str.w	r4, [r5, r6, lsl #2]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80055d2:	2c00      	cmp	r4, #0
 80055d4:	d0f3      	beq.n	80055be <f_mount+0x3e>
 80055d6:	2f01      	cmp	r7, #1
 80055d8:	d115      	bne.n	8005606 <f_mount+0x86>
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80055da:	a901      	add	r1, sp, #4
 80055dc:	2200      	movs	r2, #0
 80055de:	4668      	mov	r0, sp
 80055e0:	f7ff fe74 	bl	80052cc <find_volume>
 80055e4:	4604      	mov	r4, r0
	LEAVE_FF(fs, res);
 80055e6:	4601      	mov	r1, r0
 80055e8:	9801      	ldr	r0, [sp, #4]
 80055ea:	f7ff fc97 	bl	8004f1c <unlock_fs>
 80055ee:	e7e6      	b.n	80055be <f_mount+0x3e>
		fs->fs_type = 0;				/* Clear new fs object */
 80055f0:	2300      	movs	r3, #0
 80055f2:	f801 3b0c 	strb.w	r3, [r1], #12
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 80055f6:	b2f0      	uxtb	r0, r6
 80055f8:	f000 fce1 	bl	8005fbe <ff_cre_syncobj>
 80055fc:	2800      	cmp	r0, #0
 80055fe:	d0dd      	beq.n	80055bc <f_mount+0x3c>
 8005600:	e7e4      	b.n	80055cc <f_mount+0x4c>
	if (vol < 0) return FR_INVALID_DRIVE;
 8005602:	240b      	movs	r4, #11
 8005604:	e7db      	b.n	80055be <f_mount+0x3e>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005606:	2400      	movs	r4, #0
 8005608:	e7d9      	b.n	80055be <f_mount+0x3e>
 800560a:	bf00      	nop
 800560c:	20000098 	.word	0x20000098
 8005610:	2000009c 	.word	0x2000009c

08005614 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005618:	b090      	sub	sp, #64	; 0x40
 800561a:	4690      	mov	r8, r2
 800561c:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800561e:	4604      	mov	r4, r0
 8005620:	2800      	cmp	r0, #0
 8005622:	f000 80d4 	beq.w	80057ce <f_open+0x1ba>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8005626:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 800562a:	462a      	mov	r2, r5
 800562c:	a903      	add	r1, sp, #12
 800562e:	a801      	add	r0, sp, #4
 8005630:	f7ff fe4c 	bl	80052cc <find_volume>
	if (res == FR_OK) {
 8005634:	4607      	mov	r7, r0
 8005636:	bb60      	cbnz	r0, 8005692 <f_open+0x7e>
		dj.obj.fs = fs;
 8005638:	ae10      	add	r6, sp, #64	; 0x40
 800563a:	9b03      	ldr	r3, [sp, #12]
 800563c:	f846 3d30 	str.w	r3, [r6, #-48]!
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8005640:	9901      	ldr	r1, [sp, #4]
 8005642:	4630      	mov	r0, r6
 8005644:	f7ff fd14 	bl	8005070 <follow_path>
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005648:	b958      	cbnz	r0, 8005662 <f_open+0x4e>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800564a:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 800564e:	2b00      	cmp	r3, #0
 8005650:	db16      	blt.n	8005680 <f_open+0x6c>
				res = FR_INVALID_NAME;
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005652:	f015 0f3e 	tst.w	r5, #62	; 0x3e
 8005656:	bf14      	ite	ne
 8005658:	2101      	movne	r1, #1
 800565a:	2100      	moveq	r1, #0
 800565c:	4630      	mov	r0, r6
 800565e:	f7ff f8e3 	bl	8004828 <chk_lock>
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005662:	f018 0f1c 	tst.w	r8, #28
 8005666:	d076      	beq.n	8005756 <f_open+0x142>
			if (res != FR_OK) {					/* No file, create new */
 8005668:	b1b8      	cbz	r0, 800569a <f_open+0x86>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800566a:	2804      	cmp	r0, #4
 800566c:	d10e      	bne.n	800568c <f_open+0x78>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800566e:	4972      	ldr	r1, [pc, #456]	; (8005838 <f_open+0x224>)
 8005670:	2300      	movs	r3, #0
 8005672:	011a      	lsls	r2, r3, #4
 8005674:	5852      	ldr	r2, [r2, r1]
 8005676:	b92a      	cbnz	r2, 8005684 <f_open+0x70>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005678:	4630      	mov	r0, r6
 800567a:	f7ff fdf5 	bl	8005268 <dir_register>
 800567e:	e005      	b.n	800568c <f_open+0x78>
				res = FR_INVALID_NAME;
 8005680:	2006      	movs	r0, #6
 8005682:	e7ee      	b.n	8005662 <f_open+0x4e>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005684:	3301      	adds	r3, #1
 8005686:	2b08      	cmp	r3, #8
 8005688:	d1f3      	bne.n	8005672 <f_open+0x5e>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800568a:	2012      	movs	r0, #18
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800568c:	f045 0508 	orr.w	r5, r5, #8
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005690:	b160      	cbz	r0, 80056ac <f_open+0x98>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8005692:	2300      	movs	r3, #0
 8005694:	6023      	str	r3, [r4, #0]
 8005696:	4607      	mov	r7, r0
 8005698:	e08f      	b.n	80057ba <f_open+0x1a6>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800569a:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800569e:	f013 0f11 	tst.w	r3, #17
 80056a2:	d163      	bne.n	800576c <f_open+0x158>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80056a4:	f018 0f04 	tst.w	r8, #4
 80056a8:	f040 80c0 	bne.w	800582c <f_open+0x218>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80056ac:	0728      	lsls	r0, r5, #28
 80056ae:	d53c      	bpl.n	800572a <f_open+0x116>
				dw = GET_FATTIME();
 80056b0:	f002 fb02 	bl	8007cb8 <get_fattime>
 80056b4:	4602      	mov	r2, r0
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80056b6:	4601      	mov	r1, r0
 80056b8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80056ba:	300e      	adds	r0, #14
 80056bc:	f7ff f8a6 	bl	800480c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80056c0:	980c      	ldr	r0, [sp, #48]	; 0x30
 80056c2:	4611      	mov	r1, r2
 80056c4:	3016      	adds	r0, #22
 80056c6:	f7ff f8a1 	bl	800480c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80056ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80056cc:	f8dd 900c 	ldr.w	r9, [sp, #12]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80056d0:	2220      	movs	r2, #32
 80056d2:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80056d4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80056d8:	f899 0000 	ldrb.w	r0, [r9]
 80056dc:	4651      	mov	r1, sl
 80056de:	f7ff f962 	bl	80049a6 <ld_clust.isra.1>
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80056e2:	2200      	movs	r2, #0
 80056e4:	4651      	mov	r1, sl
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80056e6:	4680      	mov	r8, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80056e8:	4648      	mov	r0, r9
 80056ea:	f7ff f96a 	bl	80049c2 <st_clust.isra.2>
					st_dword(dj.dir + DIR_FileSize, 0);
 80056ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 80056f0:	2200      	movs	r2, #0
 80056f2:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 80056f4:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 80056f6:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
 80056f8:	77da      	strb	r2, [r3, #31]
					fs->wflag = 1;
 80056fa:	9b03      	ldr	r3, [sp, #12]
 80056fc:	2101      	movs	r1, #1
 80056fe:	70d9      	strb	r1, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 8005700:	f1b8 0f00 	cmp.w	r8, #0
 8005704:	d011      	beq.n	800572a <f_open+0x116>
						res = remove_chain(&dj.obj, cl, 0);
 8005706:	4641      	mov	r1, r8
 8005708:	4630      	mov	r0, r6
						dw = fs->winsect;
 800570a:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
						res = remove_chain(&dj.obj, cl, 0);
 800570e:	f7ff fbcf 	bl	8004eb0 <remove_chain>
						if (res == FR_OK) {
 8005712:	2800      	cmp	r0, #0
 8005714:	d1bd      	bne.n	8005692 <f_open+0x7e>
							res = move_window(fs, dw);
 8005716:	4649      	mov	r1, r9
 8005718:	9803      	ldr	r0, [sp, #12]
 800571a:	f7ff f9fd 	bl	8004b18 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800571e:	9a03      	ldr	r2, [sp, #12]
 8005720:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8005724:	6113      	str	r3, [r2, #16]
		if (res == FR_OK) {
 8005726:	2800      	cmp	r0, #0
 8005728:	d1b3      	bne.n	8005692 <f_open+0x7e>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800572a:	9b03      	ldr	r3, [sp, #12]
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800572c:	0728      	lsls	r0, r5, #28
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800572e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005730:	6263      	str	r3, [r4, #36]	; 0x24
				mode |= FA_MODIFIED;
 8005732:	bf48      	it	mi
 8005734:	f045 0540 	orrmi.w	r5, r5, #64	; 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005738:	f015 0ffe 	tst.w	r5, #254	; 0xfe
			fp->dir_ptr = dj.dir;
 800573c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800573e:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005740:	bf14      	ite	ne
 8005742:	2101      	movne	r1, #1
 8005744:	2100      	moveq	r1, #0
 8005746:	4630      	mov	r0, r6
 8005748:	f7ff f89c 	bl	8004884 <inc_lock>
 800574c:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800574e:	2800      	cmp	r0, #0
 8005750:	d13f      	bne.n	80057d2 <f_open+0x1be>
 8005752:	2002      	movs	r0, #2
 8005754:	e79d      	b.n	8005692 <f_open+0x7e>
			if (res == FR_OK) {					/* Following succeeded */
 8005756:	2800      	cmp	r0, #0
 8005758:	d19b      	bne.n	8005692 <f_open+0x7e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800575a:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800575e:	06da      	lsls	r2, r3, #27
 8005760:	d466      	bmi.n	8005830 <f_open+0x21c>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8005762:	f018 0f02 	tst.w	r8, #2
 8005766:	d0e0      	beq.n	800572a <f_open+0x116>
 8005768:	07db      	lsls	r3, r3, #31
 800576a:	d5de      	bpl.n	800572a <f_open+0x116>
					res = FR_DENIED;
 800576c:	2007      	movs	r0, #7
 800576e:	e790      	b.n	8005692 <f_open+0x7e>
					clst = get_fat(&fp->obj, clst);
 8005770:	6820      	ldr	r0, [r4, #0]
 8005772:	f7ff faa9 	bl	8004cc8 <get_fat.isra.8>
					if (clst <= 1) res = FR_INT_ERR;
 8005776:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 8005778:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 800577a:	d926      	bls.n	80057ca <f_open+0x1b6>
 800577c:	1c42      	adds	r2, r0, #1
 800577e:	4250      	negs	r0, r2
 8005780:	4150      	adcs	r0, r2
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005782:	eba5 0508 	sub.w	r5, r5, r8
 8005786:	2800      	cmp	r0, #0
 8005788:	d04c      	beq.n	8005824 <f_open+0x210>
				fp->clust = clst;
 800578a:	61e1      	str	r1, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800578c:	2800      	cmp	r0, #0
 800578e:	d180      	bne.n	8005692 <f_open+0x7e>
 8005790:	f3c5 0308 	ubfx	r3, r5, #0, #9
 8005794:	b18b      	cbz	r3, 80057ba <f_open+0x1a6>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8005796:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800579a:	4640      	mov	r0, r8
 800579c:	f7ff f8c6 	bl	800492c <clust2sect>
 80057a0:	2800      	cmp	r0, #0
 80057a2:	d0d6      	beq.n	8005752 <f_open+0x13e>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80057a4:	eb00 2255 	add.w	r2, r0, r5, lsr #9
 80057a8:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	4631      	mov	r1, r6
 80057ae:	f898 0001 	ldrb.w	r0, [r8, #1]
 80057b2:	f7fe fff9 	bl	80047a8 <disk_read>
 80057b6:	2800      	cmp	r0, #0
 80057b8:	d13c      	bne.n	8005834 <f_open+0x220>

	LEAVE_FF(fs, res);
 80057ba:	4639      	mov	r1, r7
 80057bc:	9803      	ldr	r0, [sp, #12]
 80057be:	f7ff fbad 	bl	8004f1c <unlock_fs>
}
 80057c2:	4638      	mov	r0, r7
 80057c4:	b010      	add	sp, #64	; 0x40
 80057c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if (clst <= 1) res = FR_INT_ERR;
 80057ca:	2002      	movs	r0, #2
 80057cc:	e7d9      	b.n	8005782 <f_open+0x16e>
	if (!fp) return FR_INVALID_OBJECT;
 80057ce:	2709      	movs	r7, #9
 80057d0:	e7f7      	b.n	80057c2 <f_open+0x1ae>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80057d2:	9e03      	ldr	r6, [sp, #12]
 80057d4:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80057d8:	7830      	ldrb	r0, [r6, #0]
 80057da:	4641      	mov	r1, r8
 80057dc:	f7ff f8e3 	bl	80049a6 <ld_clust.isra.1>
 80057e0:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80057e2:	f108 001c 	add.w	r0, r8, #28
 80057e6:	f7ff f809 	bl	80047fc <ld_dword>
			fp->obj.id = fs->id;
 80057ea:	88f3      	ldrh	r3, [r6, #6]
			fp->obj.fs = fs;	 	/* Validate the file object */
 80057ec:	6026      	str	r6, [r4, #0]
			fp->cltbl = 0;			/* Disable fast seek mode */
 80057ee:	2100      	movs	r1, #0
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80057f0:	f104 0630 	add.w	r6, r4, #48	; 0x30
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80057f4:	60e0      	str	r0, [r4, #12]
			fp->obj.id = fs->id;
 80057f6:	80a3      	strh	r3, [r4, #4]
			fp->cltbl = 0;			/* Disable fast seek mode */
 80057f8:	62e1      	str	r1, [r4, #44]	; 0x2c
			fp->flag = mode;		/* Set file access mode */
 80057fa:	7525      	strb	r5, [r4, #20]
			fp->err = 0;			/* Clear error flag */
 80057fc:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80057fe:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8005800:	61a1      	str	r1, [r4, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8005802:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005806:	4630      	mov	r0, r6
 8005808:	f7ff f808 	bl	800481c <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800580c:	06ab      	lsls	r3, r5, #26
 800580e:	d5d4      	bpl.n	80057ba <f_open+0x1a6>
 8005810:	68e5      	ldr	r5, [r4, #12]
 8005812:	2d00      	cmp	r5, #0
 8005814:	d0d1      	beq.n	80057ba <f_open+0x1a6>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005816:	9b03      	ldr	r3, [sp, #12]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8005818:	68a1      	ldr	r1, [r4, #8]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800581a:	f8b3 800a 	ldrh.w	r8, [r3, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800581e:	61a5      	str	r5, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005820:	ea4f 2848 	mov.w	r8, r8, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005824:	45a8      	cmp	r8, r5
 8005826:	d3a3      	bcc.n	8005770 <f_open+0x15c>
 8005828:	2000      	movs	r0, #0
 800582a:	e7ae      	b.n	800578a <f_open+0x176>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800582c:	2008      	movs	r0, #8
 800582e:	e730      	b.n	8005692 <f_open+0x7e>
					res = FR_NO_FILE;
 8005830:	2004      	movs	r0, #4
 8005832:	e72e      	b.n	8005692 <f_open+0x7e>
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8005834:	2001      	movs	r0, #1
 8005836:	e72c      	b.n	8005692 <f_open+0x7e>
 8005838:	2000009c 	.word	0x2000009c

0800583c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800583c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005840:	469b      	mov	fp, r3
 8005842:	b085      	sub	sp, #20
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 8005844:	2300      	movs	r3, #0
{
 8005846:	4689      	mov	r9, r1
	*bw = 0;	/* Clear write byte counter */
 8005848:	f8cb 3000 	str.w	r3, [fp]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800584c:	a903      	add	r1, sp, #12
{
 800584e:	4604      	mov	r4, r0
 8005850:	4617      	mov	r7, r2
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8005852:	f7ff fb6e 	bl	8004f32 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005856:	4605      	mov	r5, r0
 8005858:	b908      	cbnz	r0, 800585e <f_write+0x22>
 800585a:	7d65      	ldrb	r5, [r4, #21]
 800585c:	b10d      	cbz	r5, 8005862 <f_write+0x26>
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
				fp->fptr < fp->obj.objsize &&
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
					ABORT(fs, FR_DISK_ERR);
 800585e:	4629      	mov	r1, r5
 8005860:	e033      	b.n	80058ca <f_write+0x8e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8005862:	7d23      	ldrb	r3, [r4, #20]
 8005864:	079a      	lsls	r2, r3, #30
 8005866:	d408      	bmi.n	800587a <f_write+0x3e>
 8005868:	2107      	movs	r1, #7
 800586a:	9803      	ldr	r0, [sp, #12]
 800586c:	f7ff fb56 	bl	8004f1c <unlock_fs>
 8005870:	2507      	movs	r5, #7
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
 8005872:	4628      	mov	r0, r5
 8005874:	b005      	add	sp, #20
 8005876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800587a:	69a3      	ldr	r3, [r4, #24]
 800587c:	42fb      	cmn	r3, r7
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800587e:	bf28      	it	cs
 8005880:	43df      	mvncs	r7, r3
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8005882:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8005886:	9300      	str	r3, [sp, #0]
	for ( ;  btw;							/* Repeat until all data written */
 8005888:	b1d7      	cbz	r7, 80058c0 <f_write+0x84>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800588a:	69a1      	ldr	r1, [r4, #24]
 800588c:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8005890:	2b00      	cmp	r3, #0
 8005892:	f040 8093 	bne.w	80059bc <f_write+0x180>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8005896:	9b03      	ldr	r3, [sp, #12]
 8005898:	895b      	ldrh	r3, [r3, #10]
 800589a:	3b01      	subs	r3, #1
			if (csect == 0) {				/* On the cluster boundary? */
 800589c:	ea13 2351 	ands.w	r3, r3, r1, lsr #9
 80058a0:	9301      	str	r3, [sp, #4]
 80058a2:	d125      	bne.n	80058f0 <f_write+0xb4>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80058a4:	b931      	cbnz	r1, 80058b4 <f_write+0x78>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80058a6:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 80058a8:	b9a8      	cbnz	r0, 80058d6 <f_write+0x9a>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80058aa:	4601      	mov	r1, r0
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80058ac:	4620      	mov	r0, r4
 80058ae:	f7ff faa7 	bl	8004e00 <create_chain>
 80058b2:	e004      	b.n	80058be <f_write+0x82>
					if (fp->cltbl) {
 80058b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80058b6:	b163      	cbz	r3, 80058d2 <f_write+0x96>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80058b8:	4620      	mov	r0, r4
 80058ba:	f7ff f842 	bl	8004942 <clmt_clust>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80058be:	b950      	cbnz	r0, 80058d6 <f_write+0x9a>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80058c0:	7d23      	ldrb	r3, [r4, #20]
 80058c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058c6:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 80058c8:	2100      	movs	r1, #0
 80058ca:	9803      	ldr	r0, [sp, #12]
 80058cc:	f7ff fb26 	bl	8004f1c <unlock_fs>
 80058d0:	e7cf      	b.n	8005872 <f_write+0x36>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80058d2:	69e1      	ldr	r1, [r4, #28]
 80058d4:	e7ea      	b.n	80058ac <f_write+0x70>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80058d6:	2801      	cmp	r0, #1
 80058d8:	d102      	bne.n	80058e0 <f_write+0xa4>
 80058da:	2502      	movs	r5, #2
					ABORT(fs, FR_DISK_ERR);
 80058dc:	7565      	strb	r5, [r4, #21]
 80058de:	e7be      	b.n	800585e <f_write+0x22>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80058e0:	1c43      	adds	r3, r0, #1
 80058e2:	d101      	bne.n	80058e8 <f_write+0xac>
					ABORT(fs, FR_DISK_ERR);
 80058e4:	2501      	movs	r5, #1
 80058e6:	e7f9      	b.n	80058dc <f_write+0xa0>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80058e8:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 80058ea:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80058ec:	b903      	cbnz	r3, 80058f0 <f_write+0xb4>
 80058ee:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80058f0:	f994 3014 	ldrsb.w	r3, [r4, #20]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	da0c      	bge.n	8005912 <f_write+0xd6>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80058f8:	9803      	ldr	r0, [sp, #12]
 80058fa:	6a22      	ldr	r2, [r4, #32]
 80058fc:	9900      	ldr	r1, [sp, #0]
 80058fe:	7840      	ldrb	r0, [r0, #1]
 8005900:	2301      	movs	r3, #1
 8005902:	f7fe ff5f 	bl	80047c4 <disk_write>
 8005906:	2800      	cmp	r0, #0
 8005908:	d1ec      	bne.n	80058e4 <f_write+0xa8>
				fp->flag &= (BYTE)~FA_DIRTY;
 800590a:	7d23      	ldrb	r3, [r4, #20]
 800590c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005910:	7523      	strb	r3, [r4, #20]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8005912:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8005916:	69e1      	ldr	r1, [r4, #28]
 8005918:	4650      	mov	r0, sl
 800591a:	f7ff f807 	bl	800492c <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 800591e:	b920      	cbnz	r0, 800592a <f_write+0xee>
 8005920:	2502      	movs	r5, #2
 8005922:	7565      	strb	r5, [r4, #21]
 8005924:	4629      	mov	r1, r5
 8005926:	4650      	mov	r0, sl
 8005928:	e7d0      	b.n	80058cc <f_write+0x90>
			sect += csect;
 800592a:	9b01      	ldr	r3, [sp, #4]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800592c:	0a7e      	lsrs	r6, r7, #9
			sect += csect;
 800592e:	eb03 0800 	add.w	r8, r3, r0
			if (cc) {						/* Write maximum contiguous sectors directly */
 8005932:	d031      	beq.n	8005998 <f_write+0x15c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005934:	9a01      	ldr	r2, [sp, #4]
 8005936:	f8ba 300a 	ldrh.w	r3, [sl, #10]
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800593a:	f89a 0001 	ldrb.w	r0, [sl, #1]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800593e:	4432      	add	r2, r6
 8005940:	429a      	cmp	r2, r3
					cc = fs->csize - csect;
 8005942:	bf84      	itt	hi
 8005944:	9a01      	ldrhi	r2, [sp, #4]
 8005946:	1a9e      	subhi	r6, r3, r2
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005948:	4633      	mov	r3, r6
 800594a:	4642      	mov	r2, r8
 800594c:	4649      	mov	r1, r9
 800594e:	f7fe ff39 	bl	80047c4 <disk_write>
 8005952:	2800      	cmp	r0, #0
 8005954:	d1c6      	bne.n	80058e4 <f_write+0xa8>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8005956:	6a21      	ldr	r1, [r4, #32]
 8005958:	eba1 0108 	sub.w	r1, r1, r8
 800595c:	428e      	cmp	r6, r1
 800595e:	d90a      	bls.n	8005976 <f_write+0x13a>
 8005960:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005964:	eb09 2141 	add.w	r1, r9, r1, lsl #9
 8005968:	9800      	ldr	r0, [sp, #0]
 800596a:	f7ff f813 	bl	8004994 <mem_cpy.part.0>
					fp->flag &= (BYTE)~FA_DIRTY;
 800596e:	7d23      	ldrb	r3, [r4, #20]
 8005970:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005974:	7523      	strb	r3, [r4, #20]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8005976:	0276      	lsls	r6, r6, #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8005978:	69a3      	ldr	r3, [r4, #24]
 800597a:	68e2      	ldr	r2, [r4, #12]
 800597c:	4433      	add	r3, r6
 800597e:	61a3      	str	r3, [r4, #24]
 8005980:	429a      	cmp	r2, r3
 8005982:	bf2c      	ite	cs
 8005984:	60e2      	strcs	r2, [r4, #12]
 8005986:	60e3      	strcc	r3, [r4, #12]
 8005988:	f8db 3000 	ldr.w	r3, [fp]
 800598c:	4433      	add	r3, r6
 800598e:	44b1      	add	r9, r6
 8005990:	f8cb 3000 	str.w	r3, [fp]
 8005994:	1bbf      	subs	r7, r7, r6
 8005996:	e777      	b.n	8005888 <f_write+0x4c>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005998:	6a23      	ldr	r3, [r4, #32]
 800599a:	4598      	cmp	r8, r3
 800599c:	d00c      	beq.n	80059b8 <f_write+0x17c>
 800599e:	69a2      	ldr	r2, [r4, #24]
 80059a0:	68e3      	ldr	r3, [r4, #12]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d208      	bcs.n	80059b8 <f_write+0x17c>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80059a6:	2301      	movs	r3, #1
 80059a8:	4642      	mov	r2, r8
 80059aa:	9900      	ldr	r1, [sp, #0]
 80059ac:	f89a 0001 	ldrb.w	r0, [sl, #1]
 80059b0:	f7fe fefa 	bl	80047a8 <disk_read>
				fp->fptr < fp->obj.objsize &&
 80059b4:	2800      	cmp	r0, #0
 80059b6:	d195      	bne.n	80058e4 <f_write+0xa8>
			fp->sect = sect;
 80059b8:	f8c4 8020 	str.w	r8, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80059bc:	69a0      	ldr	r0, [r4, #24]
 80059be:	9b00      	ldr	r3, [sp, #0]
 80059c0:	f3c0 0008 	ubfx	r0, r0, #0, #9
 80059c4:	f5c0 7600 	rsb	r6, r0, #512	; 0x200
 80059c8:	42be      	cmp	r6, r7
 80059ca:	bf28      	it	cs
 80059cc:	463e      	movcs	r6, r7
 80059ce:	4418      	add	r0, r3
 80059d0:	4632      	mov	r2, r6
 80059d2:	4649      	mov	r1, r9
 80059d4:	f7fe ffde 	bl	8004994 <mem_cpy.part.0>
		fp->flag |= FA_DIRTY;
 80059d8:	7d23      	ldrb	r3, [r4, #20]
 80059da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80059de:	7523      	strb	r3, [r4, #20]
 80059e0:	e7ca      	b.n	8005978 <f_write+0x13c>

080059e2 <putc_bfd>:

	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
		putc_bfd(pb, '\r');
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 80059e2:	6843      	ldr	r3, [r0, #4]
	if (i < 0) return;
 80059e4:	2b00      	cmp	r3, #0
{
 80059e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80059e8:	4604      	mov	r4, r0
	if (i < 0) return;
 80059ea:	db14      	blt.n	8005a16 <putc_bfd+0x34>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80059ec:	1c5d      	adds	r5, r3, #1
 80059ee:	4403      	add	r3, r0
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80059f0:	2d3c      	cmp	r5, #60	; 0x3c
	pb->buf[i++] = (BYTE)c;
 80059f2:	7319      	strb	r1, [r3, #12]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80059f4:	dd0b      	ble.n	8005a0e <putc_bfd+0x2c>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80059f6:	ab01      	add	r3, sp, #4
 80059f8:	462a      	mov	r2, r5
 80059fa:	f100 010c 	add.w	r1, r0, #12
 80059fe:	6800      	ldr	r0, [r0, #0]
 8005a00:	f7ff ff1c 	bl	800583c <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8005a04:	9b01      	ldr	r3, [sp, #4]
 8005a06:	1b5d      	subs	r5, r3, r5
 8005a08:	bf18      	it	ne
 8005a0a:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
	}
	pb->idx = i;
	pb->nchr++;
 8005a0e:	68a3      	ldr	r3, [r4, #8]
	pb->idx = i;
 8005a10:	6065      	str	r5, [r4, #4]
	pb->nchr++;
 8005a12:	3301      	adds	r3, #1
 8005a14:	60a3      	str	r3, [r4, #8]
}
 8005a16:	b003      	add	sp, #12
 8005a18:	bd30      	pop	{r4, r5, pc}

08005a1a <putc_flush>:
	putbuff* pb
)
{
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8005a1a:	6842      	ldr	r2, [r0, #4]
 8005a1c:	2a00      	cmp	r2, #0
{
 8005a1e:	b513      	push	{r0, r1, r4, lr}
 8005a20:	4604      	mov	r4, r0
	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8005a22:	da03      	bge.n	8005a2c <putc_flush+0x12>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
		&& (UINT)pb->idx == nw) return pb->nchr;
	return EOF;
 8005a24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8005a28:	b002      	add	sp, #8
 8005a2a:	bd10      	pop	{r4, pc}
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8005a2c:	f100 010c 	add.w	r1, r0, #12
 8005a30:	ab01      	add	r3, sp, #4
 8005a32:	6800      	ldr	r0, [r0, #0]
 8005a34:	f7ff ff02 	bl	800583c <f_write>
 8005a38:	2800      	cmp	r0, #0
 8005a3a:	d1f3      	bne.n	8005a24 <putc_flush+0xa>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8005a3c:	6862      	ldr	r2, [r4, #4]
 8005a3e:	9b01      	ldr	r3, [sp, #4]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d1ef      	bne.n	8005a24 <putc_flush+0xa>
 8005a44:	68a0      	ldr	r0, [r4, #8]
 8005a46:	e7ef      	b.n	8005a28 <putc_flush+0xe>

08005a48 <f_sync>:
{
 8005a48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8005a4a:	a901      	add	r1, sp, #4
{
 8005a4c:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8005a4e:	f7ff fa70 	bl	8004f32 <validate>
	if (res == FR_OK) {
 8005a52:	4605      	mov	r5, r0
 8005a54:	2800      	cmp	r0, #0
 8005a56:	d142      	bne.n	8005ade <f_sync+0x96>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8005a58:	7d23      	ldrb	r3, [r4, #20]
 8005a5a:	065a      	lsls	r2, r3, #25
 8005a5c:	d53f      	bpl.n	8005ade <f_sync+0x96>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8005a5e:	061b      	lsls	r3, r3, #24
 8005a60:	d514      	bpl.n	8005a8c <f_sync+0x44>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8005a62:	9801      	ldr	r0, [sp, #4]
 8005a64:	6a22      	ldr	r2, [r4, #32]
 8005a66:	7840      	ldrb	r0, [r0, #1]
 8005a68:	2301      	movs	r3, #1
 8005a6a:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8005a6e:	f7fe fea9 	bl	80047c4 <disk_write>
 8005a72:	b138      	cbz	r0, 8005a84 <f_sync+0x3c>
 8005a74:	2101      	movs	r1, #1
 8005a76:	9801      	ldr	r0, [sp, #4]
 8005a78:	f7ff fa50 	bl	8004f1c <unlock_fs>
 8005a7c:	2501      	movs	r5, #1
}
 8005a7e:	4628      	mov	r0, r5
 8005a80:	b003      	add	sp, #12
 8005a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
				fp->flag &= (BYTE)~FA_DIRTY;
 8005a84:	7d23      	ldrb	r3, [r4, #20]
 8005a86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a8a:	7523      	strb	r3, [r4, #20]
			tm = GET_FATTIME();				/* Modified time */
 8005a8c:	f002 f914 	bl	8007cb8 <get_fattime>
				res = move_window(fs, fp->dir_sect);
 8005a90:	6a61      	ldr	r1, [r4, #36]	; 0x24
			tm = GET_FATTIME();				/* Modified time */
 8005a92:	4607      	mov	r7, r0
				res = move_window(fs, fp->dir_sect);
 8005a94:	9801      	ldr	r0, [sp, #4]
 8005a96:	f7ff f83f 	bl	8004b18 <move_window>
				if (res == FR_OK) {
 8005a9a:	4605      	mov	r5, r0
 8005a9c:	b9f8      	cbnz	r0, 8005ade <f_sync+0x96>
					dir = fp->dir_ptr;
 8005a9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8005aa0:	7af3      	ldrb	r3, [r6, #11]
 8005aa2:	f043 0320 	orr.w	r3, r3, #32
 8005aa6:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8005aa8:	68a2      	ldr	r2, [r4, #8]
 8005aaa:	6820      	ldr	r0, [r4, #0]
 8005aac:	4631      	mov	r1, r6
 8005aae:	f7fe ff88 	bl	80049c2 <st_clust.isra.2>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8005ab2:	68e1      	ldr	r1, [r4, #12]
 8005ab4:	f106 001c 	add.w	r0, r6, #28
 8005ab8:	f7fe fea8 	bl	800480c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8005abc:	4639      	mov	r1, r7
 8005abe:	f106 0016 	add.w	r0, r6, #22
 8005ac2:	f7fe fea3 	bl	800480c <st_dword>
					fs->wflag = 1;
 8005ac6:	9801      	ldr	r0, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8005ac8:	74b5      	strb	r5, [r6, #18]
					fs->wflag = 1;
 8005aca:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val;
 8005acc:	74f5      	strb	r5, [r6, #19]
					fs->wflag = 1;
 8005ace:	70c3      	strb	r3, [r0, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8005ad0:	f7fe ffd7 	bl	8004a82 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 8005ad4:	7d23      	ldrb	r3, [r4, #20]
 8005ad6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
					res = sync_fs(fs);					/* Restore it to the directory */
 8005ada:	4605      	mov	r5, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 8005adc:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, res);
 8005ade:	4629      	mov	r1, r5
 8005ae0:	9801      	ldr	r0, [sp, #4]
 8005ae2:	f7ff fa1b 	bl	8004f1c <unlock_fs>
 8005ae6:	e7ca      	b.n	8005a7e <f_sync+0x36>

08005ae8 <f_close>:
{
 8005ae8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005aea:	4605      	mov	r5, r0
	res = f_sync(fp);					/* Flush cached data */
 8005aec:	f7ff ffac 	bl	8005a48 <f_sync>
	if (res == FR_OK)
 8005af0:	4604      	mov	r4, r0
 8005af2:	b978      	cbnz	r0, 8005b14 <f_close+0x2c>
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8005af4:	a901      	add	r1, sp, #4
 8005af6:	4628      	mov	r0, r5
 8005af8:	f7ff fa1b 	bl	8004f32 <validate>
		if (res == FR_OK) {
 8005afc:	4604      	mov	r4, r0
 8005afe:	b948      	cbnz	r0, 8005b14 <f_close+0x2c>
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8005b00:	6928      	ldr	r0, [r5, #16]
 8005b02:	f7fe fefb 	bl	80048fc <dec_lock>
			if (res == FR_OK)
 8005b06:	4604      	mov	r4, r0
 8005b08:	b900      	cbnz	r0, 8005b0c <f_close+0x24>
				fp->obj.fs = 0;			/* Invalidate file object */
 8005b0a:	6028      	str	r0, [r5, #0]
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8005b0c:	2100      	movs	r1, #0
 8005b0e:	9801      	ldr	r0, [sp, #4]
 8005b10:	f7ff fa04 	bl	8004f1c <unlock_fs>
}
 8005b14:	4620      	mov	r0, r4
 8005b16:	b003      	add	sp, #12
 8005b18:	bd30      	pop	{r4, r5, pc}

08005b1a <f_chdir>:
{
 8005b1a:	b530      	push	{r4, r5, lr}
 8005b1c:	b091      	sub	sp, #68	; 0x44
	res = find_volume(&path, &fs, 0);
 8005b1e:	2200      	movs	r2, #0
{
 8005b20:	9001      	str	r0, [sp, #4]
	res = find_volume(&path, &fs, 0);
 8005b22:	a903      	add	r1, sp, #12
 8005b24:	a801      	add	r0, sp, #4
 8005b26:	f7ff fbd1 	bl	80052cc <find_volume>
	if (res == FR_OK) {
 8005b2a:	4604      	mov	r4, r0
 8005b2c:	b978      	cbnz	r0, 8005b4e <f_chdir+0x34>
		dj.obj.fs = fs;
 8005b2e:	a810      	add	r0, sp, #64	; 0x40
 8005b30:	9b03      	ldr	r3, [sp, #12]
 8005b32:	f840 3d30 	str.w	r3, [r0, #-48]!
		res = follow_path(&dj, path);		/* Follow the path */
 8005b36:	9901      	ldr	r1, [sp, #4]
 8005b38:	f7ff fa9a 	bl	8005070 <follow_path>
		if (res == FR_OK) {					/* Follow completed */
 8005b3c:	4604      	mov	r4, r0
 8005b3e:	b9c0      	cbnz	r0, 8005b72 <f_chdir+0x58>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8005b40:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	da09      	bge.n	8005b5c <f_chdir+0x42>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8005b48:	9b03      	ldr	r3, [sp, #12]
 8005b4a:	9a06      	ldr	r2, [sp, #24]
 8005b4c:	619a      	str	r2, [r3, #24]
	LEAVE_FF(fs, res);
 8005b4e:	9803      	ldr	r0, [sp, #12]
 8005b50:	4621      	mov	r1, r4
 8005b52:	f7ff f9e3 	bl	8004f1c <unlock_fs>
}
 8005b56:	4620      	mov	r0, r4
 8005b58:	b011      	add	sp, #68	; 0x44
 8005b5a:	bd30      	pop	{r4, r5, pc}
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8005b5c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8005b60:	06db      	lsls	r3, r3, #27
 8005b62:	d50a      	bpl.n	8005b7a <f_chdir+0x60>
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8005b64:	9d03      	ldr	r5, [sp, #12]
 8005b66:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005b68:	7828      	ldrb	r0, [r5, #0]
 8005b6a:	f7fe ff1c 	bl	80049a6 <ld_clust.isra.1>
 8005b6e:	61a8      	str	r0, [r5, #24]
 8005b70:	e7ed      	b.n	8005b4e <f_chdir+0x34>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8005b72:	2804      	cmp	r0, #4
					res = FR_NO_PATH;		/* Reached but a file */
 8005b74:	bf08      	it	eq
 8005b76:	2405      	moveq	r4, #5
 8005b78:	e7e9      	b.n	8005b4e <f_chdir+0x34>
 8005b7a:	2405      	movs	r4, #5
 8005b7c:	e7e7      	b.n	8005b4e <f_chdir+0x34>

08005b7e <f_stat>:
{
 8005b7e:	b530      	push	{r4, r5, lr}
 8005b80:	b08f      	sub	sp, #60	; 0x3c
 8005b82:	460d      	mov	r5, r1
 8005b84:	9001      	str	r0, [sp, #4]
	res = find_volume(&path, &dj.obj.fs, 0);
 8005b86:	2200      	movs	r2, #0
 8005b88:	a902      	add	r1, sp, #8
 8005b8a:	a801      	add	r0, sp, #4
 8005b8c:	f7ff fb9e 	bl	80052cc <find_volume>
	if (res == FR_OK) {
 8005b90:	4604      	mov	r4, r0
 8005b92:	b988      	cbnz	r0, 8005bb8 <f_stat+0x3a>
		res = follow_path(&dj, path);	/* Follow the file path */
 8005b94:	9901      	ldr	r1, [sp, #4]
 8005b96:	a802      	add	r0, sp, #8
 8005b98:	f7ff fa6a 	bl	8005070 <follow_path>
		if (res == FR_OK) {				/* Follow completed */
 8005b9c:	4604      	mov	r4, r0
 8005b9e:	b958      	cbnz	r0, 8005bb8 <f_stat+0x3a>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8005ba0:	f99d 3037 	ldrsb.w	r3, [sp, #55]	; 0x37
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	db0e      	blt.n	8005bc6 <f_stat+0x48>
				if (fno) get_fileinfo(&dj, fno);
 8005ba8:	b135      	cbz	r5, 8005bb8 <f_stat+0x3a>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8005baa:	9b09      	ldr	r3, [sp, #36]	; 0x24
	fno->fname[0] = 0;		/* Invaidate file info */
 8005bac:	7268      	strb	r0, [r5, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8005bae:	b11b      	cbz	r3, 8005bb8 <f_stat+0x3a>
 8005bb0:	4629      	mov	r1, r5
 8005bb2:	a802      	add	r0, sp, #8
 8005bb4:	f7fe ff11 	bl	80049da <get_fileinfo.part.3>
	LEAVE_FF(dj.obj.fs, res);
 8005bb8:	9802      	ldr	r0, [sp, #8]
 8005bba:	4621      	mov	r1, r4
 8005bbc:	f7ff f9ae 	bl	8004f1c <unlock_fs>
}
 8005bc0:	4620      	mov	r0, r4
 8005bc2:	b00f      	add	sp, #60	; 0x3c
 8005bc4:	bd30      	pop	{r4, r5, pc}
				res = FR_INVALID_NAME;
 8005bc6:	2406      	movs	r4, #6
 8005bc8:	e7f6      	b.n	8005bb8 <f_stat+0x3a>

08005bca <f_mkdir>:
{
 8005bca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bce:	b090      	sub	sp, #64	; 0x40
	res = find_volume(&path, &fs, FA_WRITE);
 8005bd0:	2202      	movs	r2, #2
{
 8005bd2:	9001      	str	r0, [sp, #4]
	res = find_volume(&path, &fs, FA_WRITE);
 8005bd4:	a903      	add	r1, sp, #12
 8005bd6:	a801      	add	r0, sp, #4
 8005bd8:	f7ff fb78 	bl	80052cc <find_volume>
	dj.obj.fs = fs;
 8005bdc:	9b03      	ldr	r3, [sp, #12]
 8005bde:	9304      	str	r3, [sp, #16]
	if (res == FR_OK) {
 8005be0:	4604      	mov	r4, r0
 8005be2:	2800      	cmp	r0, #0
 8005be4:	f040 809a 	bne.w	8005d1c <f_mkdir+0x152>
		res = follow_path(&dj, path);			/* Follow the file path */
 8005be8:	9901      	ldr	r1, [sp, #4]
 8005bea:	a804      	add	r0, sp, #16
 8005bec:	f7ff fa40 	bl	8005070 <follow_path>
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8005bf0:	4604      	mov	r4, r0
 8005bf2:	2800      	cmp	r0, #0
 8005bf4:	f000 809a 	beq.w	8005d2c <f_mkdir+0x162>
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 8005bf8:	2804      	cmp	r0, #4
 8005bfa:	f040 808f 	bne.w	8005d1c <f_mkdir+0x152>
 8005bfe:	f89d 103f 	ldrb.w	r1, [sp, #63]	; 0x3f
 8005c02:	f011 0120 	ands.w	r1, r1, #32
 8005c06:	f040 8093 	bne.w	8005d30 <f_mkdir+0x166>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8005c0a:	a804      	add	r0, sp, #16
 8005c0c:	f7ff f8f8 	bl	8004e00 <create_chain>
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8005c10:	9a03      	ldr	r2, [sp, #12]
 8005c12:	8953      	ldrh	r3, [r2, #10]
 8005c14:	025b      	lsls	r3, r3, #9
 8005c16:	9307      	str	r3, [sp, #28]
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8005c18:	4605      	mov	r5, r0
 8005c1a:	2800      	cmp	r0, #0
 8005c1c:	d058      	beq.n	8005cd0 <f_mkdir+0x106>
			if (dcl == 1) res = FR_INT_ERR;
 8005c1e:	2d01      	cmp	r5, #1
 8005c20:	d054      	beq.n	8005ccc <f_mkdir+0x102>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8005c22:	1c6b      	adds	r3, r5, #1
 8005c24:	f040 8086 	bne.w	8005d34 <f_mkdir+0x16a>
 8005c28:	2401      	movs	r4, #1
			tm = GET_FATTIME();
 8005c2a:	f002 f845 	bl	8007cb8 <get_fattime>
 8005c2e:	4680      	mov	r8, r0
			if (res == FR_OK) {					/* Initialize the new directory table */
 8005c30:	2c00      	cmp	r4, #0
 8005c32:	d145      	bne.n	8005cc0 <f_mkdir+0xf6>
				dsc = clust2sect(fs, dcl);
 8005c34:	9e03      	ldr	r6, [sp, #12]
 8005c36:	4629      	mov	r1, r5
 8005c38:	4630      	mov	r0, r6
 8005c3a:	f7fe fe77 	bl	800492c <clust2sect>
				dir = fs->win;
 8005c3e:	f106 0738 	add.w	r7, r6, #56	; 0x38
				mem_set(dir, 0, SS(fs));
 8005c42:	4621      	mov	r1, r4
 8005c44:	f44f 7200 	mov.w	r2, #512	; 0x200
				dsc = clust2sect(fs, dcl);
 8005c48:	4681      	mov	r9, r0
				mem_set(dir, 0, SS(fs));
 8005c4a:	4638      	mov	r0, r7
 8005c4c:	f7fe fde6 	bl	800481c <mem_set>
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8005c50:	220b      	movs	r2, #11
 8005c52:	2120      	movs	r1, #32
 8005c54:	4638      	mov	r0, r7
 8005c56:	f7fe fde1 	bl	800481c <mem_set>
					dir[DIR_Name] = '.';
 8005c5a:	f04f 0a2e 	mov.w	sl, #46	; 0x2e
					dir[DIR_Attr] = AM_DIR;
 8005c5e:	2310      	movs	r3, #16
 8005c60:	f886 3043 	strb.w	r3, [r6, #67]	; 0x43
					st_dword(dir + DIR_ModTime, tm);
 8005c64:	4641      	mov	r1, r8
 8005c66:	f106 004e 	add.w	r0, r6, #78	; 0x4e
					dir[DIR_Name] = '.';
 8005c6a:	f886 a038 	strb.w	sl, [r6, #56]	; 0x38
					st_dword(dir + DIR_ModTime, tm);
 8005c6e:	f7fe fdcd 	bl	800480c <st_dword>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8005c72:	f106 0458 	add.w	r4, r6, #88	; 0x58
					st_clust(fs, dir, dcl);
 8005c76:	462a      	mov	r2, r5
 8005c78:	4639      	mov	r1, r7
 8005c7a:	9803      	ldr	r0, [sp, #12]
 8005c7c:	f7fe fea1 	bl	80049c2 <st_clust.isra.2>
 8005c80:	2220      	movs	r2, #32
 8005c82:	4620      	mov	r0, r4
 8005c84:	4639      	mov	r1, r7
 8005c86:	f7fe fe85 	bl	8004994 <mem_cpy.part.0>
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8005c8a:	9803      	ldr	r0, [sp, #12]
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8005c8c:	f886 a059 	strb.w	sl, [r6, #89]	; 0x59
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8005c90:	7803      	ldrb	r3, [r0, #0]
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8005c92:	9a06      	ldr	r2, [sp, #24]
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8005c94:	2b03      	cmp	r3, #3
 8005c96:	d103      	bne.n	8005ca0 <f_mkdir+0xd6>
 8005c98:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	bf08      	it	eq
 8005c9e:	2200      	moveq	r2, #0
					st_clust(fs, dir + SZDIRE, pcl);
 8005ca0:	4621      	mov	r1, r4
 8005ca2:	f7fe fe8e 	bl	80049c2 <st_clust.isra.2>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8005ca6:	9b03      	ldr	r3, [sp, #12]
 8005ca8:	895e      	ldrh	r6, [r3, #10]
					fs->wflag = 1;
 8005caa:	f04f 0a01 	mov.w	sl, #1
 8005cae:	44b1      	add	r9, r6
 8005cb0:	eba9 0306 	sub.w	r3, r9, r6
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8005cb4:	b976      	cbnz	r6, 8005cd4 <f_mkdir+0x10a>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8005cb6:	a804      	add	r0, sp, #16
 8005cb8:	f7ff fad6 	bl	8005268 <dir_register>
			if (res == FR_OK) {
 8005cbc:	4604      	mov	r4, r0
 8005cbe:	b1d0      	cbz	r0, 8005cf6 <f_mkdir+0x12c>
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	4629      	mov	r1, r5
 8005cc4:	a804      	add	r0, sp, #16
 8005cc6:	f7ff f8f3 	bl	8004eb0 <remove_chain>
 8005cca:	e027      	b.n	8005d1c <f_mkdir+0x152>
			if (dcl == 1) res = FR_INT_ERR;
 8005ccc:	2402      	movs	r4, #2
 8005cce:	e7ac      	b.n	8005c2a <f_mkdir+0x60>
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8005cd0:	2407      	movs	r4, #7
 8005cd2:	e7aa      	b.n	8005c2a <f_mkdir+0x60>
					fs->winsect = dsc++;
 8005cd4:	9803      	ldr	r0, [sp, #12]
 8005cd6:	6343      	str	r3, [r0, #52]	; 0x34
					fs->wflag = 1;
 8005cd8:	f880 a003 	strb.w	sl, [r0, #3]
 8005cdc:	f7fe fea8 	bl	8004a30 <sync_window.part.4>
					if (res != FR_OK) break;
 8005ce0:	4604      	mov	r4, r0
 8005ce2:	2800      	cmp	r0, #0
 8005ce4:	d1ec      	bne.n	8005cc0 <f_mkdir+0xf6>
					mem_set(dir, 0, SS(fs));
 8005ce6:	4601      	mov	r1, r0
 8005ce8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cec:	4638      	mov	r0, r7
 8005cee:	f7fe fd95 	bl	800481c <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8005cf2:	3e01      	subs	r6, #1
 8005cf4:	e7dc      	b.n	8005cb0 <f_mkdir+0xe6>
					dir = dj.dir;
 8005cf6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8005cf8:	4641      	mov	r1, r8
 8005cfa:	f104 0016 	add.w	r0, r4, #22
 8005cfe:	f7fe fd85 	bl	800480c <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8005d02:	4621      	mov	r1, r4
 8005d04:	462a      	mov	r2, r5
 8005d06:	9803      	ldr	r0, [sp, #12]
 8005d08:	f7fe fe5b 	bl	80049c2 <st_clust.isra.2>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8005d0c:	2310      	movs	r3, #16
					fs->wflag = 1;
 8005d0e:	9803      	ldr	r0, [sp, #12]
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8005d10:	72e3      	strb	r3, [r4, #11]
					fs->wflag = 1;
 8005d12:	2301      	movs	r3, #1
 8005d14:	70c3      	strb	r3, [r0, #3]
					res = sync_fs(fs);
 8005d16:	f7fe feb4 	bl	8004a82 <sync_fs>
 8005d1a:	4604      	mov	r4, r0
	LEAVE_FF(fs, res);
 8005d1c:	9803      	ldr	r0, [sp, #12]
 8005d1e:	4621      	mov	r1, r4
 8005d20:	f7ff f8fc 	bl	8004f1c <unlock_fs>
}
 8005d24:	4620      	mov	r0, r4
 8005d26:	b010      	add	sp, #64	; 0x40
 8005d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8005d2c:	2408      	movs	r4, #8
 8005d2e:	e7f5      	b.n	8005d1c <f_mkdir+0x152>
			res = FR_INVALID_NAME;
 8005d30:	2406      	movs	r4, #6
 8005d32:	e7f3      	b.n	8005d1c <f_mkdir+0x152>
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8005d34:	4610      	mov	r0, r2
 8005d36:	f7fe fe9e 	bl	8004a76 <sync_window>
 8005d3a:	4604      	mov	r4, r0
 8005d3c:	e775      	b.n	8005c2a <f_mkdir+0x60>

08005d3e <f_putc>:

int f_putc (
	TCHAR c,	/* A character to be output */
	FIL* fp		/* Pointer to the file object */
)
{
 8005d3e:	b500      	push	{lr}
 8005d40:	b095      	sub	sp, #84	; 0x54
	pb->nchr = pb->idx = 0;
 8005d42:	2300      	movs	r3, #0
	pb->fp = fp;
 8005d44:	9101      	str	r1, [sp, #4]
	putbuff pb;


	putc_init(&pb, fp);
	putc_bfd(&pb, c);	/* Put the character */
 8005d46:	4601      	mov	r1, r0
 8005d48:	a801      	add	r0, sp, #4
	pb->nchr = pb->idx = 0;
 8005d4a:	9302      	str	r3, [sp, #8]
 8005d4c:	9303      	str	r3, [sp, #12]
	putc_bfd(&pb, c);	/* Put the character */
 8005d4e:	f7ff fe48 	bl	80059e2 <putc_bfd>
	return putc_flush(&pb);
 8005d52:	a801      	add	r0, sp, #4
 8005d54:	f7ff fe61 	bl	8005a1a <putc_flush>
}
 8005d58:	b015      	add	sp, #84	; 0x54
 8005d5a:	f85d fb04 	ldr.w	pc, [sp], #4

08005d5e <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8005d5e:	b510      	push	{r4, lr}
 8005d60:	b094      	sub	sp, #80	; 0x50
	pb->nchr = pb->idx = 0;
 8005d62:	2300      	movs	r3, #0
	pb->fp = fp;
 8005d64:	9101      	str	r1, [sp, #4]
	pb->nchr = pb->idx = 0;
 8005d66:	9302      	str	r3, [sp, #8]
 8005d68:	9303      	str	r3, [sp, #12]
 8005d6a:	1e44      	subs	r4, r0, #1
	putbuff pb;


	putc_init(&pb, fp);
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8005d6c:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8005d70:	a801      	add	r0, sp, #4
 8005d72:	b919      	cbnz	r1, 8005d7c <f_puts+0x1e>
	return putc_flush(&pb);
 8005d74:	f7ff fe51 	bl	8005a1a <putc_flush>
}
 8005d78:	b014      	add	sp, #80	; 0x50
 8005d7a:	bd10      	pop	{r4, pc}
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8005d7c:	f7ff fe31 	bl	80059e2 <putc_bfd>
 8005d80:	e7f4      	b.n	8005d6c <f_puts+0xe>

08005d82 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8005d82:	b40e      	push	{r1, r2, r3}
 8005d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d88:	b09d      	sub	sp, #116	; 0x74
 8005d8a:	aa25      	add	r2, sp, #148	; 0x94
	pb->nchr = pb->idx = 0;
 8005d8c:	2100      	movs	r1, #0
{
 8005d8e:	f852 3b04 	ldr.w	r3, [r2], #4
	pb->fp = fp;
 8005d92:	9009      	str	r0, [sp, #36]	; 0x24
	pb->nchr = pb->idx = 0;
 8005d94:	910a      	str	r1, [sp, #40]	; 0x28
 8005d96:	910b      	str	r1, [sp, #44]	; 0x2c
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);

	va_start(arp, fmt);
 8005d98:	9200      	str	r2, [sp, #0]
		}
		i = 0;
		do {
			d = (TCHAR)(v % r); v /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			str[i++] = d + '0';
 8005d9a:	ae01      	add	r6, sp, #4
		c = *fmt++;
 8005d9c:	7819      	ldrb	r1, [r3, #0]
		if (c == 0) break;			/* End of string */
 8005d9e:	2900      	cmp	r1, #0
 8005da0:	f000 80e0 	beq.w	8005f64 <f_printf+0x1e2>
		if (c != '%') {				/* Non escape character */
 8005da4:	2925      	cmp	r1, #37	; 0x25
 8005da6:	d004      	beq.n	8005db2 <f_printf+0x30>
		c = *fmt++;
 8005da8:	1c5d      	adds	r5, r3, #1
			putc_bfd(&pb, c); continue;
 8005daa:	a809      	add	r0, sp, #36	; 0x24
 8005dac:	f7ff fe19 	bl	80059e2 <putc_bfd>
 8005db0:	e05d      	b.n	8005e6e <f_printf+0xec>
		c = *fmt++;
 8005db2:	7859      	ldrb	r1, [r3, #1]
		if (c == '0') {				/* Flag: '0' padding */
 8005db4:	2930      	cmp	r1, #48	; 0x30
 8005db6:	d129      	bne.n	8005e0c <f_printf+0x8a>
			f = 1; c = *fmt++;
 8005db8:	7899      	ldrb	r1, [r3, #2]
 8005dba:	1cdd      	adds	r5, r3, #3
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	2700      	movs	r7, #0
			w = w * 10 + c - '0';
 8005dc0:	200a      	movs	r0, #10
		while (IsDigit(c)) {		/* Precision */
 8005dc2:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8005dc6:	2b09      	cmp	r3, #9
 8005dc8:	d929      	bls.n	8005e1e <f_printf+0x9c>
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 8005dca:	f001 03df 	and.w	r3, r1, #223	; 0xdf
 8005dce:	2b4c      	cmp	r3, #76	; 0x4c
			f |= 4; c = *fmt++;
 8005dd0:	bf02      	ittt	eq
 8005dd2:	7829      	ldrbeq	r1, [r5, #0]
 8005dd4:	f042 0204 	orreq.w	r2, r2, #4
 8005dd8:	3501      	addeq	r5, #1
		if (!c) break;
 8005dda:	2900      	cmp	r1, #0
 8005ddc:	f000 80c2 	beq.w	8005f64 <f_printf+0x1e2>
		if (IsLower(d)) d -= 0x20;
 8005de0:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 8005de4:	2b19      	cmp	r3, #25
 8005de6:	bf9a      	itte	ls
 8005de8:	f1a1 0320 	subls.w	r3, r1, #32
 8005dec:	b2db      	uxtbls	r3, r3
 8005dee:	460b      	movhi	r3, r1
		switch (d) {				/* Type is... */
 8005df0:	2b4f      	cmp	r3, #79	; 0x4f
 8005df2:	d03e      	beq.n	8005e72 <f_printf+0xf0>
 8005df4:	d819      	bhi.n	8005e2a <f_printf+0xa8>
 8005df6:	2b43      	cmp	r3, #67	; 0x43
 8005df8:	f000 8096 	beq.w	8005f28 <f_printf+0x1a6>
 8005dfc:	2b44      	cmp	r3, #68	; 0x44
 8005dfe:	f000 809b 	beq.w	8005f38 <f_printf+0x1b6>
 8005e02:	2b42      	cmp	r3, #66	; 0x42
 8005e04:	d1d1      	bne.n	8005daa <f_printf+0x28>
			r = 2; break;
 8005e06:	f04f 0e02 	mov.w	lr, #2
 8005e0a:	e034      	b.n	8005e76 <f_printf+0xf4>
			if (c == '-') {			/* Flag: left justified */
 8005e0c:	292d      	cmp	r1, #45	; 0x2d
		c = *fmt++;
 8005e0e:	bf19      	ittee	ne
 8005e10:	1c9d      	addne	r5, r3, #2
		w = f = 0;
 8005e12:	2200      	movne	r2, #0
				f = 2; c = *fmt++;
 8005e14:	1cdd      	addeq	r5, r3, #3
 8005e16:	7899      	ldrbeq	r1, [r3, #2]
 8005e18:	bf08      	it	eq
 8005e1a:	2202      	moveq	r2, #2
 8005e1c:	e7cf      	b.n	8005dbe <f_printf+0x3c>
			w = w * 10 + c - '0';
 8005e1e:	fb00 1707 	mla	r7, r0, r7, r1
 8005e22:	3f30      	subs	r7, #48	; 0x30
			c = *fmt++;
 8005e24:	f815 1b01 	ldrb.w	r1, [r5], #1
 8005e28:	e7cb      	b.n	8005dc2 <f_printf+0x40>
		switch (d) {				/* Type is... */
 8005e2a:	2b55      	cmp	r3, #85	; 0x55
 8005e2c:	f000 8084 	beq.w	8005f38 <f_printf+0x1b6>
 8005e30:	2b58      	cmp	r3, #88	; 0x58
 8005e32:	d07e      	beq.n	8005f32 <f_printf+0x1b0>
 8005e34:	2b53      	cmp	r3, #83	; 0x53
 8005e36:	d1b8      	bne.n	8005daa <f_printf+0x28>
			p = va_arg(arp, TCHAR*);
 8005e38:	9b00      	ldr	r3, [sp, #0]
 8005e3a:	f8d3 8000 	ldr.w	r8, [r3]
 8005e3e:	1d19      	adds	r1, r3, #4
 8005e40:	9100      	str	r1, [sp, #0]
			for (j = 0; p[j]; j++) ;
 8005e42:	4643      	mov	r3, r8
 8005e44:	eba3 0408 	sub.w	r4, r3, r8
 8005e48:	f813 1b01 	ldrb.w	r1, [r3], #1
 8005e4c:	2900      	cmp	r1, #0
 8005e4e:	d1f9      	bne.n	8005e44 <f_printf+0xc2>
			if (!(f & 2)) {
 8005e50:	0793      	lsls	r3, r2, #30
 8005e52:	d404      	bmi.n	8005e5e <f_printf+0xdc>
				while (j++ < w) putc_bfd(&pb, ' ');
 8005e54:	4623      	mov	r3, r4
 8005e56:	42bb      	cmp	r3, r7
 8005e58:	f104 0401 	add.w	r4, r4, #1
 8005e5c:	d355      	bcc.n	8005f0a <f_printf+0x188>
 8005e5e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
			while (*p) putc_bfd(&pb, *p++);
 8005e62:	f818 1f01 	ldrb.w	r1, [r8, #1]!
 8005e66:	2900      	cmp	r1, #0
 8005e68:	d154      	bne.n	8005f14 <f_printf+0x192>
			while (j++ < w) putc_bfd(&pb, ' ');
 8005e6a:	42a7      	cmp	r7, r4
 8005e6c:	d856      	bhi.n	8005f1c <f_printf+0x19a>
{
 8005e6e:	462b      	mov	r3, r5
 8005e70:	e794      	b.n	8005d9c <f_printf+0x1a>
			r = 8; break;
 8005e72:	f04f 0e08 	mov.w	lr, #8
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8005e76:	f012 0f04 	tst.w	r2, #4
 8005e7a:	9800      	ldr	r0, [sp, #0]
 8005e7c:	d05f      	beq.n	8005f3e <f_printf+0x1bc>
 8005e7e:	1d04      	adds	r4, r0, #4
 8005e80:	6800      	ldr	r0, [r0, #0]
 8005e82:	9400      	str	r4, [sp, #0]
		if (d == 'D' && (v & 0x80000000)) {
 8005e84:	2b44      	cmp	r3, #68	; 0x44
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8005e86:	d104      	bne.n	8005e92 <f_printf+0x110>
		if (d == 'D' && (v & 0x80000000)) {
 8005e88:	2800      	cmp	r0, #0
			v = 0 - v;
 8005e8a:	bfbc      	itt	lt
 8005e8c:	4240      	neglt	r0, r0
			f |= 8;
 8005e8e:	f042 0208 	orrlt.w	r2, r2, #8
 8005e92:	2978      	cmp	r1, #120	; 0x78
 8005e94:	bf0c      	ite	eq
 8005e96:	f04f 0827 	moveq.w	r8, #39	; 0x27
 8005e9a:	f04f 0807 	movne.w	r8, #7
		i = 0;
 8005e9e:	2100      	movs	r1, #0
			d = (TCHAR)(v % r); v /= r;
 8005ea0:	fbb0 fcfe 	udiv	ip, r0, lr
 8005ea4:	fb0e 041c 	mls	r4, lr, ip, r0
 8005ea8:	b2e3      	uxtb	r3, r4
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8005eaa:	2c09      	cmp	r4, #9
 8005eac:	bf84      	itt	hi
 8005eae:	4443      	addhi	r3, r8
 8005eb0:	b2db      	uxtbhi	r3, r3
			str[i++] = d + '0';
 8005eb2:	3330      	adds	r3, #48	; 0x30
			d = (TCHAR)(v % r); v /= r;
 8005eb4:	4660      	mov	r0, ip
			str[i++] = d + '0';
 8005eb6:	1c4c      	adds	r4, r1, #1
 8005eb8:	5473      	strb	r3, [r6, r1]
		} while (v && i < sizeof str / sizeof str[0]);
 8005eba:	f1bc 0f00 	cmp.w	ip, #0
 8005ebe:	d002      	beq.n	8005ec6 <f_printf+0x144>
 8005ec0:	2c20      	cmp	r4, #32
 8005ec2:	d142      	bne.n	8005f4a <f_printf+0x1c8>
 8005ec4:	211f      	movs	r1, #31
		if (f & 8) str[i++] = '-';
 8005ec6:	0710      	lsls	r0, r2, #28
 8005ec8:	d505      	bpl.n	8005ed6 <f_printf+0x154>
 8005eca:	ab1c      	add	r3, sp, #112	; 0x70
 8005ecc:	441c      	add	r4, r3
 8005ece:	232d      	movs	r3, #45	; 0x2d
 8005ed0:	f804 3c6c 	strb.w	r3, [r4, #-108]
 8005ed4:	1c8c      	adds	r4, r1, #2
		j = i; d = (f & 1) ? '0' : ' ';
 8005ed6:	f012 0f01 	tst.w	r2, #1
 8005eda:	bf14      	ite	ne
 8005edc:	f04f 0930 	movne.w	r9, #48	; 0x30
 8005ee0:	f04f 0920 	moveq.w	r9, #32
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8005ee4:	0793      	lsls	r3, r2, #30
		j = i; d = (f & 1) ? '0' : ' ';
 8005ee6:	46a0      	mov	r8, r4
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8005ee8:	d536      	bpl.n	8005f58 <f_printf+0x1d6>
		do {
			putc_bfd(&pb, str[--i]);
 8005eea:	3c01      	subs	r4, #1
 8005eec:	a809      	add	r0, sp, #36	; 0x24
 8005eee:	5d31      	ldrb	r1, [r6, r4]
 8005ef0:	f7ff fd77 	bl	80059e2 <putc_bfd>
		} while (i);
 8005ef4:	2c00      	cmp	r4, #0
 8005ef6:	d1f8      	bne.n	8005eea <f_printf+0x168>
		while (j++ < w) putc_bfd(&pb, d);
 8005ef8:	4547      	cmp	r7, r8
 8005efa:	d9b8      	bls.n	8005e6e <f_printf+0xec>
 8005efc:	4649      	mov	r1, r9
 8005efe:	a809      	add	r0, sp, #36	; 0x24
 8005f00:	f7ff fd6f 	bl	80059e2 <putc_bfd>
 8005f04:	f108 0801 	add.w	r8, r8, #1
 8005f08:	e7f6      	b.n	8005ef8 <f_printf+0x176>
				while (j++ < w) putc_bfd(&pb, ' ');
 8005f0a:	2120      	movs	r1, #32
 8005f0c:	a809      	add	r0, sp, #36	; 0x24
 8005f0e:	f7ff fd68 	bl	80059e2 <putc_bfd>
 8005f12:	e79f      	b.n	8005e54 <f_printf+0xd2>
			while (*p) putc_bfd(&pb, *p++);
 8005f14:	a809      	add	r0, sp, #36	; 0x24
 8005f16:	f7ff fd64 	bl	80059e2 <putc_bfd>
 8005f1a:	e7a2      	b.n	8005e62 <f_printf+0xe0>
			while (j++ < w) putc_bfd(&pb, ' ');
 8005f1c:	2120      	movs	r1, #32
 8005f1e:	a809      	add	r0, sp, #36	; 0x24
 8005f20:	f7ff fd5f 	bl	80059e2 <putc_bfd>
 8005f24:	3401      	adds	r4, #1
 8005f26:	e7a0      	b.n	8005e6a <f_printf+0xe8>
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8005f28:	9b00      	ldr	r3, [sp, #0]
 8005f2a:	1d1a      	adds	r2, r3, #4
 8005f2c:	9200      	str	r2, [sp, #0]
 8005f2e:	7819      	ldrb	r1, [r3, #0]
 8005f30:	e73b      	b.n	8005daa <f_printf+0x28>
			r = 16; break;
 8005f32:	f04f 0e10 	mov.w	lr, #16
 8005f36:	e79e      	b.n	8005e76 <f_printf+0xf4>
			r = 10; break;
 8005f38:	f04f 0e0a 	mov.w	lr, #10
 8005f3c:	e79b      	b.n	8005e76 <f_printf+0xf4>
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8005f3e:	2b44      	cmp	r3, #68	; 0x44
 8005f40:	f100 0304 	add.w	r3, r0, #4
 8005f44:	9300      	str	r3, [sp, #0]
 8005f46:	6800      	ldr	r0, [r0, #0]
 8005f48:	e79d      	b.n	8005e86 <f_printf+0x104>
 8005f4a:	4621      	mov	r1, r4
 8005f4c:	e7a8      	b.n	8005ea0 <f_printf+0x11e>
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8005f4e:	4649      	mov	r1, r9
 8005f50:	a809      	add	r0, sp, #36	; 0x24
 8005f52:	f7ff fd46 	bl	80059e2 <putc_bfd>
 8005f56:	46d0      	mov	r8, sl
 8005f58:	45b8      	cmp	r8, r7
 8005f5a:	f108 0a01 	add.w	sl, r8, #1
 8005f5e:	d3f6      	bcc.n	8005f4e <f_printf+0x1cc>
 8005f60:	46d0      	mov	r8, sl
 8005f62:	e7c2      	b.n	8005eea <f_printf+0x168>
	}

	va_end(arp);

	return putc_flush(&pb);
 8005f64:	a809      	add	r0, sp, #36	; 0x24
 8005f66:	f7ff fd58 	bl	8005a1a <putc_flush>
}
 8005f6a:	b01d      	add	sp, #116	; 0x74
 8005f6c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f70:	b003      	add	sp, #12
 8005f72:	4770      	bx	lr

08005f74 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005f74:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8005f76:	4b0f      	ldr	r3, [pc, #60]	; (8005fb4 <FATFS_LinkDriverEx+0x40>)
 8005f78:	7a5d      	ldrb	r5, [r3, #9]
 8005f7a:	f005 04ff 	and.w	r4, r5, #255	; 0xff
 8005f7e:	b9b5      	cbnz	r5, 8005fae <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005f80:	7a5d      	ldrb	r5, [r3, #9]
 8005f82:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 8005f84:	7a5d      	ldrb	r5, [r3, #9]
 8005f86:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8005f8a:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8005f8c:	7a58      	ldrb	r0, [r3, #9]
 8005f8e:	4418      	add	r0, r3
 8005f90:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8005f92:	7a5a      	ldrb	r2, [r3, #9]
 8005f94:	b2d2      	uxtb	r2, r2
 8005f96:	1c50      	adds	r0, r2, #1
 8005f98:	b2c0      	uxtb	r0, r0
 8005f9a:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 8005f9c:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 8005f9e:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 8005fa0:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8005fa2:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 8005fa4:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 8005fa6:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8005fa8:	70cc      	strb	r4, [r1, #3]
 8005faa:	4620      	mov	r0, r4
 8005fac:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 8005fae:	2001      	movs	r0, #1
    ret = 0;
  }

  return ret;
}
 8005fb0:	bd30      	pop	{r4, r5, pc}
 8005fb2:	bf00      	nop
 8005fb4:	20000120 	.word	0x20000120

08005fb8 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f7ff bfdb 	b.w	8005f74 <FATFS_LinkDriverEx>

08005fbe <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8005fbe:	b513      	push	{r0, r1, r4, lr}

    int ret;

    osSemaphoreDef(SEM);
 8005fc0:	2300      	movs	r3, #0
{
 8005fc2:	460c      	mov	r4, r1
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 8005fc4:	4668      	mov	r0, sp
 8005fc6:	2101      	movs	r1, #1
    osSemaphoreDef(SEM);
 8005fc8:	9300      	str	r3, [sp, #0]
 8005fca:	9301      	str	r3, [sp, #4]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 8005fcc:	f000 f85a 	bl	8006084 <osSemaphoreCreate>
 8005fd0:	6020      	str	r0, [r4, #0]
    ret = (*sobj != NULL);

    return ret;
}
 8005fd2:	3000      	adds	r0, #0
 8005fd4:	bf18      	it	ne
 8005fd6:	2001      	movne	r0, #1
 8005fd8:	b002      	add	sp, #8
 8005fda:	bd10      	pop	{r4, pc}

08005fdc <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8005fdc:	b508      	push	{r3, lr}
    osSemaphoreDelete (sobj);
 8005fde:	f000 f94b 	bl	8006278 <osSemaphoreDelete>
    return 1;
}
 8005fe2:	2001      	movs	r0, #1
 8005fe4:	bd08      	pop	{r3, pc}

08005fe6 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8005fe6:	b508      	push	{r3, lr}
  int ret = 0;

  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8005fe8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005fec:	f000 f870 	bl	80060d0 <osSemaphoreWait>
  {
    ret = 1;
  }

  return ret;
}
 8005ff0:	fab0 f080 	clz	r0, r0
 8005ff4:	0940      	lsrs	r0, r0, #5
 8005ff6:	bd08      	pop	{r3, pc}

08005ff8 <ff_rel_grant>:

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
  osSemaphoreRelease(sobj);
 8005ff8:	f000 b890 	b.w	800611c <osSemaphoreRelease>

08005ffc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005ffc:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8005ffe:	f001 fa8b 	bl	8007518 <vTaskStartScheduler>
  
  return osOK;
}
 8006002:	2000      	movs	r0, #0
 8006004:	bd08      	pop	{r3, pc}

08006006 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8006006:	b508      	push	{r3, lr}
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8006008:	f001 fce4 	bl	80079d4 <xTaskGetSchedulerState>
  else
    return 1;
#else
	return (-1);
#endif	
}
 800600c:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
 8006010:	bf18      	it	ne
 8006012:	2001      	movne	r0, #1
 8006014:	bd08      	pop	{r3, pc}

08006016 <osKernelSysTick>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006016:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 800601a:	b10b      	cbz	r3, 8006020 <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
 800601c:	f001 bac0 	b.w	80075a0 <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
 8006020:	f001 bab8 	b.w	8007594 <xTaskGetTickCount>

08006024 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006024:	b570      	push	{r4, r5, r6, lr}
 8006026:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006028:	6946      	ldr	r6, [r0, #20]
 800602a:	692a      	ldr	r2, [r5, #16]
 800602c:	6840      	ldr	r0, [r0, #4]
 800602e:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
{
 8006032:	460b      	mov	r3, r1
 8006034:	b086      	sub	sp, #24
 8006036:	6829      	ldr	r1, [r5, #0]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006038:	b176      	cbz	r6, 8006058 <osThreadCreate+0x34>
 800603a:	69ad      	ldr	r5, [r5, #24]
 800603c:	b165      	cbz	r5, 8006058 <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 800603e:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8006040:	bf14      	ite	ne
 8006042:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006044:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006046:	9502      	str	r5, [sp, #8]
 8006048:	e88d 0050 	stmia.w	sp, {r4, r6}
 800604c:	f001 fa00 	bl	8007450 <xTaskCreateStatic>
 8006050:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006052:	9805      	ldr	r0, [sp, #20]
}
 8006054:	b006      	add	sp, #24
 8006056:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 8006058:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 800605a:	bf14      	ite	ne
 800605c:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800605e:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006060:	ad05      	add	r5, sp, #20
 8006062:	b292      	uxth	r2, r2
 8006064:	e88d 0030 	stmia.w	sp, {r4, r5}
 8006068:	f001 fa29 	bl	80074be <xTaskCreate>
 800606c:	2801      	cmp	r0, #1
 800606e:	d0f0      	beq.n	8006052 <osThreadCreate+0x2e>
      return NULL;
 8006070:	2000      	movs	r0, #0
 8006072:	e7ef      	b.n	8006054 <osThreadCreate+0x30>

08006074 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006074:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006076:	2800      	cmp	r0, #0
 8006078:	bf08      	it	eq
 800607a:	2001      	moveq	r0, #1
 800607c:	f001 fba2 	bl	80077c4 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006080:	2000      	movs	r0, #0
 8006082:	bd08      	pop	{r3, pc}

08006084 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8006084:	b537      	push	{r0, r1, r2, r4, r5, lr}
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8006086:	6844      	ldr	r4, [r0, #4]
{ 
 8006088:	460d      	mov	r5, r1
  if (semaphore_def->controlblock != NULL){
 800608a:	b16c      	cbz	r4, 80060a8 <osSemaphoreCreate+0x24>
    if (count == 1) {
 800608c:	2901      	cmp	r1, #1
 800608e:	d11b      	bne.n	80060c8 <osSemaphoreCreate+0x44>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8006090:	2303      	movs	r3, #3
 8006092:	2200      	movs	r2, #0
 8006094:	9300      	str	r3, [sp, #0]
 8006096:	4628      	mov	r0, r5
 8006098:	4623      	mov	r3, r4
 800609a:	4611      	mov	r1, r2
 800609c:	f000 fc9c 	bl	80069d8 <xQueueGenericCreateStatic>
 80060a0:	4605      	mov	r5, r0
#else
    return NULL;
#endif
  }
#endif
}
 80060a2:	4628      	mov	r0, r5
 80060a4:	b003      	add	sp, #12
 80060a6:	bd30      	pop	{r4, r5, pc}
    if (count == 1) {
 80060a8:	2901      	cmp	r1, #1
 80060aa:	d10f      	bne.n	80060cc <osSemaphoreCreate+0x48>
      vSemaphoreCreateBinary(sema);
 80060ac:	4628      	mov	r0, r5
 80060ae:	2203      	movs	r2, #3
 80060b0:	4621      	mov	r1, r4
 80060b2:	f000 fcda 	bl	8006a6a <xQueueGenericCreate>
 80060b6:	4605      	mov	r5, r0
 80060b8:	2800      	cmp	r0, #0
 80060ba:	d0f2      	beq.n	80060a2 <osSemaphoreCreate+0x1e>
 80060bc:	4623      	mov	r3, r4
 80060be:	4622      	mov	r2, r4
 80060c0:	4621      	mov	r1, r4
 80060c2:	f000 fcf7 	bl	8006ab4 <xQueueGenericSend>
 80060c6:	e7ec      	b.n	80060a2 <osSemaphoreCreate+0x1e>
      return NULL;
 80060c8:	2500      	movs	r5, #0
 80060ca:	e7ea      	b.n	80060a2 <osSemaphoreCreate+0x1e>
 80060cc:	4625      	mov	r5, r4
 80060ce:	e7e8      	b.n	80060a2 <osSemaphoreCreate+0x1e>

080060d0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80060d0:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80060d2:	2400      	movs	r4, #0
 80060d4:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 80060d6:	b1e0      	cbz	r0, 8006112 <osSemaphoreWait+0x42>
 80060d8:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 80060dc:	b1a3      	cbz	r3, 8006108 <osSemaphoreWait+0x38>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80060de:	aa01      	add	r2, sp, #4
 80060e0:	4621      	mov	r1, r4
 80060e2:	f000 ffb7 	bl	8007054 <xQueueReceiveFromISR>
 80060e6:	2801      	cmp	r0, #1
 80060e8:	d002      	beq.n	80060f0 <osSemaphoreWait+0x20>
      return osErrorOS;
 80060ea:	20ff      	movs	r0, #255	; 0xff
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
}
 80060ec:	b002      	add	sp, #8
 80060ee:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 80060f0:	9b01      	ldr	r3, [sp, #4]
 80060f2:	b13b      	cbz	r3, 8006104 <osSemaphoreWait+0x34>
 80060f4:	4b08      	ldr	r3, [pc, #32]	; (8006118 <osSemaphoreWait+0x48>)
 80060f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060fa:	601a      	str	r2, [r3, #0]
 80060fc:	f3bf 8f4f 	dsb	sy
 8006100:	f3bf 8f6f 	isb	sy
  return osOK;
 8006104:	2000      	movs	r0, #0
 8006106:	e7f1      	b.n	80060ec <osSemaphoreWait+0x1c>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8006108:	f000 fee4 	bl	8006ed4 <xQueueSemaphoreTake>
 800610c:	2801      	cmp	r0, #1
 800610e:	d1ec      	bne.n	80060ea <osSemaphoreWait+0x1a>
 8006110:	e7f8      	b.n	8006104 <osSemaphoreWait+0x34>
    return osErrorParameter;
 8006112:	2080      	movs	r0, #128	; 0x80
 8006114:	e7ea      	b.n	80060ec <osSemaphoreWait+0x1c>
 8006116:	bf00      	nop
 8006118:	e000ed04 	.word	0xe000ed04

0800611c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800611c:	b513      	push	{r0, r1, r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800611e:	2400      	movs	r4, #0
 8006120:	9401      	str	r4, [sp, #4]
 8006122:	f3ef 8305 	mrs	r3, IPSR
  
  
  if (inHandlerMode()) {
 8006126:	b193      	cbz	r3, 800614e <osSemaphoreRelease+0x32>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006128:	a901      	add	r1, sp, #4
 800612a:	f000 fddb 	bl	8006ce4 <xQueueGiveFromISR>
 800612e:	2801      	cmp	r0, #1
 8006130:	d113      	bne.n	800615a <osSemaphoreRelease+0x3e>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006132:	9b01      	ldr	r3, [sp, #4]
 8006134:	b913      	cbnz	r3, 800613c <osSemaphoreRelease+0x20>
  osStatus result = osOK;
 8006136:	2000      	movs	r0, #0
      result = osErrorOS;
    }
  }
  
  return result;
}
 8006138:	b002      	add	sp, #8
 800613a:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 800613c:	4b08      	ldr	r3, [pc, #32]	; (8006160 <osSemaphoreRelease+0x44>)
 800613e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006142:	601a      	str	r2, [r3, #0]
 8006144:	f3bf 8f4f 	dsb	sy
 8006148:	f3bf 8f6f 	isb	sy
 800614c:	e7f3      	b.n	8006136 <osSemaphoreRelease+0x1a>
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800614e:	461a      	mov	r2, r3
 8006150:	4619      	mov	r1, r3
 8006152:	f000 fcaf 	bl	8006ab4 <xQueueGenericSend>
 8006156:	2801      	cmp	r0, #1
 8006158:	d0ed      	beq.n	8006136 <osSemaphoreRelease+0x1a>
      result = osErrorOS;
 800615a:	20ff      	movs	r0, #255	; 0xff
 800615c:	e7ec      	b.n	8006138 <osSemaphoreRelease+0x1c>
 800615e:	bf00      	nop
 8006160:	e000ed04 	.word	0xe000ed04

08006164 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8006164:	b507      	push	{r0, r1, r2, lr}
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8006166:	6882      	ldr	r2, [r0, #8]
 8006168:	b14a      	cbz	r2, 800617e <osMessageCreate+0x1a>
 800616a:	68c3      	ldr	r3, [r0, #12]
 800616c:	b13b      	cbz	r3, 800617e <osMessageCreate+0x1a>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800616e:	2100      	movs	r1, #0
 8006170:	9100      	str	r1, [sp, #0]
 8006172:	c803      	ldmia	r0, {r0, r1}
 8006174:	f000 fc30 	bl	80069d8 <xQueueGenericCreateStatic>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8006178:	b003      	add	sp, #12
 800617a:	f85d fb04 	ldr.w	pc, [sp], #4
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800617e:	c803      	ldmia	r0, {r0, r1}
 8006180:	2200      	movs	r2, #0
}
 8006182:	b003      	add	sp, #12
 8006184:	f85d eb04 	ldr.w	lr, [sp], #4
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8006188:	f000 bc6f 	b.w	8006a6a <xQueueGenericCreate>

0800618c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800618c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 800618e:	2400      	movs	r4, #0
{
 8006190:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8006192:	9403      	str	r4, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
 8006194:	42a2      	cmp	r2, r4
 8006196:	bf08      	it	eq
 8006198:	2201      	moveq	r2, #1
 800619a:	f3ef 8305 	mrs	r3, IPSR
  }
  
  if (inHandlerMode()) {
 800619e:	b1ab      	cbz	r3, 80061cc <osMessagePut+0x40>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80061a0:	4623      	mov	r3, r4
 80061a2:	aa03      	add	r2, sp, #12
 80061a4:	a901      	add	r1, sp, #4
 80061a6:	f000 fd3b 	bl	8006c20 <xQueueGenericSendFromISR>
 80061aa:	2801      	cmp	r0, #1
 80061ac:	d002      	beq.n	80061b4 <osMessagePut+0x28>
      return osErrorOS;
 80061ae:	20ff      	movs	r0, #255	; 0xff
      return osErrorOS;
    }
  }
  
  return osOK;
}
 80061b0:	b004      	add	sp, #16
 80061b2:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 80061b4:	9b03      	ldr	r3, [sp, #12]
 80061b6:	b13b      	cbz	r3, 80061c8 <osMessagePut+0x3c>
 80061b8:	4b07      	ldr	r3, [pc, #28]	; (80061d8 <osMessagePut+0x4c>)
 80061ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061be:	601a      	str	r2, [r3, #0]
 80061c0:	f3bf 8f4f 	dsb	sy
 80061c4:	f3bf 8f6f 	isb	sy
  return osOK;
 80061c8:	2000      	movs	r0, #0
 80061ca:	e7f1      	b.n	80061b0 <osMessagePut+0x24>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80061cc:	a901      	add	r1, sp, #4
 80061ce:	f000 fc71 	bl	8006ab4 <xQueueGenericSend>
 80061d2:	2801      	cmp	r0, #1
 80061d4:	d1eb      	bne.n	80061ae <osMessagePut+0x22>
 80061d6:	e7f7      	b.n	80061c8 <osMessagePut+0x3c>
 80061d8:	e000ed04 	.word	0xe000ed04

080061dc <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80061dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061de:	b085      	sub	sp, #20
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 80061e0:	2600      	movs	r6, #0
{
 80061e2:	4604      	mov	r4, r0
 80061e4:	4617      	mov	r7, r2
 80061e6:	4608      	mov	r0, r1
  event.def.message_id = queue_id;
 80061e8:	9103      	str	r1, [sp, #12]
  event.value.v = 0;
 80061ea:	9602      	str	r6, [sp, #8]
 80061ec:	ad01      	add	r5, sp, #4
  
  if (queue_id == NULL) {
 80061ee:	b911      	cbnz	r1, 80061f6 <osMessageGet+0x1a>
    event.status = osErrorParameter;
 80061f0:	2380      	movs	r3, #128	; 0x80
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80061f2:	9301      	str	r3, [sp, #4]
 80061f4:	e017      	b.n	8006226 <osMessageGet+0x4a>
  taskWoken = pdFALSE;
 80061f6:	9600      	str	r6, [sp, #0]
 80061f8:	f3ef 8305 	mrs	r3, IPSR
  if (inHandlerMode()) {
 80061fc:	b1d3      	cbz	r3, 8006234 <osMessageGet+0x58>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80061fe:	466a      	mov	r2, sp
 8006200:	a902      	add	r1, sp, #8
 8006202:	f000 ff27 	bl	8007054 <xQueueReceiveFromISR>
 8006206:	2801      	cmp	r0, #1
      event.status = osEventMessage;
 8006208:	bf04      	itt	eq
 800620a:	2310      	moveq	r3, #16
 800620c:	9301      	streq	r3, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 800620e:	9b00      	ldr	r3, [sp, #0]
      event.status = osOK;
 8006210:	bf18      	it	ne
 8006212:	9601      	strne	r6, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 8006214:	b13b      	cbz	r3, 8006226 <osMessageGet+0x4a>
 8006216:	4b0d      	ldr	r3, [pc, #52]	; (800624c <osMessageGet+0x70>)
 8006218:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800621c:	601a      	str	r2, [r3, #0]
 800621e:	f3bf 8f4f 	dsb	sy
 8006222:	f3bf 8f6f 	isb	sy
    }
  }
  
  return event;
 8006226:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800622a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800622e:	4620      	mov	r0, r4
 8006230:	b005      	add	sp, #20
 8006232:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8006234:	a902      	add	r1, sp, #8
 8006236:	f000 fda9 	bl	8006d8c <xQueueReceive>
 800623a:	2801      	cmp	r0, #1
 800623c:	d101      	bne.n	8006242 <osMessageGet+0x66>
      event.status = osEventMessage;
 800623e:	2310      	movs	r3, #16
 8006240:	e7d7      	b.n	80061f2 <osMessageGet+0x16>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8006242:	2f00      	cmp	r7, #0
 8006244:	bf0c      	ite	eq
 8006246:	2300      	moveq	r3, #0
 8006248:	2340      	movne	r3, #64	; 0x40
 800624a:	e7d2      	b.n	80061f2 <osMessageGet+0x16>
 800624c:	e000ed04 	.word	0xe000ed04

08006250 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8006250:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8006252:	f001 fbbf 	bl	80079d4 <xTaskGetSchedulerState>
 8006256:	2801      	cmp	r0, #1
 8006258:	d003      	beq.n	8006262 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800625a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800625e:	f000 b921 	b.w	80064a4 <xPortSysTickHandler>
 8006262:	bd08      	pop	{r3, pc}

08006264 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8006264:	b510      	push	{r4, lr}
 8006266:	f3ef 8405 	mrs	r4, IPSR
  if (inHandlerMode()) {
 800626a:	b91c      	cbnz	r4, 8006274 <osMessageDelete+0x10>
    return osErrorISR;
  }

  vQueueDelete(queue_id);
 800626c:	f000 ff76 	bl	800715c <vQueueDelete>

  return osOK; 
 8006270:	4620      	mov	r0, r4
 8006272:	bd10      	pop	{r4, pc}
    return osErrorISR;
 8006274:	2082      	movs	r0, #130	; 0x82
}
 8006276:	bd10      	pop	{r4, pc}

08006278 <osSemaphoreDelete>:
 8006278:	f7ff bff4 	b.w	8006264 <osMessageDelete>

0800627c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800627c:	f100 0308 	add.w	r3, r0, #8
 8006280:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006282:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006286:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006288:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800628a:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800628c:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800628e:	6003      	str	r3, [r0, #0]
 8006290:	4770      	bx	lr

08006292 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006292:	2300      	movs	r3, #0
 8006294:	6103      	str	r3, [r0, #16]
 8006296:	4770      	bx	lr

08006298 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8006298:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800629a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800629c:	689a      	ldr	r2, [r3, #8]
 800629e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80062a0:	689a      	ldr	r2, [r3, #8]
 80062a2:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80062a4:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80062a6:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80062a8:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80062aa:	3301      	adds	r3, #1
 80062ac:	6003      	str	r3, [r0, #0]
 80062ae:	4770      	bx	lr

080062b0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80062b0:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80062b2:	1c53      	adds	r3, r2, #1
{
 80062b4:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 80062b6:	d10a      	bne.n	80062ce <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80062b8:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80062ba:	685a      	ldr	r2, [r3, #4]
 80062bc:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80062be:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80062c0:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80062c2:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80062c4:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80062c6:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80062c8:	3301      	adds	r3, #1
 80062ca:	6003      	str	r3, [r0, #0]
 80062cc:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062ce:	f100 0308 	add.w	r3, r0, #8
 80062d2:	685c      	ldr	r4, [r3, #4]
 80062d4:	6825      	ldr	r5, [r4, #0]
 80062d6:	42aa      	cmp	r2, r5
 80062d8:	d3ef      	bcc.n	80062ba <vListInsert+0xa>
 80062da:	4623      	mov	r3, r4
 80062dc:	e7f9      	b.n	80062d2 <vListInsert+0x22>

080062de <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80062de:	6841      	ldr	r1, [r0, #4]
 80062e0:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80062e2:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80062e4:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80062e6:	6882      	ldr	r2, [r0, #8]
 80062e8:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80062ea:	6859      	ldr	r1, [r3, #4]
 80062ec:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80062ee:	bf08      	it	eq
 80062f0:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80062f2:	2200      	movs	r2, #0
 80062f4:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	3a01      	subs	r2, #1
 80062fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80062fc:	6818      	ldr	r0, [r3, #0]
}
 80062fe:	4770      	bx	lr

08006300 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006300:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8006302:	2300      	movs	r3, #0
 8006304:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006306:	4b0d      	ldr	r3, [pc, #52]	; (800633c <prvTaskExitError+0x3c>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	3301      	adds	r3, #1
 800630c:	d008      	beq.n	8006320 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800630e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006312:	f383 8811 	msr	BASEPRI, r3
 8006316:	f3bf 8f6f 	isb	sy
 800631a:	f3bf 8f4f 	dsb	sy
 800631e:	e7fe      	b.n	800631e <prvTaskExitError+0x1e>
 8006320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006324:	f383 8811 	msr	BASEPRI, r3
 8006328:	f3bf 8f6f 	isb	sy
 800632c:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006330:	9b01      	ldr	r3, [sp, #4]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d0fc      	beq.n	8006330 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006336:	b002      	add	sp, #8
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop
 800633c:	20000008 	.word	0x20000008

08006340 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006340:	4808      	ldr	r0, [pc, #32]	; (8006364 <prvPortStartFirstTask+0x24>)
 8006342:	6800      	ldr	r0, [r0, #0]
 8006344:	6800      	ldr	r0, [r0, #0]
 8006346:	f380 8808 	msr	MSP, r0
 800634a:	f04f 0000 	mov.w	r0, #0
 800634e:	f380 8814 	msr	CONTROL, r0
 8006352:	b662      	cpsie	i
 8006354:	b661      	cpsie	f
 8006356:	f3bf 8f4f 	dsb	sy
 800635a:	f3bf 8f6f 	isb	sy
 800635e:	df00      	svc	0
 8006360:	bf00      	nop
 8006362:	0000      	.short	0x0000
 8006364:	e000ed08 	.word	0xe000ed08

08006368 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006368:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006378 <vPortEnableVFP+0x10>
 800636c:	6801      	ldr	r1, [r0, #0]
 800636e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006372:	6001      	str	r1, [r0, #0]
 8006374:	4770      	bx	lr
 8006376:	0000      	.short	0x0000
 8006378:	e000ed88 	.word	0xe000ed88

0800637c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800637c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006380:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006384:	4b07      	ldr	r3, [pc, #28]	; (80063a4 <pxPortInitialiseStack+0x28>)
 8006386:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800638a:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800638e:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006392:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006396:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800639a:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800639e:	3844      	subs	r0, #68	; 0x44
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	08006301 	.word	0x08006301
	...

080063b0 <SVC_Handler>:
	__asm volatile (
 80063b0:	4b07      	ldr	r3, [pc, #28]	; (80063d0 <pxCurrentTCBConst2>)
 80063b2:	6819      	ldr	r1, [r3, #0]
 80063b4:	6808      	ldr	r0, [r1, #0]
 80063b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063ba:	f380 8809 	msr	PSP, r0
 80063be:	f3bf 8f6f 	isb	sy
 80063c2:	f04f 0000 	mov.w	r0, #0
 80063c6:	f380 8811 	msr	BASEPRI, r0
 80063ca:	4770      	bx	lr
 80063cc:	f3af 8000 	nop.w

080063d0 <pxCurrentTCBConst2>:
 80063d0:	20003d4c 	.word	0x20003d4c

080063d4 <vPortEnterCritical>:
 80063d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d8:	f383 8811 	msr	BASEPRI, r3
 80063dc:	f3bf 8f6f 	isb	sy
 80063e0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80063e4:	4a0a      	ldr	r2, [pc, #40]	; (8006410 <vPortEnterCritical+0x3c>)
 80063e6:	6813      	ldr	r3, [r2, #0]
 80063e8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80063ea:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80063ec:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80063ee:	d10d      	bne.n	800640c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80063f0:	4b08      	ldr	r3, [pc, #32]	; (8006414 <vPortEnterCritical+0x40>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80063f8:	d008      	beq.n	800640c <vPortEnterCritical+0x38>
 80063fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fe:	f383 8811 	msr	BASEPRI, r3
 8006402:	f3bf 8f6f 	isb	sy
 8006406:	f3bf 8f4f 	dsb	sy
 800640a:	e7fe      	b.n	800640a <vPortEnterCritical+0x36>
 800640c:	4770      	bx	lr
 800640e:	bf00      	nop
 8006410:	20000008 	.word	0x20000008
 8006414:	e000ed04 	.word	0xe000ed04

08006418 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8006418:	4a08      	ldr	r2, [pc, #32]	; (800643c <vPortExitCritical+0x24>)
 800641a:	6813      	ldr	r3, [r2, #0]
 800641c:	b943      	cbnz	r3, 8006430 <vPortExitCritical+0x18>
 800641e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006422:	f383 8811 	msr	BASEPRI, r3
 8006426:	f3bf 8f6f 	isb	sy
 800642a:	f3bf 8f4f 	dsb	sy
 800642e:	e7fe      	b.n	800642e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8006430:	3b01      	subs	r3, #1
 8006432:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006434:	b90b      	cbnz	r3, 800643a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006436:	f383 8811 	msr	BASEPRI, r3
 800643a:	4770      	bx	lr
 800643c:	20000008 	.word	0x20000008

08006440 <PendSV_Handler>:
	__asm volatile
 8006440:	f3ef 8009 	mrs	r0, PSP
 8006444:	f3bf 8f6f 	isb	sy
 8006448:	4b15      	ldr	r3, [pc, #84]	; (80064a0 <pxCurrentTCBConst>)
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	f01e 0f10 	tst.w	lr, #16
 8006450:	bf08      	it	eq
 8006452:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006456:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800645a:	6010      	str	r0, [r2, #0]
 800645c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006460:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006464:	f380 8811 	msr	BASEPRI, r0
 8006468:	f3bf 8f4f 	dsb	sy
 800646c:	f3bf 8f6f 	isb	sy
 8006470:	f001 f9cc 	bl	800780c <vTaskSwitchContext>
 8006474:	f04f 0000 	mov.w	r0, #0
 8006478:	f380 8811 	msr	BASEPRI, r0
 800647c:	bc09      	pop	{r0, r3}
 800647e:	6819      	ldr	r1, [r3, #0]
 8006480:	6808      	ldr	r0, [r1, #0]
 8006482:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006486:	f01e 0f10 	tst.w	lr, #16
 800648a:	bf08      	it	eq
 800648c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006490:	f380 8809 	msr	PSP, r0
 8006494:	f3bf 8f6f 	isb	sy
 8006498:	4770      	bx	lr
 800649a:	bf00      	nop
 800649c:	f3af 8000 	nop.w

080064a0 <pxCurrentTCBConst>:
 80064a0:	20003d4c 	.word	0x20003d4c

080064a4 <xPortSysTickHandler>:
{
 80064a4:	b508      	push	{r3, lr}
	__asm volatile
 80064a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064aa:	f383 8811 	msr	BASEPRI, r3
 80064ae:	f3bf 8f6f 	isb	sy
 80064b2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80064b6:	f001 f87b 	bl	80075b0 <xTaskIncrementTick>
 80064ba:	b118      	cbz	r0, 80064c4 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80064bc:	4b03      	ldr	r3, [pc, #12]	; (80064cc <xPortSysTickHandler+0x28>)
 80064be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064c2:	601a      	str	r2, [r3, #0]
	__asm volatile
 80064c4:	2300      	movs	r3, #0
 80064c6:	f383 8811 	msr	BASEPRI, r3
 80064ca:	bd08      	pop	{r3, pc}
 80064cc:	e000ed04 	.word	0xe000ed04

080064d0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80064d0:	4a08      	ldr	r2, [pc, #32]	; (80064f4 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80064d2:	4909      	ldr	r1, [pc, #36]	; (80064f8 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80064d4:	2300      	movs	r3, #0
 80064d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80064d8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80064da:	4b08      	ldr	r3, [pc, #32]	; (80064fc <vPortSetupTimerInterrupt+0x2c>)
 80064dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80064e6:	4906      	ldr	r1, [pc, #24]	; (8006500 <vPortSetupTimerInterrupt+0x30>)
 80064e8:	3b01      	subs	r3, #1
 80064ea:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80064ec:	2307      	movs	r3, #7
 80064ee:	6013      	str	r3, [r2, #0]
 80064f0:	4770      	bx	lr
 80064f2:	bf00      	nop
 80064f4:	e000e010 	.word	0xe000e010
 80064f8:	e000e018 	.word	0xe000e018
 80064fc:	20000010 	.word	0x20000010
 8006500:	e000e014 	.word	0xe000e014

08006504 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006504:	4b39      	ldr	r3, [pc, #228]	; (80065ec <xPortStartScheduler+0xe8>)
 8006506:	4a3a      	ldr	r2, [pc, #232]	; (80065f0 <xPortStartScheduler+0xec>)
{
 8006508:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800650a:	6819      	ldr	r1, [r3, #0]
 800650c:	4291      	cmp	r1, r2
 800650e:	d108      	bne.n	8006522 <xPortStartScheduler+0x1e>
	__asm volatile
 8006510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006514:	f383 8811 	msr	BASEPRI, r3
 8006518:	f3bf 8f6f 	isb	sy
 800651c:	f3bf 8f4f 	dsb	sy
 8006520:	e7fe      	b.n	8006520 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	4b33      	ldr	r3, [pc, #204]	; (80065f4 <xPortStartScheduler+0xf0>)
 8006526:	429a      	cmp	r2, r3
 8006528:	d108      	bne.n	800653c <xPortStartScheduler+0x38>
 800652a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800652e:	f383 8811 	msr	BASEPRI, r3
 8006532:	f3bf 8f6f 	isb	sy
 8006536:	f3bf 8f4f 	dsb	sy
 800653a:	e7fe      	b.n	800653a <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800653c:	4b2e      	ldr	r3, [pc, #184]	; (80065f8 <xPortStartScheduler+0xf4>)
 800653e:	781a      	ldrb	r2, [r3, #0]
 8006540:	b2d2      	uxtb	r2, r2
 8006542:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006544:	22ff      	movs	r2, #255	; 0xff
 8006546:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006548:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800654a:	4a2c      	ldr	r2, [pc, #176]	; (80065fc <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800654c:	b2db      	uxtb	r3, r3
 800654e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006552:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006556:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800655a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800655c:	4b28      	ldr	r3, [pc, #160]	; (8006600 <xPortStartScheduler+0xfc>)
 800655e:	2207      	movs	r2, #7
 8006560:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006562:	2100      	movs	r1, #0
 8006564:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8006568:	0600      	lsls	r0, r0, #24
 800656a:	f102 34ff 	add.w	r4, r2, #4294967295	; 0xffffffff
 800656e:	d40d      	bmi.n	800658c <xPortStartScheduler+0x88>
 8006570:	b101      	cbz	r1, 8006574 <xPortStartScheduler+0x70>
 8006572:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	2a03      	cmp	r2, #3
 8006578:	d011      	beq.n	800659e <xPortStartScheduler+0x9a>
 800657a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800657e:	f383 8811 	msr	BASEPRI, r3
 8006582:	f3bf 8f6f 	isb	sy
 8006586:	f3bf 8f4f 	dsb	sy
 800658a:	e7fe      	b.n	800658a <xPortStartScheduler+0x86>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800658c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8006590:	0052      	lsls	r2, r2, #1
 8006592:	b2d2      	uxtb	r2, r2
 8006594:	f88d 2003 	strb.w	r2, [sp, #3]
 8006598:	2101      	movs	r1, #1
 800659a:	4622      	mov	r2, r4
 800659c:	e7e2      	b.n	8006564 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800659e:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80065a0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80065a4:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80065a6:	9b01      	ldr	r3, [sp, #4]
 80065a8:	4a13      	ldr	r2, [pc, #76]	; (80065f8 <xPortStartScheduler+0xf4>)
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80065ae:	4b15      	ldr	r3, [pc, #84]	; (8006604 <xPortStartScheduler+0x100>)
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80065b6:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80065be:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80065c0:	f7ff ff86 	bl	80064d0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80065c4:	4b10      	ldr	r3, [pc, #64]	; (8006608 <xPortStartScheduler+0x104>)
 80065c6:	2400      	movs	r4, #0
 80065c8:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 80065ca:	f7ff fecd 	bl	8006368 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80065ce:	4a0f      	ldr	r2, [pc, #60]	; (800660c <xPortStartScheduler+0x108>)
 80065d0:	6813      	ldr	r3, [r2, #0]
 80065d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80065d6:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80065d8:	f7ff feb2 	bl	8006340 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80065dc:	f001 f916 	bl	800780c <vTaskSwitchContext>
	prvTaskExitError();
 80065e0:	f7ff fe8e 	bl	8006300 <prvTaskExitError>
}
 80065e4:	4620      	mov	r0, r4
 80065e6:	b002      	add	sp, #8
 80065e8:	bd10      	pop	{r4, pc}
 80065ea:	bf00      	nop
 80065ec:	e000ed00 	.word	0xe000ed00
 80065f0:	410fc271 	.word	0x410fc271
 80065f4:	410fc270 	.word	0x410fc270
 80065f8:	e000e400 	.word	0xe000e400
 80065fc:	2000012c 	.word	0x2000012c
 8006600:	20000130 	.word	0x20000130
 8006604:	e000ed20 	.word	0xe000ed20
 8006608:	20000008 	.word	0x20000008
 800660c:	e000ef34 	.word	0xe000ef34

08006610 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006610:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006614:	2b0f      	cmp	r3, #15
 8006616:	d90e      	bls.n	8006636 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006618:	4a10      	ldr	r2, [pc, #64]	; (800665c <vPortValidateInterruptPriority+0x4c>)
 800661a:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800661c:	4a10      	ldr	r2, [pc, #64]	; (8006660 <vPortValidateInterruptPriority+0x50>)
 800661e:	7812      	ldrb	r2, [r2, #0]
 8006620:	429a      	cmp	r2, r3
 8006622:	d908      	bls.n	8006636 <vPortValidateInterruptPriority+0x26>
 8006624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006628:	f383 8811 	msr	BASEPRI, r3
 800662c:	f3bf 8f6f 	isb	sy
 8006630:	f3bf 8f4f 	dsb	sy
 8006634:	e7fe      	b.n	8006634 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006636:	4b0b      	ldr	r3, [pc, #44]	; (8006664 <vPortValidateInterruptPriority+0x54>)
 8006638:	4a0b      	ldr	r2, [pc, #44]	; (8006668 <vPortValidateInterruptPriority+0x58>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	6812      	ldr	r2, [r2, #0]
 800663e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006642:	4293      	cmp	r3, r2
 8006644:	d908      	bls.n	8006658 <vPortValidateInterruptPriority+0x48>
 8006646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800664a:	f383 8811 	msr	BASEPRI, r3
 800664e:	f3bf 8f6f 	isb	sy
 8006652:	f3bf 8f4f 	dsb	sy
 8006656:	e7fe      	b.n	8006656 <vPortValidateInterruptPriority+0x46>
 8006658:	4770      	bx	lr
 800665a:	bf00      	nop
 800665c:	e000e3f0 	.word	0xe000e3f0
 8006660:	2000012c 	.word	0x2000012c
 8006664:	e000ed0c 	.word	0xe000ed0c
 8006668:	20000130 	.word	0x20000130

0800666c <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800666c:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800666e:	4b0f      	ldr	r3, [pc, #60]	; (80066ac <prvInsertBlockIntoFreeList+0x40>)
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	4282      	cmp	r2, r0
 8006674:	d318      	bcc.n	80066a8 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006676:	685c      	ldr	r4, [r3, #4]
 8006678:	1919      	adds	r1, r3, r4
 800667a:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800667c:	bf01      	itttt	eq
 800667e:	6841      	ldreq	r1, [r0, #4]
 8006680:	4618      	moveq	r0, r3
 8006682:	1909      	addeq	r1, r1, r4
 8006684:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006686:	6844      	ldr	r4, [r0, #4]
 8006688:	1901      	adds	r1, r0, r4
 800668a:	428a      	cmp	r2, r1
 800668c:	d107      	bne.n	800669e <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800668e:	4908      	ldr	r1, [pc, #32]	; (80066b0 <prvInsertBlockIntoFreeList+0x44>)
 8006690:	6809      	ldr	r1, [r1, #0]
 8006692:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006694:	bf1f      	itttt	ne
 8006696:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006698:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800669a:	1909      	addne	r1, r1, r4
 800669c:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800669e:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80066a0:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80066a2:	bf18      	it	ne
 80066a4:	6018      	strne	r0, [r3, #0]
 80066a6:	bd10      	pop	{r4, pc}
 80066a8:	4613      	mov	r3, r2
 80066aa:	e7e1      	b.n	8006670 <prvInsertBlockIntoFreeList+0x4>
 80066ac:	20003d44 	.word	0x20003d44
 80066b0:	20000134 	.word	0x20000134

080066b4 <pvPortMalloc>:
{
 80066b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066b8:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80066ba:	f000 ff63 	bl	8007584 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80066be:	493e      	ldr	r1, [pc, #248]	; (80067b8 <pvPortMalloc+0x104>)
 80066c0:	4d3e      	ldr	r5, [pc, #248]	; (80067bc <pvPortMalloc+0x108>)
 80066c2:	680b      	ldr	r3, [r1, #0]
 80066c4:	bb0b      	cbnz	r3, 800670a <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 80066c6:	4a3e      	ldr	r2, [pc, #248]	; (80067c0 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80066c8:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80066ca:	bf1f      	itttt	ne
 80066cc:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066ce:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80066d2:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 80066d6:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066d8:	bf14      	ite	ne
 80066da:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80066dc:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80066e0:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80066e2:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066e4:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80066e8:	4e36      	ldr	r6, [pc, #216]	; (80067c4 <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 80066ea:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80066ec:	2000      	movs	r0, #0
 80066ee:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80066f0:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 80066f2:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80066f4:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80066f6:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80066f8:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80066fa:	4b33      	ldr	r3, [pc, #204]	; (80067c8 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80066fc:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80066fe:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006700:	4b32      	ldr	r3, [pc, #200]	; (80067cc <pvPortMalloc+0x118>)
 8006702:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006704:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006708:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800670a:	682f      	ldr	r7, [r5, #0]
 800670c:	4227      	tst	r7, r4
 800670e:	d116      	bne.n	800673e <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8006710:	2c00      	cmp	r4, #0
 8006712:	d041      	beq.n	8006798 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 8006714:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006718:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800671a:	bf1c      	itt	ne
 800671c:	f023 0307 	bicne.w	r3, r3, #7
 8006720:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006722:	b163      	cbz	r3, 800673e <pvPortMalloc+0x8a>
 8006724:	4a29      	ldr	r2, [pc, #164]	; (80067cc <pvPortMalloc+0x118>)
 8006726:	6816      	ldr	r6, [r2, #0]
 8006728:	42b3      	cmp	r3, r6
 800672a:	4690      	mov	r8, r2
 800672c:	d807      	bhi.n	800673e <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 800672e:	4a25      	ldr	r2, [pc, #148]	; (80067c4 <pvPortMalloc+0x110>)
 8006730:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006732:	6868      	ldr	r0, [r5, #4]
 8006734:	4283      	cmp	r3, r0
 8006736:	d804      	bhi.n	8006742 <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8006738:	6809      	ldr	r1, [r1, #0]
 800673a:	428d      	cmp	r5, r1
 800673c:	d107      	bne.n	800674e <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 800673e:	2400      	movs	r4, #0
 8006740:	e02a      	b.n	8006798 <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006742:	682c      	ldr	r4, [r5, #0]
 8006744:	2c00      	cmp	r4, #0
 8006746:	d0f7      	beq.n	8006738 <pvPortMalloc+0x84>
 8006748:	462a      	mov	r2, r5
 800674a:	4625      	mov	r5, r4
 800674c:	e7f1      	b.n	8006732 <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800674e:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006750:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006752:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006754:	1ac2      	subs	r2, r0, r3
 8006756:	2a10      	cmp	r2, #16
 8006758:	d90f      	bls.n	800677a <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800675a:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800675c:	0741      	lsls	r1, r0, #29
 800675e:	d008      	beq.n	8006772 <pvPortMalloc+0xbe>
 8006760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006764:	f383 8811 	msr	BASEPRI, r3
 8006768:	f3bf 8f6f 	isb	sy
 800676c:	f3bf 8f4f 	dsb	sy
 8006770:	e7fe      	b.n	8006770 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006772:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006774:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006776:	f7ff ff79 	bl	800666c <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800677a:	4913      	ldr	r1, [pc, #76]	; (80067c8 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800677c:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800677e:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006780:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006782:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006784:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 8006786:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800678a:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800678e:	bf38      	it	cc
 8006790:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006792:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006794:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006796:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8006798:	f000 ff9c 	bl	80076d4 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800679c:	0763      	lsls	r3, r4, #29
 800679e:	d008      	beq.n	80067b2 <pvPortMalloc+0xfe>
 80067a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a4:	f383 8811 	msr	BASEPRI, r3
 80067a8:	f3bf 8f6f 	isb	sy
 80067ac:	f3bf 8f4f 	dsb	sy
 80067b0:	e7fe      	b.n	80067b0 <pvPortMalloc+0xfc>
}
 80067b2:	4620      	mov	r0, r4
 80067b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067b8:	20000134 	.word	0x20000134
 80067bc:	20003d38 	.word	0x20003d38
 80067c0:	20000138 	.word	0x20000138
 80067c4:	20003d44 	.word	0x20003d44
 80067c8:	20003d40 	.word	0x20003d40
 80067cc:	20003d3c 	.word	0x20003d3c

080067d0 <vPortFree>:
{
 80067d0:	b510      	push	{r4, lr}
	if( pv != NULL )
 80067d2:	4604      	mov	r4, r0
 80067d4:	b370      	cbz	r0, 8006834 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80067d6:	4a18      	ldr	r2, [pc, #96]	; (8006838 <vPortFree+0x68>)
 80067d8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80067dc:	6812      	ldr	r2, [r2, #0]
 80067de:	4213      	tst	r3, r2
 80067e0:	d108      	bne.n	80067f4 <vPortFree+0x24>
 80067e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e6:	f383 8811 	msr	BASEPRI, r3
 80067ea:	f3bf 8f6f 	isb	sy
 80067ee:	f3bf 8f4f 	dsb	sy
 80067f2:	e7fe      	b.n	80067f2 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80067f4:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80067f8:	b141      	cbz	r1, 800680c <vPortFree+0x3c>
 80067fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067fe:	f383 8811 	msr	BASEPRI, r3
 8006802:	f3bf 8f6f 	isb	sy
 8006806:	f3bf 8f4f 	dsb	sy
 800680a:	e7fe      	b.n	800680a <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800680c:	ea23 0302 	bic.w	r3, r3, r2
 8006810:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8006814:	f000 feb6 	bl	8007584 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006818:	4a08      	ldr	r2, [pc, #32]	; (800683c <vPortFree+0x6c>)
 800681a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800681e:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006820:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006824:	440b      	add	r3, r1
 8006826:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006828:	f7ff ff20 	bl	800666c <prvInsertBlockIntoFreeList>
}
 800682c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8006830:	f000 bf50 	b.w	80076d4 <xTaskResumeAll>
 8006834:	bd10      	pop	{r4, pc}
 8006836:	bf00      	nop
 8006838:	20003d38 	.word	0x20003d38
 800683c:	20003d3c 	.word	0x20003d3c

08006840 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006840:	b510      	push	{r4, lr}
 8006842:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006844:	f7ff fdc6 	bl	80063d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006848:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800684a:	f7ff fde5 	bl	8006418 <vPortExitCritical>

	return xReturn;
}
 800684e:	fab4 f084 	clz	r0, r4
 8006852:	0940      	lsrs	r0, r0, #5
 8006854:	bd10      	pop	{r4, pc}

08006856 <prvCopyDataToQueue>:
{
 8006856:	b570      	push	{r4, r5, r6, lr}
 8006858:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800685a:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800685c:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 800685e:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006860:	b942      	cbnz	r2, 8006874 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006862:	6805      	ldr	r5, [r0, #0]
 8006864:	b99d      	cbnz	r5, 800688e <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006866:	6840      	ldr	r0, [r0, #4]
 8006868:	f001 f918 	bl	8007a9c <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800686c:	6065      	str	r5, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800686e:	3601      	adds	r6, #1
 8006870:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8006872:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8006874:	b96d      	cbnz	r5, 8006892 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006876:	6880      	ldr	r0, [r0, #8]
 8006878:	f004 f818 	bl	800a8ac <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800687c:	68a3      	ldr	r3, [r4, #8]
 800687e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006880:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006882:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006884:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006886:	4293      	cmp	r3, r2
 8006888:	d301      	bcc.n	800688e <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800688a:	6823      	ldr	r3, [r4, #0]
 800688c:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800688e:	2000      	movs	r0, #0
 8006890:	e7ed      	b.n	800686e <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006892:	68c0      	ldr	r0, [r0, #12]
 8006894:	f004 f80a 	bl	800a8ac <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006898:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800689a:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800689c:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800689e:	425b      	negs	r3, r3
 80068a0:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068a2:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80068a4:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80068a6:	bf3e      	ittt	cc
 80068a8:	6862      	ldrcc	r2, [r4, #4]
 80068aa:	189b      	addcc	r3, r3, r2
 80068ac:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80068ae:	2d02      	cmp	r5, #2
 80068b0:	d1ed      	bne.n	800688e <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80068b2:	b10e      	cbz	r6, 80068b8 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 80068b4:	3e01      	subs	r6, #1
 80068b6:	e7ea      	b.n	800688e <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 80068b8:	4630      	mov	r0, r6
 80068ba:	e7d8      	b.n	800686e <prvCopyDataToQueue+0x18>

080068bc <prvCopyDataFromQueue>:
{
 80068bc:	4603      	mov	r3, r0
 80068be:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80068c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 80068c2:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80068c4:	b162      	cbz	r2, 80068e0 <prvCopyDataFromQueue+0x24>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80068c6:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80068c8:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80068ca:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80068cc:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80068ce:	60d9      	str	r1, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80068d0:	bf24      	itt	cs
 80068d2:	6819      	ldrcs	r1, [r3, #0]
 80068d4:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80068d6:	68d9      	ldr	r1, [r3, #12]
}
 80068d8:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80068dc:	f003 bfe6 	b.w	800a8ac <memcpy>
}
 80068e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80068e4:	4770      	bx	lr

080068e6 <prvUnlockQueue>:
{
 80068e6:	b570      	push	{r4, r5, r6, lr}
 80068e8:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80068ea:	f7ff fd73 	bl	80063d4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80068ee:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068f2:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 80068f6:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80068f8:	2d00      	cmp	r5, #0
 80068fa:	dc14      	bgt.n	8006926 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 80068fc:	23ff      	movs	r3, #255	; 0xff
 80068fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8006902:	f7ff fd89 	bl	8006418 <vPortExitCritical>
	taskENTER_CRITICAL();
 8006906:	f7ff fd65 	bl	80063d4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800690a:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800690e:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8006912:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006914:	2d00      	cmp	r5, #0
 8006916:	dc12      	bgt.n	800693e <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8006918:	23ff      	movs	r3, #255	; 0xff
 800691a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800691e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8006922:	f7ff bd79 	b.w	8006418 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006926:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006928:	2b00      	cmp	r3, #0
 800692a:	d0e7      	beq.n	80068fc <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800692c:	4630      	mov	r0, r6
 800692e:	f000 ffc1 	bl	80078b4 <xTaskRemoveFromEventList>
 8006932:	b108      	cbz	r0, 8006938 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8006934:	f001 f848 	bl	80079c8 <vTaskMissedYield>
 8006938:	3d01      	subs	r5, #1
 800693a:	b26d      	sxtb	r5, r5
 800693c:	e7dc      	b.n	80068f8 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800693e:	6923      	ldr	r3, [r4, #16]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d0e9      	beq.n	8006918 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006944:	4630      	mov	r0, r6
 8006946:	f000 ffb5 	bl	80078b4 <xTaskRemoveFromEventList>
 800694a:	b108      	cbz	r0, 8006950 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800694c:	f001 f83c 	bl	80079c8 <vTaskMissedYield>
 8006950:	3d01      	subs	r5, #1
 8006952:	b26d      	sxtb	r5, r5
 8006954:	e7de      	b.n	8006914 <prvUnlockQueue+0x2e>
	...

08006958 <xQueueGenericReset>:
{
 8006958:	b538      	push	{r3, r4, r5, lr}
 800695a:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800695c:	4604      	mov	r4, r0
 800695e:	b940      	cbnz	r0, 8006972 <xQueueGenericReset+0x1a>
 8006960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006964:	f383 8811 	msr	BASEPRI, r3
 8006968:	f3bf 8f6f 	isb	sy
 800696c:	f3bf 8f4f 	dsb	sy
 8006970:	e7fe      	b.n	8006970 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8006972:	f7ff fd2f 	bl	80063d4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006976:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8006978:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800697a:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800697c:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800697e:	4343      	muls	r3, r0
 8006980:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006982:	1a1b      	subs	r3, r3, r0
 8006984:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006986:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006988:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800698a:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 800698c:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800698e:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8006990:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006994:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8006998:	b995      	cbnz	r5, 80069c0 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800699a:	6923      	ldr	r3, [r4, #16]
 800699c:	b163      	cbz	r3, 80069b8 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800699e:	f104 0010 	add.w	r0, r4, #16
 80069a2:	f000 ff87 	bl	80078b4 <xTaskRemoveFromEventList>
 80069a6:	b138      	cbz	r0, 80069b8 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 80069a8:	4b0a      	ldr	r3, [pc, #40]	; (80069d4 <xQueueGenericReset+0x7c>)
 80069aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069ae:	601a      	str	r2, [r3, #0]
 80069b0:	f3bf 8f4f 	dsb	sy
 80069b4:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 80069b8:	f7ff fd2e 	bl	8006418 <vPortExitCritical>
}
 80069bc:	2001      	movs	r0, #1
 80069be:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80069c0:	f104 0010 	add.w	r0, r4, #16
 80069c4:	f7ff fc5a 	bl	800627c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80069c8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80069cc:	f7ff fc56 	bl	800627c <vListInitialise>
 80069d0:	e7f2      	b.n	80069b8 <xQueueGenericReset+0x60>
 80069d2:	bf00      	nop
 80069d4:	e000ed04 	.word	0xe000ed04

080069d8 <xQueueGenericCreateStatic>:
	{
 80069d8:	b513      	push	{r0, r1, r4, lr}
 80069da:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80069dc:	b940      	cbnz	r0, 80069f0 <xQueueGenericCreateStatic+0x18>
 80069de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e2:	f383 8811 	msr	BASEPRI, r3
 80069e6:	f3bf 8f6f 	isb	sy
 80069ea:	f3bf 8f4f 	dsb	sy
 80069ee:	e7fe      	b.n	80069ee <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 80069f0:	b943      	cbnz	r3, 8006a04 <xQueueGenericCreateStatic+0x2c>
 80069f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f6:	f383 8811 	msr	BASEPRI, r3
 80069fa:	f3bf 8f6f 	isb	sy
 80069fe:	f3bf 8f4f 	dsb	sy
 8006a02:	e7fe      	b.n	8006a02 <xQueueGenericCreateStatic+0x2a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006a04:	b14a      	cbz	r2, 8006a1a <xQueueGenericCreateStatic+0x42>
 8006a06:	b9d9      	cbnz	r1, 8006a40 <xQueueGenericCreateStatic+0x68>
 8006a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a0c:	f383 8811 	msr	BASEPRI, r3
 8006a10:	f3bf 8f6f 	isb	sy
 8006a14:	f3bf 8f4f 	dsb	sy
 8006a18:	e7fe      	b.n	8006a18 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006a1a:	b189      	cbz	r1, 8006a40 <xQueueGenericCreateStatic+0x68>
 8006a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a20:	f383 8811 	msr	BASEPRI, r3
 8006a24:	f3bf 8f6f 	isb	sy
 8006a28:	f3bf 8f4f 	dsb	sy
 8006a2c:	e7fe      	b.n	8006a2c <xQueueGenericCreateStatic+0x54>
 8006a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a32:	f383 8811 	msr	BASEPRI, r3
 8006a36:	f3bf 8f6f 	isb	sy
 8006a3a:	f3bf 8f4f 	dsb	sy
 8006a3e:	e7fe      	b.n	8006a3e <xQueueGenericCreateStatic+0x66>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006a40:	2348      	movs	r3, #72	; 0x48
 8006a42:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006a44:	9b01      	ldr	r3, [sp, #4]
 8006a46:	2b48      	cmp	r3, #72	; 0x48
 8006a48:	d1f1      	bne.n	8006a2e <xQueueGenericCreateStatic+0x56>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006a4a:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006a4c:	2900      	cmp	r1, #0
 8006a4e:	bf08      	it	eq
 8006a50:	4622      	moveq	r2, r4
	pxNewQueue->uxLength = uxQueueLength;
 8006a52:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006a54:	6421      	str	r1, [r4, #64]	; 0x40
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006a56:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006a5a:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	4620      	mov	r0, r4
 8006a60:	f7ff ff7a 	bl	8006958 <xQueueGenericReset>
	}
 8006a64:	4620      	mov	r0, r4
 8006a66:	b002      	add	sp, #8
 8006a68:	bd10      	pop	{r4, pc}

08006a6a <xQueueGenericCreate>:
	{
 8006a6a:	b570      	push	{r4, r5, r6, lr}
 8006a6c:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006a6e:	4606      	mov	r6, r0
 8006a70:	b940      	cbnz	r0, 8006a84 <xQueueGenericCreate+0x1a>
 8006a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a76:	f383 8811 	msr	BASEPRI, r3
 8006a7a:	f3bf 8f6f 	isb	sy
 8006a7e:	f3bf 8f4f 	dsb	sy
 8006a82:	e7fe      	b.n	8006a82 <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a84:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006a86:	3048      	adds	r0, #72	; 0x48
 8006a88:	f7ff fe14 	bl	80066b4 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8006a8c:	4604      	mov	r4, r0
 8006a8e:	b150      	cbz	r0, 8006aa6 <xQueueGenericCreate+0x3c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006a90:	2300      	movs	r3, #0
 8006a92:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8006a96:	b945      	cbnz	r5, 8006aaa <xQueueGenericCreate+0x40>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006a98:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8006a9a:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006a9c:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006a9e:	2101      	movs	r1, #1
 8006aa0:	4620      	mov	r0, r4
 8006aa2:	f7ff ff59 	bl	8006958 <xQueueGenericReset>
	}
 8006aa6:	4620      	mov	r0, r4
 8006aa8:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006aaa:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006aae:	6003      	str	r3, [r0, #0]
 8006ab0:	e7f3      	b.n	8006a9a <xQueueGenericCreate+0x30>
	...

08006ab4 <xQueueGenericSend>:
{
 8006ab4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ab8:	4689      	mov	r9, r1
 8006aba:	9201      	str	r2, [sp, #4]
 8006abc:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8006abe:	4604      	mov	r4, r0
 8006ac0:	b940      	cbnz	r0, 8006ad4 <xQueueGenericSend+0x20>
 8006ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac6:	f383 8811 	msr	BASEPRI, r3
 8006aca:	f3bf 8f6f 	isb	sy
 8006ace:	f3bf 8f4f 	dsb	sy
 8006ad2:	e7fe      	b.n	8006ad2 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ad4:	2900      	cmp	r1, #0
 8006ad6:	f040 8088 	bne.w	8006bea <xQueueGenericSend+0x136>
 8006ada:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	f000 8084 	beq.w	8006bea <xQueueGenericSend+0x136>
 8006ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae6:	f383 8811 	msr	BASEPRI, r3
 8006aea:	f3bf 8f6f 	isb	sy
 8006aee:	f3bf 8f4f 	dsb	sy
 8006af2:	e7fe      	b.n	8006af2 <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006af4:	9e01      	ldr	r6, [sp, #4]
 8006af6:	2e00      	cmp	r6, #0
 8006af8:	f000 8082 	beq.w	8006c00 <xQueueGenericSend+0x14c>
 8006afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b00:	f383 8811 	msr	BASEPRI, r3
 8006b04:	f3bf 8f6f 	isb	sy
 8006b08:	f3bf 8f4f 	dsb	sy
 8006b0c:	e7fe      	b.n	8006b0c <xQueueGenericSend+0x58>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006b0e:	9d01      	ldr	r5, [sp, #4]
 8006b10:	b91d      	cbnz	r5, 8006b1a <xQueueGenericSend+0x66>
					taskEXIT_CRITICAL();
 8006b12:	f7ff fc81 	bl	8006418 <vPortExitCritical>
			return errQUEUE_FULL;
 8006b16:	2000      	movs	r0, #0
 8006b18:	e058      	b.n	8006bcc <xQueueGenericSend+0x118>
				else if( xEntryTimeSet == pdFALSE )
 8006b1a:	b916      	cbnz	r6, 8006b22 <xQueueGenericSend+0x6e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006b1c:	a802      	add	r0, sp, #8
 8006b1e:	f000 ff0b 	bl	8007938 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8006b22:	f7ff fc79 	bl	8006418 <vPortExitCritical>
		vTaskSuspendAll();
 8006b26:	f000 fd2d 	bl	8007584 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006b2a:	f7ff fc53 	bl	80063d4 <vPortEnterCritical>
 8006b2e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006b32:	2bff      	cmp	r3, #255	; 0xff
 8006b34:	bf08      	it	eq
 8006b36:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8006b3a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006b3e:	2bff      	cmp	r3, #255	; 0xff
 8006b40:	bf08      	it	eq
 8006b42:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8006b46:	f7ff fc67 	bl	8006418 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006b4a:	a901      	add	r1, sp, #4
 8006b4c:	a802      	add	r0, sp, #8
 8006b4e:	f000 feff 	bl	8007950 <xTaskCheckForTimeOut>
 8006b52:	2800      	cmp	r0, #0
 8006b54:	d143      	bne.n	8006bde <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006b56:	f7ff fc3d 	bl	80063d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006b5a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8006b5c:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8006b5e:	f7ff fc5b 	bl	8006418 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006b62:	42ae      	cmp	r6, r5
 8006b64:	d135      	bne.n	8006bd2 <xQueueGenericSend+0x11e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006b66:	9901      	ldr	r1, [sp, #4]
 8006b68:	f104 0010 	add.w	r0, r4, #16
 8006b6c:	f000 fe88 	bl	8007880 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006b70:	4620      	mov	r0, r4
 8006b72:	f7ff feb8 	bl	80068e6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006b76:	f000 fdad 	bl	80076d4 <xTaskResumeAll>
 8006b7a:	b938      	cbnz	r0, 8006b8c <xQueueGenericSend+0xd8>
					portYIELD_WITHIN_API();
 8006b7c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006b80:	f8ca 3000 	str.w	r3, [sl]
 8006b84:	f3bf 8f4f 	dsb	sy
 8006b88:	f3bf 8f6f 	isb	sy
 8006b8c:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8006b8e:	f7ff fc21 	bl	80063d4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b92:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006b94:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d301      	bcc.n	8006b9e <xQueueGenericSend+0xea>
 8006b9a:	2f02      	cmp	r7, #2
 8006b9c:	d1b7      	bne.n	8006b0e <xQueueGenericSend+0x5a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b9e:	463a      	mov	r2, r7
 8006ba0:	4649      	mov	r1, r9
 8006ba2:	4620      	mov	r0, r4
 8006ba4:	f7ff fe57 	bl	8006856 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ba8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006baa:	b11b      	cbz	r3, 8006bb4 <xQueueGenericSend+0x100>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006bac:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006bb0:	f000 fe80 	bl	80078b4 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8006bb4:	b138      	cbz	r0, 8006bc6 <xQueueGenericSend+0x112>
						queueYIELD_IF_USING_PREEMPTION();
 8006bb6:	4b19      	ldr	r3, [pc, #100]	; (8006c1c <xQueueGenericSend+0x168>)
 8006bb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bbc:	601a      	str	r2, [r3, #0]
 8006bbe:	f3bf 8f4f 	dsb	sy
 8006bc2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8006bc6:	f7ff fc27 	bl	8006418 <vPortExitCritical>
				return pdPASS;
 8006bca:	2001      	movs	r0, #1
}
 8006bcc:	b004      	add	sp, #16
 8006bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8006bd2:	4620      	mov	r0, r4
 8006bd4:	f7ff fe87 	bl	80068e6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006bd8:	f000 fd7c 	bl	80076d4 <xTaskResumeAll>
 8006bdc:	e7d6      	b.n	8006b8c <xQueueGenericSend+0xd8>
			prvUnlockQueue( pxQueue );
 8006bde:	4620      	mov	r0, r4
 8006be0:	f7ff fe81 	bl	80068e6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006be4:	f000 fd76 	bl	80076d4 <xTaskResumeAll>
 8006be8:	e795      	b.n	8006b16 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006bea:	2f02      	cmp	r7, #2
 8006bec:	d102      	bne.n	8006bf4 <xQueueGenericSend+0x140>
 8006bee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d10a      	bne.n	8006c0a <xQueueGenericSend+0x156>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006bf4:	f000 feee 	bl	80079d4 <xTaskGetSchedulerState>
 8006bf8:	2800      	cmp	r0, #0
 8006bfa:	f43f af7b 	beq.w	8006af4 <xQueueGenericSend+0x40>
 8006bfe:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8006c00:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8006c04:	f8df a014 	ldr.w	sl, [pc, #20]	; 8006c1c <xQueueGenericSend+0x168>
 8006c08:	e7c1      	b.n	8006b8e <xQueueGenericSend+0xda>
 8006c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0e:	f383 8811 	msr	BASEPRI, r3
 8006c12:	f3bf 8f6f 	isb	sy
 8006c16:	f3bf 8f4f 	dsb	sy
 8006c1a:	e7fe      	b.n	8006c1a <xQueueGenericSend+0x166>
 8006c1c:	e000ed04 	.word	0xe000ed04

08006c20 <xQueueGenericSendFromISR>:
{
 8006c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c24:	4688      	mov	r8, r1
 8006c26:	4691      	mov	r9, r2
 8006c28:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8006c2a:	4604      	mov	r4, r0
 8006c2c:	b940      	cbnz	r0, 8006c40 <xQueueGenericSendFromISR+0x20>
 8006c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c32:	f383 8811 	msr	BASEPRI, r3
 8006c36:	f3bf 8f6f 	isb	sy
 8006c3a:	f3bf 8f4f 	dsb	sy
 8006c3e:	e7fe      	b.n	8006c3e <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c40:	bb09      	cbnz	r1, 8006c86 <xQueueGenericSendFromISR+0x66>
 8006c42:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006c44:	b1fb      	cbz	r3, 8006c86 <xQueueGenericSendFromISR+0x66>
 8006c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c4a:	f383 8811 	msr	BASEPRI, r3
 8006c4e:	f3bf 8f6f 	isb	sy
 8006c52:	f3bf 8f4f 	dsb	sy
 8006c56:	e7fe      	b.n	8006c56 <xQueueGenericSendFromISR+0x36>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c58:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006c5c:	f000 fe2a 	bl	80078b4 <xTaskRemoveFromEventList>
 8006c60:	2800      	cmp	r0, #0
 8006c62:	d034      	beq.n	8006cce <xQueueGenericSendFromISR+0xae>
							if( pxHigherPriorityTaskWoken != NULL )
 8006c64:	f1b9 0f00 	cmp.w	r9, #0
 8006c68:	d031      	beq.n	8006cce <xQueueGenericSendFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006c6a:	2001      	movs	r0, #1
 8006c6c:	f8c9 0000 	str.w	r0, [r9]
	__asm volatile
 8006c70:	f386 8811 	msr	BASEPRI, r6
}
 8006c74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006c78:	3501      	adds	r5, #1
 8006c7a:	b26d      	sxtb	r5, r5
 8006c7c:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8006c80:	e025      	b.n	8006cce <xQueueGenericSendFromISR+0xae>
			xReturn = errQUEUE_FULL;
 8006c82:	2000      	movs	r0, #0
 8006c84:	e7f4      	b.n	8006c70 <xQueueGenericSendFromISR+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c86:	2f02      	cmp	r7, #2
 8006c88:	d102      	bne.n	8006c90 <xQueueGenericSendFromISR+0x70>
 8006c8a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d120      	bne.n	8006cd2 <xQueueGenericSendFromISR+0xb2>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c90:	f7ff fcbe 	bl	8006610 <vPortValidateInterruptPriority>
	__asm volatile
 8006c94:	f3ef 8611 	mrs	r6, BASEPRI
 8006c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c9c:	f383 8811 	msr	BASEPRI, r3
 8006ca0:	f3bf 8f6f 	isb	sy
 8006ca4:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006ca8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006caa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d301      	bcc.n	8006cb4 <xQueueGenericSendFromISR+0x94>
 8006cb0:	2f02      	cmp	r7, #2
 8006cb2:	d1e6      	bne.n	8006c82 <xQueueGenericSendFromISR+0x62>
			const int8_t cTxLock = pxQueue->cTxLock;
 8006cb4:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006cb8:	463a      	mov	r2, r7
			const int8_t cTxLock = pxQueue->cTxLock;
 8006cba:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006cbc:	4641      	mov	r1, r8
 8006cbe:	4620      	mov	r0, r4
 8006cc0:	f7ff fdc9 	bl	8006856 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8006cc4:	1c6b      	adds	r3, r5, #1
 8006cc6:	d1d7      	bne.n	8006c78 <xQueueGenericSendFromISR+0x58>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006cc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d1c4      	bne.n	8006c58 <xQueueGenericSendFromISR+0x38>
			xReturn = pdPASS;
 8006cce:	2001      	movs	r0, #1
 8006cd0:	e7ce      	b.n	8006c70 <xQueueGenericSendFromISR+0x50>
	__asm volatile
 8006cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd6:	f383 8811 	msr	BASEPRI, r3
 8006cda:	f3bf 8f6f 	isb	sy
 8006cde:	f3bf 8f4f 	dsb	sy
 8006ce2:	e7fe      	b.n	8006ce2 <xQueueGenericSendFromISR+0xc2>

08006ce4 <xQueueGiveFromISR>:
{
 8006ce4:	b570      	push	{r4, r5, r6, lr}
 8006ce6:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8006ce8:	4604      	mov	r4, r0
 8006cea:	b940      	cbnz	r0, 8006cfe <xQueueGiveFromISR+0x1a>
 8006cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf0:	f383 8811 	msr	BASEPRI, r3
 8006cf4:	f3bf 8f6f 	isb	sy
 8006cf8:	f3bf 8f4f 	dsb	sy
 8006cfc:	e7fe      	b.n	8006cfc <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 8006cfe:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006d00:	b143      	cbz	r3, 8006d14 <xQueueGiveFromISR+0x30>
 8006d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d06:	f383 8811 	msr	BASEPRI, r3
 8006d0a:	f3bf 8f6f 	isb	sy
 8006d0e:	f3bf 8f4f 	dsb	sy
 8006d12:	e7fe      	b.n	8006d12 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8006d14:	6803      	ldr	r3, [r0, #0]
 8006d16:	b90b      	cbnz	r3, 8006d1c <xQueueGiveFromISR+0x38>
 8006d18:	6843      	ldr	r3, [r0, #4]
 8006d1a:	bb73      	cbnz	r3, 8006d7a <xQueueGiveFromISR+0x96>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d1c:	f7ff fc78 	bl	8006610 <vPortValidateInterruptPriority>
	__asm volatile
 8006d20:	f3ef 8611 	mrs	r6, BASEPRI
 8006d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d28:	f383 8811 	msr	BASEPRI, r3
 8006d2c:	f3bf 8f6f 	isb	sy
 8006d30:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d34:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006d36:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d301      	bcc.n	8006d40 <xQueueGiveFromISR+0x5c>
			xReturn = errQUEUE_FULL;
 8006d3c:	2000      	movs	r0, #0
 8006d3e:	e014      	b.n	8006d6a <xQueueGiveFromISR+0x86>
			const int8_t cTxLock = pxQueue->cTxLock;
 8006d40:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006d44:	3201      	adds	r2, #1
			const int8_t cTxLock = pxQueue->cTxLock;
 8006d46:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006d48:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8006d4a:	1c5a      	adds	r2, r3, #1
 8006d4c:	d110      	bne.n	8006d70 <xQueueGiveFromISR+0x8c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d50:	b90b      	cbnz	r3, 8006d56 <xQueueGiveFromISR+0x72>
			xReturn = pdPASS;
 8006d52:	2001      	movs	r0, #1
 8006d54:	e009      	b.n	8006d6a <xQueueGiveFromISR+0x86>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d56:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006d5a:	f000 fdab 	bl	80078b4 <xTaskRemoveFromEventList>
 8006d5e:	2800      	cmp	r0, #0
 8006d60:	d0f7      	beq.n	8006d52 <xQueueGiveFromISR+0x6e>
							if( pxHigherPriorityTaskWoken != NULL )
 8006d62:	2d00      	cmp	r5, #0
 8006d64:	d0f5      	beq.n	8006d52 <xQueueGiveFromISR+0x6e>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006d66:	2001      	movs	r0, #1
 8006d68:	6028      	str	r0, [r5, #0]
	__asm volatile
 8006d6a:	f386 8811 	msr	BASEPRI, r6
}
 8006d6e:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006d70:	3301      	adds	r3, #1
 8006d72:	b25b      	sxtb	r3, r3
 8006d74:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d78:	e7eb      	b.n	8006d52 <xQueueGiveFromISR+0x6e>
	__asm volatile
 8006d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7e:	f383 8811 	msr	BASEPRI, r3
 8006d82:	f3bf 8f6f 	isb	sy
 8006d86:	f3bf 8f4f 	dsb	sy
 8006d8a:	e7fe      	b.n	8006d8a <xQueueGiveFromISR+0xa6>

08006d8c <xQueueReceive>:
{
 8006d8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006d90:	b085      	sub	sp, #20
 8006d92:	4688      	mov	r8, r1
 8006d94:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8006d96:	4604      	mov	r4, r0
 8006d98:	b940      	cbnz	r0, 8006dac <xQueueReceive+0x20>
 8006d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d9e:	f383 8811 	msr	BASEPRI, r3
 8006da2:	f3bf 8f6f 	isb	sy
 8006da6:	f3bf 8f4f 	dsb	sy
 8006daa:	e7fe      	b.n	8006daa <xQueueReceive+0x1e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006dac:	2900      	cmp	r1, #0
 8006dae:	f040 8086 	bne.w	8006ebe <xQueueReceive+0x132>
 8006db2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	f000 8082 	beq.w	8006ebe <xQueueReceive+0x132>
 8006dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dbe:	f383 8811 	msr	BASEPRI, r3
 8006dc2:	f3bf 8f6f 	isb	sy
 8006dc6:	f3bf 8f4f 	dsb	sy
 8006dca:	e7fe      	b.n	8006dca <xQueueReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006dcc:	9e01      	ldr	r6, [sp, #4]
 8006dce:	2e00      	cmp	r6, #0
 8006dd0:	d07a      	beq.n	8006ec8 <xQueueReceive+0x13c>
 8006dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd6:	f383 8811 	msr	BASEPRI, r3
 8006dda:	f3bf 8f6f 	isb	sy
 8006dde:	f3bf 8f4f 	dsb	sy
 8006de2:	e7fe      	b.n	8006de2 <xQueueReceive+0x56>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006de4:	9d01      	ldr	r5, [sp, #4]
 8006de6:	b91d      	cbnz	r5, 8006df0 <xQueueReceive+0x64>
					taskEXIT_CRITICAL();
 8006de8:	f7ff fb16 	bl	8006418 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8006dec:	2000      	movs	r0, #0
 8006dee:	e052      	b.n	8006e96 <xQueueReceive+0x10a>
				else if( xEntryTimeSet == pdFALSE )
 8006df0:	b916      	cbnz	r6, 8006df8 <xQueueReceive+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006df2:	a802      	add	r0, sp, #8
 8006df4:	f000 fda0 	bl	8007938 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8006df8:	f7ff fb0e 	bl	8006418 <vPortExitCritical>
		vTaskSuspendAll();
 8006dfc:	f000 fbc2 	bl	8007584 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e00:	f7ff fae8 	bl	80063d4 <vPortEnterCritical>
 8006e04:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006e08:	2bff      	cmp	r3, #255	; 0xff
 8006e0a:	bf08      	it	eq
 8006e0c:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8006e10:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006e14:	2bff      	cmp	r3, #255	; 0xff
 8006e16:	bf08      	it	eq
 8006e18:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8006e1c:	f7ff fafc 	bl	8006418 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e20:	a901      	add	r1, sp, #4
 8006e22:	a802      	add	r0, sp, #8
 8006e24:	f000 fd94 	bl	8007950 <xTaskCheckForTimeOut>
 8006e28:	2800      	cmp	r0, #0
 8006e2a:	d13d      	bne.n	8006ea8 <xQueueReceive+0x11c>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e2c:	4620      	mov	r0, r4
 8006e2e:	f7ff fd07 	bl	8006840 <prvIsQueueEmpty>
 8006e32:	b398      	cbz	r0, 8006e9c <xQueueReceive+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006e34:	9901      	ldr	r1, [sp, #4]
 8006e36:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006e3a:	f000 fd21 	bl	8007880 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006e3e:	4620      	mov	r0, r4
 8006e40:	f7ff fd51 	bl	80068e6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006e44:	f000 fc46 	bl	80076d4 <xTaskResumeAll>
 8006e48:	b938      	cbnz	r0, 8006e5a <xQueueReceive+0xce>
					portYIELD_WITHIN_API();
 8006e4a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006e4e:	f8c9 3000 	str.w	r3, [r9]
 8006e52:	f3bf 8f4f 	dsb	sy
 8006e56:	f3bf 8f6f 	isb	sy
 8006e5a:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8006e5c:	f7ff faba 	bl	80063d4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e60:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e62:	2d00      	cmp	r5, #0
 8006e64:	d0be      	beq.n	8006de4 <xQueueReceive+0x58>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006e66:	4641      	mov	r1, r8
 8006e68:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006e6a:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006e6c:	f7ff fd26 	bl	80068bc <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006e70:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e72:	6923      	ldr	r3, [r4, #16]
 8006e74:	b163      	cbz	r3, 8006e90 <xQueueReceive+0x104>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e76:	f104 0010 	add.w	r0, r4, #16
 8006e7a:	f000 fd1b 	bl	80078b4 <xTaskRemoveFromEventList>
 8006e7e:	b138      	cbz	r0, 8006e90 <xQueueReceive+0x104>
						queueYIELD_IF_USING_PREEMPTION();
 8006e80:	4b13      	ldr	r3, [pc, #76]	; (8006ed0 <xQueueReceive+0x144>)
 8006e82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e86:	601a      	str	r2, [r3, #0]
 8006e88:	f3bf 8f4f 	dsb	sy
 8006e8c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8006e90:	f7ff fac2 	bl	8006418 <vPortExitCritical>
				return pdPASS;
 8006e94:	2001      	movs	r0, #1
}
 8006e96:	b005      	add	sp, #20
 8006e98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 8006e9c:	4620      	mov	r0, r4
 8006e9e:	f7ff fd22 	bl	80068e6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ea2:	f000 fc17 	bl	80076d4 <xTaskResumeAll>
 8006ea6:	e7d8      	b.n	8006e5a <xQueueReceive+0xce>
			prvUnlockQueue( pxQueue );
 8006ea8:	4620      	mov	r0, r4
 8006eaa:	f7ff fd1c 	bl	80068e6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006eae:	f000 fc11 	bl	80076d4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006eb2:	4620      	mov	r0, r4
 8006eb4:	f7ff fcc4 	bl	8006840 <prvIsQueueEmpty>
 8006eb8:	2800      	cmp	r0, #0
 8006eba:	d0ce      	beq.n	8006e5a <xQueueReceive+0xce>
 8006ebc:	e796      	b.n	8006dec <xQueueReceive+0x60>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ebe:	f000 fd89 	bl	80079d4 <xTaskGetSchedulerState>
 8006ec2:	2800      	cmp	r0, #0
 8006ec4:	d082      	beq.n	8006dcc <xQueueReceive+0x40>
 8006ec6:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8006ec8:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8006eca:	f8df 9004 	ldr.w	r9, [pc, #4]	; 8006ed0 <xQueueReceive+0x144>
 8006ece:	e7c5      	b.n	8006e5c <xQueueReceive+0xd0>
 8006ed0:	e000ed04 	.word	0xe000ed04

08006ed4 <xQueueSemaphoreTake>:
{
 8006ed4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	configASSERT( ( pxQueue ) );
 8006ed8:	4604      	mov	r4, r0
{
 8006eda:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8006edc:	b940      	cbnz	r0, 8006ef0 <xQueueSemaphoreTake+0x1c>
 8006ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee2:	f383 8811 	msr	BASEPRI, r3
 8006ee6:	f3bf 8f6f 	isb	sy
 8006eea:	f3bf 8f4f 	dsb	sy
 8006eee:	e7fe      	b.n	8006eee <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 8006ef0:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8006ef2:	b145      	cbz	r5, 8006f06 <xQueueSemaphoreTake+0x32>
 8006ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef8:	f383 8811 	msr	BASEPRI, r3
 8006efc:	f3bf 8f6f 	isb	sy
 8006f00:	f3bf 8f4f 	dsb	sy
 8006f04:	e7fe      	b.n	8006f04 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f06:	f000 fd65 	bl	80079d4 <xTaskGetSchedulerState>
 8006f0a:	b918      	cbnz	r0, 8006f14 <xQueueSemaphoreTake+0x40>
 8006f0c:	9d01      	ldr	r5, [sp, #4]
 8006f0e:	2d00      	cmp	r5, #0
 8006f10:	f040 8095 	bne.w	800703e <xQueueSemaphoreTake+0x16a>
					portYIELD_WITHIN_API();
 8006f14:	f8df 8138 	ldr.w	r8, [pc, #312]	; 8007050 <xQueueSemaphoreTake+0x17c>
 8006f18:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8006f1a:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 8006f1c:	f7ff fa5a 	bl	80063d4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006f20:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006f22:	b1e3      	cbz	r3, 8006f5e <xQueueSemaphoreTake+0x8a>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006f24:	3b01      	subs	r3, #1
 8006f26:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f28:	6823      	ldr	r3, [r4, #0]
 8006f2a:	b913      	cbnz	r3, 8006f32 <xQueueSemaphoreTake+0x5e>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8006f2c:	f000 fe60 	bl	8007bf0 <pvTaskIncrementMutexHeldCount>
 8006f30:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f32:	6923      	ldr	r3, [r4, #16]
 8006f34:	b163      	cbz	r3, 8006f50 <xQueueSemaphoreTake+0x7c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f36:	f104 0010 	add.w	r0, r4, #16
 8006f3a:	f000 fcbb 	bl	80078b4 <xTaskRemoveFromEventList>
 8006f3e:	b138      	cbz	r0, 8006f50 <xQueueSemaphoreTake+0x7c>
						queueYIELD_IF_USING_PREEMPTION();
 8006f40:	4b43      	ldr	r3, [pc, #268]	; (8007050 <xQueueSemaphoreTake+0x17c>)
 8006f42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f46:	601a      	str	r2, [r3, #0]
 8006f48:	f3bf 8f4f 	dsb	sy
 8006f4c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8006f50:	f7ff fa62 	bl	8006418 <vPortExitCritical>
				return pdPASS;
 8006f54:	2501      	movs	r5, #1
}
 8006f56:	4628      	mov	r0, r5
 8006f58:	b004      	add	sp, #16
 8006f5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f5e:	9b01      	ldr	r3, [sp, #4]
 8006f60:	b963      	cbnz	r3, 8006f7c <xQueueSemaphoreTake+0xa8>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006f62:	b145      	cbz	r5, 8006f76 <xQueueSemaphoreTake+0xa2>
 8006f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f68:	f383 8811 	msr	BASEPRI, r3
 8006f6c:	f3bf 8f6f 	isb	sy
 8006f70:	f3bf 8f4f 	dsb	sy
 8006f74:	e7fe      	b.n	8006f74 <xQueueSemaphoreTake+0xa0>
					taskEXIT_CRITICAL();
 8006f76:	f7ff fa4f 	bl	8006418 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8006f7a:	e7ec      	b.n	8006f56 <xQueueSemaphoreTake+0x82>
				else if( xEntryTimeSet == pdFALSE )
 8006f7c:	b916      	cbnz	r6, 8006f84 <xQueueSemaphoreTake+0xb0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006f7e:	a802      	add	r0, sp, #8
 8006f80:	f000 fcda 	bl	8007938 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8006f84:	f7ff fa48 	bl	8006418 <vPortExitCritical>
		vTaskSuspendAll();
 8006f88:	f000 fafc 	bl	8007584 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f8c:	f7ff fa22 	bl	80063d4 <vPortEnterCritical>
 8006f90:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006f94:	2bff      	cmp	r3, #255	; 0xff
 8006f96:	bf08      	it	eq
 8006f98:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8006f9c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006fa0:	2bff      	cmp	r3, #255	; 0xff
 8006fa2:	bf08      	it	eq
 8006fa4:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8006fa8:	f7ff fa36 	bl	8006418 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006fac:	a901      	add	r1, sp, #4
 8006fae:	a802      	add	r0, sp, #8
 8006fb0:	f000 fcce 	bl	8007950 <xTaskCheckForTimeOut>
 8006fb4:	bb40      	cbnz	r0, 8007008 <xQueueSemaphoreTake+0x134>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006fb6:	4620      	mov	r0, r4
 8006fb8:	f7ff fc42 	bl	8006840 <prvIsQueueEmpty>
 8006fbc:	b1f0      	cbz	r0, 8006ffc <xQueueSemaphoreTake+0x128>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006fbe:	6823      	ldr	r3, [r4, #0]
 8006fc0:	b93b      	cbnz	r3, 8006fd2 <xQueueSemaphoreTake+0xfe>
						taskENTER_CRITICAL();
 8006fc2:	f7ff fa07 	bl	80063d4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8006fc6:	6860      	ldr	r0, [r4, #4]
 8006fc8:	f000 fd14 	bl	80079f4 <xTaskPriorityInherit>
 8006fcc:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8006fce:	f7ff fa23 	bl	8006418 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006fd2:	9901      	ldr	r1, [sp, #4]
 8006fd4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006fd8:	f000 fc52 	bl	8007880 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006fdc:	4620      	mov	r0, r4
 8006fde:	f7ff fc82 	bl	80068e6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006fe2:	f000 fb77 	bl	80076d4 <xTaskResumeAll>
 8006fe6:	b938      	cbnz	r0, 8006ff8 <xQueueSemaphoreTake+0x124>
					portYIELD_WITHIN_API();
 8006fe8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006fec:	f8c8 3000 	str.w	r3, [r8]
 8006ff0:	f3bf 8f4f 	dsb	sy
 8006ff4:	f3bf 8f6f 	isb	sy
 8006ff8:	2601      	movs	r6, #1
 8006ffa:	e78f      	b.n	8006f1c <xQueueSemaphoreTake+0x48>
				prvUnlockQueue( pxQueue );
 8006ffc:	4620      	mov	r0, r4
 8006ffe:	f7ff fc72 	bl	80068e6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007002:	f000 fb67 	bl	80076d4 <xTaskResumeAll>
 8007006:	e7f7      	b.n	8006ff8 <xQueueSemaphoreTake+0x124>
			prvUnlockQueue( pxQueue );
 8007008:	4620      	mov	r0, r4
 800700a:	f7ff fc6c 	bl	80068e6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800700e:	f000 fb61 	bl	80076d4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007012:	4620      	mov	r0, r4
 8007014:	f7ff fc14 	bl	8006840 <prvIsQueueEmpty>
 8007018:	2800      	cmp	r0, #0
 800701a:	d0ed      	beq.n	8006ff8 <xQueueSemaphoreTake+0x124>
					if( xInheritanceOccurred != pdFALSE )
 800701c:	2d00      	cmp	r5, #0
 800701e:	d09a      	beq.n	8006f56 <xQueueSemaphoreTake+0x82>
						taskENTER_CRITICAL();
 8007020:	f7ff f9d8 	bl	80063d4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8007024:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007026:	b119      	cbz	r1, 8007030 <xQueueSemaphoreTake+0x15c>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007028:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800702a:	6819      	ldr	r1, [r3, #0]
 800702c:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8007030:	6860      	ldr	r0, [r4, #4]
 8007032:	f000 fd83 	bl	8007b3c <vTaskPriorityDisinheritAfterTimeout>
				return errQUEUE_EMPTY;
 8007036:	2500      	movs	r5, #0
						taskEXIT_CRITICAL();
 8007038:	f7ff f9ee 	bl	8006418 <vPortExitCritical>
 800703c:	e78b      	b.n	8006f56 <xQueueSemaphoreTake+0x82>
 800703e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007042:	f383 8811 	msr	BASEPRI, r3
 8007046:	f3bf 8f6f 	isb	sy
 800704a:	f3bf 8f4f 	dsb	sy
 800704e:	e7fe      	b.n	800704e <xQueueSemaphoreTake+0x17a>
 8007050:	e000ed04 	.word	0xe000ed04

08007054 <xQueueReceiveFromISR>:
{
 8007054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007058:	4689      	mov	r9, r1
 800705a:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800705c:	4605      	mov	r5, r0
 800705e:	b940      	cbnz	r0, 8007072 <xQueueReceiveFromISR+0x1e>
 8007060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007064:	f383 8811 	msr	BASEPRI, r3
 8007068:	f3bf 8f6f 	isb	sy
 800706c:	f3bf 8f4f 	dsb	sy
 8007070:	e7fe      	b.n	8007070 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007072:	bb71      	cbnz	r1, 80070d2 <xQueueReceiveFromISR+0x7e>
 8007074:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007076:	b363      	cbz	r3, 80070d2 <xQueueReceiveFromISR+0x7e>
 8007078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800707c:	f383 8811 	msr	BASEPRI, r3
 8007080:	f3bf 8f6f 	isb	sy
 8007084:	f3bf 8f4f 	dsb	sy
 8007088:	e7fe      	b.n	8007088 <xQueueReceiveFromISR+0x34>
			const int8_t cRxLock = pxQueue->cRxLock;
 800708a:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800708e:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 8007090:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007092:	4628      	mov	r0, r5
 8007094:	f7ff fc12 	bl	80068bc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007098:	3c01      	subs	r4, #1
			if( cRxLock == queueUNLOCKED )
 800709a:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800709c:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800709e:	d113      	bne.n	80070c8 <xQueueReceiveFromISR+0x74>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070a0:	692b      	ldr	r3, [r5, #16]
 80070a2:	b90b      	cbnz	r3, 80070a8 <xQueueReceiveFromISR+0x54>
			xReturn = pdPASS;
 80070a4:	2001      	movs	r0, #1
 80070a6:	e00b      	b.n	80070c0 <xQueueReceiveFromISR+0x6c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070a8:	f105 0010 	add.w	r0, r5, #16
 80070ac:	f000 fc02 	bl	80078b4 <xTaskRemoveFromEventList>
 80070b0:	2800      	cmp	r0, #0
 80070b2:	d0f7      	beq.n	80070a4 <xQueueReceiveFromISR+0x50>
						if( pxHigherPriorityTaskWoken != NULL )
 80070b4:	f1b8 0f00 	cmp.w	r8, #0
 80070b8:	d0f4      	beq.n	80070a4 <xQueueReceiveFromISR+0x50>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80070ba:	2001      	movs	r0, #1
 80070bc:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 80070c0:	f387 8811 	msr	BASEPRI, r7
}
 80070c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80070c8:	3601      	adds	r6, #1
 80070ca:	b276      	sxtb	r6, r6
 80070cc:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 80070d0:	e7e8      	b.n	80070a4 <xQueueReceiveFromISR+0x50>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80070d2:	f7ff fa9d 	bl	8006610 <vPortValidateInterruptPriority>
	__asm volatile
 80070d6:	f3ef 8711 	mrs	r7, BASEPRI
 80070da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070de:	f383 8811 	msr	BASEPRI, r3
 80070e2:	f3bf 8f6f 	isb	sy
 80070e6:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070ea:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80070ec:	2c00      	cmp	r4, #0
 80070ee:	d1cc      	bne.n	800708a <xQueueReceiveFromISR+0x36>
			xReturn = pdFAIL;
 80070f0:	4620      	mov	r0, r4
 80070f2:	e7e5      	b.n	80070c0 <xQueueReceiveFromISR+0x6c>

080070f4 <uxQueueMessagesWaiting>:
{
 80070f4:	b510      	push	{r4, lr}
	configASSERT( xQueue );
 80070f6:	4604      	mov	r4, r0
 80070f8:	b940      	cbnz	r0, 800710c <uxQueueMessagesWaiting+0x18>
	__asm volatile
 80070fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070fe:	f383 8811 	msr	BASEPRI, r3
 8007102:	f3bf 8f6f 	isb	sy
 8007106:	f3bf 8f4f 	dsb	sy
 800710a:	e7fe      	b.n	800710a <uxQueueMessagesWaiting+0x16>
	taskENTER_CRITICAL();
 800710c:	f7ff f962 	bl	80063d4 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8007110:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8007112:	f7ff f981 	bl	8006418 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007116:	4620      	mov	r0, r4
 8007118:	bd10      	pop	{r4, pc}

0800711a <uxQueueMessagesWaitingFromISR>:
	configASSERT( xQueue );
 800711a:	b940      	cbnz	r0, 800712e <uxQueueMessagesWaitingFromISR+0x14>
 800711c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007120:	f383 8811 	msr	BASEPRI, r3
 8007124:	f3bf 8f6f 	isb	sy
 8007128:	f3bf 8f4f 	dsb	sy
 800712c:	e7fe      	b.n	800712c <uxQueueMessagesWaitingFromISR+0x12>
	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800712e:	6b80      	ldr	r0, [r0, #56]	; 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007130:	4770      	bx	lr
	...

08007134 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007134:	b510      	push	{r4, lr}

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007136:	4a08      	ldr	r2, [pc, #32]	; (8007158 <vQueueUnregisterQueue+0x24>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007138:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800713a:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800713e:	684c      	ldr	r4, [r1, #4]
 8007140:	4284      	cmp	r4, r0
 8007142:	d104      	bne.n	800714e <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007144:	2000      	movs	r0, #0
 8007146:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800714a:	6048      	str	r0, [r1, #4]
				break;
 800714c:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800714e:	3301      	adds	r3, #1
 8007150:	2b08      	cmp	r3, #8
 8007152:	d1f2      	bne.n	800713a <vQueueUnregisterQueue+0x6>
 8007154:	bd10      	pop	{r4, pc}
 8007156:	bf00      	nop
 8007158:	200042ec 	.word	0x200042ec

0800715c <vQueueDelete>:
{
 800715c:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 800715e:	4604      	mov	r4, r0
 8007160:	b940      	cbnz	r0, 8007174 <vQueueDelete+0x18>
 8007162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007166:	f383 8811 	msr	BASEPRI, r3
 800716a:	f3bf 8f6f 	isb	sy
 800716e:	f3bf 8f4f 	dsb	sy
 8007172:	e7fe      	b.n	8007172 <vQueueDelete+0x16>
		vQueueUnregisterQueue( pxQueue );
 8007174:	f7ff ffde 	bl	8007134 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007178:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800717c:	b923      	cbnz	r3, 8007188 <vQueueDelete+0x2c>
			vPortFree( pxQueue );
 800717e:	4620      	mov	r0, r4
}
 8007180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 8007184:	f7ff bb24 	b.w	80067d0 <vPortFree>
 8007188:	bd10      	pop	{r4, pc}
	...

0800718c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800718c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007190:	4606      	mov	r6, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007192:	f7ff f91f 	bl	80063d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007196:	4b2d      	ldr	r3, [pc, #180]	; (800724c <prvAddNewTaskToReadyList+0xc0>)
		if( pxCurrentTCB == NULL )
 8007198:	4c2d      	ldr	r4, [pc, #180]	; (8007250 <prvAddNewTaskToReadyList+0xc4>)
		uxCurrentNumberOfTasks++;
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	4f2d      	ldr	r7, [pc, #180]	; (8007254 <prvAddNewTaskToReadyList+0xc8>)
 800719e:	3201      	adds	r2, #1
 80071a0:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80071a2:	6825      	ldr	r5, [r4, #0]
 80071a4:	2d00      	cmp	r5, #0
 80071a6:	d145      	bne.n	8007234 <prvAddNewTaskToReadyList+0xa8>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80071a8:	6026      	str	r6, [r4, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d11c      	bne.n	80071ea <prvAddNewTaskToReadyList+0x5e>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80071b0:	1978      	adds	r0, r7, r5
 80071b2:	3514      	adds	r5, #20
 80071b4:	f7ff f862 	bl	800627c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80071b8:	2d8c      	cmp	r5, #140	; 0x8c
 80071ba:	d1f9      	bne.n	80071b0 <prvAddNewTaskToReadyList+0x24>
	}

	vListInitialise( &xDelayedTaskList1 );
 80071bc:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8007280 <prvAddNewTaskToReadyList+0xf4>
	vListInitialise( &xDelayedTaskList2 );
 80071c0:	4d25      	ldr	r5, [pc, #148]	; (8007258 <prvAddNewTaskToReadyList+0xcc>)
	vListInitialise( &xDelayedTaskList1 );
 80071c2:	4640      	mov	r0, r8
 80071c4:	f7ff f85a 	bl	800627c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80071c8:	4628      	mov	r0, r5
 80071ca:	f7ff f857 	bl	800627c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80071ce:	4823      	ldr	r0, [pc, #140]	; (800725c <prvAddNewTaskToReadyList+0xd0>)
 80071d0:	f7ff f854 	bl	800627c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80071d4:	4822      	ldr	r0, [pc, #136]	; (8007260 <prvAddNewTaskToReadyList+0xd4>)
 80071d6:	f7ff f851 	bl	800627c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80071da:	4822      	ldr	r0, [pc, #136]	; (8007264 <prvAddNewTaskToReadyList+0xd8>)
 80071dc:	f7ff f84e 	bl	800627c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80071e0:	4b21      	ldr	r3, [pc, #132]	; (8007268 <prvAddNewTaskToReadyList+0xdc>)
 80071e2:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80071e6:	4b21      	ldr	r3, [pc, #132]	; (800726c <prvAddNewTaskToReadyList+0xe0>)
 80071e8:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 80071ea:	4a21      	ldr	r2, [pc, #132]	; (8007270 <prvAddNewTaskToReadyList+0xe4>)
		prvAddTaskToReadyList( pxNewTCB );
 80071ec:	4921      	ldr	r1, [pc, #132]	; (8007274 <prvAddNewTaskToReadyList+0xe8>)
		uxTaskNumber++;
 80071ee:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80071f0:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 80071f2:	3301      	adds	r3, #1
 80071f4:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80071f6:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80071f8:	2301      	movs	r3, #1
 80071fa:	4093      	lsls	r3, r2
 80071fc:	4303      	orrs	r3, r0
 80071fe:	2014      	movs	r0, #20
 8007200:	600b      	str	r3, [r1, #0]
 8007202:	fb00 7002 	mla	r0, r0, r2, r7
 8007206:	1d31      	adds	r1, r6, #4
 8007208:	f7ff f846 	bl	8006298 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800720c:	f7ff f904 	bl	8006418 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8007210:	4b19      	ldr	r3, [pc, #100]	; (8007278 <prvAddNewTaskToReadyList+0xec>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	b163      	cbz	r3, 8007230 <prvAddNewTaskToReadyList+0xa4>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007216:	6823      	ldr	r3, [r4, #0]
 8007218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800721a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800721c:	429a      	cmp	r2, r3
 800721e:	d207      	bcs.n	8007230 <prvAddNewTaskToReadyList+0xa4>
			taskYIELD_IF_USING_PREEMPTION();
 8007220:	4b16      	ldr	r3, [pc, #88]	; (800727c <prvAddNewTaskToReadyList+0xf0>)
 8007222:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007226:	601a      	str	r2, [r3, #0]
 8007228:	f3bf 8f4f 	dsb	sy
 800722c:	f3bf 8f6f 	isb	sy
 8007230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8007234:	4b10      	ldr	r3, [pc, #64]	; (8007278 <prvAddNewTaskToReadyList+0xec>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d1d6      	bne.n	80071ea <prvAddNewTaskToReadyList+0x5e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800723c:	6823      	ldr	r3, [r4, #0]
 800723e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007240:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8007242:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8007244:	bf98      	it	ls
 8007246:	6026      	strls	r6, [r4, #0]
 8007248:	e7cf      	b.n	80071ea <prvAddNewTaskToReadyList+0x5e>
 800724a:	bf00      	nop
 800724c:	20003de4 	.word	0x20003de4
 8007250:	20003d4c 	.word	0x20003d4c
 8007254:	20003d58 	.word	0x20003d58
 8007258:	20003e10 	.word	0x20003e10
 800725c:	20003e2c 	.word	0x20003e2c
 8007260:	20003e58 	.word	0x20003e58
 8007264:	20003e44 	.word	0x20003e44
 8007268:	20003d50 	.word	0x20003d50
 800726c:	20003d54 	.word	0x20003d54
 8007270:	20003df4 	.word	0x20003df4
 8007274:	20003df8 	.word	0x20003df8
 8007278:	20003e40 	.word	0x20003e40
 800727c:	e000ed04 	.word	0xe000ed04
 8007280:	20003dfc 	.word	0x20003dfc

08007284 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007284:	4a06      	ldr	r2, [pc, #24]	; (80072a0 <prvResetNextTaskUnblockTime+0x1c>)
 8007286:	6813      	ldr	r3, [r2, #0]
 8007288:	6819      	ldr	r1, [r3, #0]
 800728a:	4b06      	ldr	r3, [pc, #24]	; (80072a4 <prvResetNextTaskUnblockTime+0x20>)
 800728c:	b919      	cbnz	r1, 8007296 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800728e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007292:	601a      	str	r2, [r3, #0]
 8007294:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007296:	6812      	ldr	r2, [r2, #0]
 8007298:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800729a:	68d2      	ldr	r2, [r2, #12]
 800729c:	6852      	ldr	r2, [r2, #4]
 800729e:	e7f8      	b.n	8007292 <prvResetNextTaskUnblockTime+0xe>
 80072a0:	20003d50 	.word	0x20003d50
 80072a4:	20003e24 	.word	0x20003e24

080072a8 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80072a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072ac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80072ae:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80072b2:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80072b4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80072b8:	3a01      	subs	r2, #1
 80072ba:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80072be:	469a      	mov	sl, r3
 80072c0:	4681      	mov	r9, r0
 80072c2:	1e4b      	subs	r3, r1, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80072c4:	f026 0607 	bic.w	r6, r6, #7
 80072c8:	f104 0234 	add.w	r2, r4, #52	; 0x34
 80072cc:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80072ce:	7858      	ldrb	r0, [r3, #1]
 80072d0:	f802 0b01 	strb.w	r0, [r2], #1
		if( pcName[ x ] == 0x00 )
 80072d4:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80072d8:	b108      	cbz	r0, 80072de <prvInitialiseNewTask.isra.2+0x36>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80072da:	428b      	cmp	r3, r1
 80072dc:	d1f7      	bne.n	80072ce <prvInitialiseNewTask.isra.2+0x26>
 80072de:	9d08      	ldr	r5, [sp, #32]
 80072e0:	2d06      	cmp	r5, #6
 80072e2:	bf28      	it	cs
 80072e4:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80072e6:	2700      	movs	r7, #0
	pxNewTCB->uxPriority = uxPriority;
 80072e8:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80072ea:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80072ec:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80072ee:	f884 7043 	strb.w	r7, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 80072f2:	64a7      	str	r7, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80072f4:	f7fe ffcd 	bl	8006292 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072f8:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80072fc:	f104 0018 	add.w	r0, r4, #24
 8007300:	f7fe ffc7 	bl	8006292 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8007304:	64e7      	str	r7, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007306:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007308:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800730a:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800730c:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007310:	4652      	mov	r2, sl
 8007312:	4649      	mov	r1, r9
 8007314:	4630      	mov	r0, r6
 8007316:	f7ff f831 	bl	800637c <pxPortInitialiseStack>
 800731a:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800731c:	f1b8 0f00 	cmp.w	r8, #0
 8007320:	d001      	beq.n	8007326 <prvInitialiseNewTask.isra.2+0x7e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007322:	f8c8 4000 	str.w	r4, [r8]
 8007326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800732a <prvDeleteTCB>:
	{
 800732a:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800732c:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
	{
 8007330:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007332:	b93b      	cbnz	r3, 8007344 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8007334:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8007336:	f7ff fa4b 	bl	80067d0 <vPortFree>
				vPortFree( pxTCB );
 800733a:	4620      	mov	r0, r4
	}
 800733c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8007340:	f7ff ba46 	b.w	80067d0 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007344:	2b01      	cmp	r3, #1
 8007346:	d0f9      	beq.n	800733c <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007348:	2b02      	cmp	r3, #2
 800734a:	d008      	beq.n	800735e <prvDeleteTCB+0x34>
 800734c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007350:	f383 8811 	msr	BASEPRI, r3
 8007354:	f3bf 8f6f 	isb	sy
 8007358:	f3bf 8f4f 	dsb	sy
 800735c:	e7fe      	b.n	800735c <prvDeleteTCB+0x32>
 800735e:	bd10      	pop	{r4, pc}

08007360 <prvIdleTask>:
{
 8007360:	b580      	push	{r7, lr}
				taskYIELD();
 8007362:	f8df 805c 	ldr.w	r8, [pc, #92]	; 80073c0 <prvIdleTask+0x60>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007366:	4f12      	ldr	r7, [pc, #72]	; (80073b0 <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007368:	4c12      	ldr	r4, [pc, #72]	; (80073b4 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 800736a:	4d13      	ldr	r5, [pc, #76]	; (80073b8 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800736c:	6823      	ldr	r3, [r4, #0]
 800736e:	b963      	cbnz	r3, 800738a <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007370:	4b12      	ldr	r3, [pc, #72]	; (80073bc <prvIdleTask+0x5c>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	2b01      	cmp	r3, #1
 8007376:	d9f8      	bls.n	800736a <prvIdleTask+0xa>
				taskYIELD();
 8007378:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800737c:	f8c8 3000 	str.w	r3, [r8]
 8007380:	f3bf 8f4f 	dsb	sy
 8007384:	f3bf 8f6f 	isb	sy
 8007388:	e7ee      	b.n	8007368 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 800738a:	f7ff f823 	bl	80063d4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007392:	1d30      	adds	r0, r6, #4
 8007394:	f7fe ffa3 	bl	80062de <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007398:	682b      	ldr	r3, [r5, #0]
 800739a:	3b01      	subs	r3, #1
 800739c:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800739e:	6823      	ldr	r3, [r4, #0]
 80073a0:	3b01      	subs	r3, #1
 80073a2:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80073a4:	f7ff f838 	bl	8006418 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80073a8:	4630      	mov	r0, r6
 80073aa:	f7ff ffbe 	bl	800732a <prvDeleteTCB>
 80073ae:	e7dd      	b.n	800736c <prvIdleTask+0xc>
 80073b0:	20003e58 	.word	0x20003e58
 80073b4:	20003de8 	.word	0x20003de8
 80073b8:	20003de4 	.word	0x20003de4
 80073bc:	20003d58 	.word	0x20003d58
 80073c0:	e000ed04 	.word	0xe000ed04

080073c4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80073c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80073c6:	4b1b      	ldr	r3, [pc, #108]	; (8007434 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073c8:	4e1b      	ldr	r6, [pc, #108]	; (8007438 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 80073ca:	681d      	ldr	r5, [r3, #0]
{
 80073cc:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073ce:	6830      	ldr	r0, [r6, #0]
 80073d0:	3004      	adds	r0, #4
{
 80073d2:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073d4:	f7fe ff83 	bl	80062de <uxListRemove>
 80073d8:	4633      	mov	r3, r6
 80073da:	b940      	cbnz	r0, 80073ee <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80073dc:	6831      	ldr	r1, [r6, #0]
 80073de:	4e17      	ldr	r6, [pc, #92]	; (800743c <prvAddCurrentTaskToDelayedList+0x78>)
 80073e0:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80073e2:	6832      	ldr	r2, [r6, #0]
 80073e4:	2001      	movs	r0, #1
 80073e6:	4088      	lsls	r0, r1
 80073e8:	ea22 0200 	bic.w	r2, r2, r0
 80073ec:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80073ee:	1c62      	adds	r2, r4, #1
 80073f0:	d107      	bne.n	8007402 <prvAddCurrentTaskToDelayedList+0x3e>
 80073f2:	b137      	cbz	r7, 8007402 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073f4:	6819      	ldr	r1, [r3, #0]
 80073f6:	4812      	ldr	r0, [pc, #72]	; (8007440 <prvAddCurrentTaskToDelayedList+0x7c>)
 80073f8:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80073fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073fe:	f7fe bf4b 	b.w	8006298 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007402:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007404:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8007406:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007408:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 800740a:	d907      	bls.n	800741c <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800740c:	4a0d      	ldr	r2, [pc, #52]	; (8007444 <prvAddCurrentTaskToDelayedList+0x80>)
 800740e:	6810      	ldr	r0, [r2, #0]
 8007410:	6819      	ldr	r1, [r3, #0]
}
 8007412:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007416:	3104      	adds	r1, #4
 8007418:	f7fe bf4a 	b.w	80062b0 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800741c:	4a0a      	ldr	r2, [pc, #40]	; (8007448 <prvAddCurrentTaskToDelayedList+0x84>)
 800741e:	6810      	ldr	r0, [r2, #0]
 8007420:	6819      	ldr	r1, [r3, #0]
 8007422:	3104      	adds	r1, #4
 8007424:	f7fe ff44 	bl	80062b0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007428:	4b08      	ldr	r3, [pc, #32]	; (800744c <prvAddCurrentTaskToDelayedList+0x88>)
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 800742e:	bf38      	it	cc
 8007430:	601c      	strcc	r4, [r3, #0]
 8007432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007434:	20003e6c 	.word	0x20003e6c
 8007438:	20003d4c 	.word	0x20003d4c
 800743c:	20003df8 	.word	0x20003df8
 8007440:	20003e44 	.word	0x20003e44
 8007444:	20003d54 	.word	0x20003d54
 8007448:	20003d50 	.word	0x20003d50
 800744c:	20003e24 	.word	0x20003e24

08007450 <xTaskCreateStatic>:
	{
 8007450:	b570      	push	{r4, r5, r6, lr}
 8007452:	b086      	sub	sp, #24
 8007454:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8007456:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8007458:	b945      	cbnz	r5, 800746c <xTaskCreateStatic+0x1c>
 800745a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800745e:	f383 8811 	msr	BASEPRI, r3
 8007462:	f3bf 8f6f 	isb	sy
 8007466:	f3bf 8f4f 	dsb	sy
 800746a:	e7fe      	b.n	800746a <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800746c:	b944      	cbnz	r4, 8007480 <xTaskCreateStatic+0x30>
 800746e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007472:	f383 8811 	msr	BASEPRI, r3
 8007476:	f3bf 8f6f 	isb	sy
 800747a:	f3bf 8f4f 	dsb	sy
 800747e:	e7fe      	b.n	800747e <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8007480:	2654      	movs	r6, #84	; 0x54
 8007482:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007484:	9e04      	ldr	r6, [sp, #16]
 8007486:	2e54      	cmp	r6, #84	; 0x54
 8007488:	d008      	beq.n	800749c <xTaskCreateStatic+0x4c>
 800748a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800748e:	f383 8811 	msr	BASEPRI, r3
 8007492:	f3bf 8f6f 	isb	sy
 8007496:	f3bf 8f4f 	dsb	sy
 800749a:	e7fe      	b.n	800749a <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800749c:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800749e:	2502      	movs	r5, #2
 80074a0:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80074a4:	ad05      	add	r5, sp, #20
 80074a6:	9501      	str	r5, [sp, #4]
 80074a8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80074aa:	9402      	str	r4, [sp, #8]
 80074ac:	9500      	str	r5, [sp, #0]
 80074ae:	f7ff fefb 	bl	80072a8 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 80074b2:	4620      	mov	r0, r4
 80074b4:	f7ff fe6a 	bl	800718c <prvAddNewTaskToReadyList>
	}
 80074b8:	9805      	ldr	r0, [sp, #20]
 80074ba:	b006      	add	sp, #24
 80074bc:	bd70      	pop	{r4, r5, r6, pc}

080074be <xTaskCreate>:
	{
 80074be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80074c2:	4607      	mov	r7, r0
 80074c4:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074c6:	0090      	lsls	r0, r2, #2
	{
 80074c8:	4688      	mov	r8, r1
 80074ca:	4616      	mov	r6, r2
 80074cc:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074ce:	f7ff f8f1 	bl	80066b4 <pvPortMalloc>
			if( pxStack != NULL )
 80074d2:	4605      	mov	r5, r0
 80074d4:	b1e8      	cbz	r0, 8007512 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80074d6:	2054      	movs	r0, #84	; 0x54
 80074d8:	f7ff f8ec 	bl	80066b4 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80074dc:	4604      	mov	r4, r0
 80074de:	b1a8      	cbz	r0, 800750c <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80074e0:	2300      	movs	r3, #0
 80074e2:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80074e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 80074e8:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80074ea:	9301      	str	r3, [sp, #4]
 80074ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80074ee:	9002      	str	r0, [sp, #8]
 80074f0:	9300      	str	r3, [sp, #0]
 80074f2:	4632      	mov	r2, r6
 80074f4:	464b      	mov	r3, r9
 80074f6:	4641      	mov	r1, r8
 80074f8:	4638      	mov	r0, r7
 80074fa:	f7ff fed5 	bl	80072a8 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 80074fe:	4620      	mov	r0, r4
 8007500:	f7ff fe44 	bl	800718c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007504:	2001      	movs	r0, #1
	}
 8007506:	b005      	add	sp, #20
 8007508:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800750c:	4628      	mov	r0, r5
 800750e:	f7ff f95f 	bl	80067d0 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007512:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 8007516:	e7f6      	b.n	8007506 <xTaskCreate+0x48>

08007518 <vTaskStartScheduler>:
{
 8007518:	b510      	push	{r4, lr}
 800751a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800751c:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800751e:	aa07      	add	r2, sp, #28
 8007520:	a906      	add	r1, sp, #24
 8007522:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007524:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007526:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007528:	f000 fbc8 	bl	8007cbc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800752c:	9b05      	ldr	r3, [sp, #20]
 800752e:	9302      	str	r3, [sp, #8]
 8007530:	9b06      	ldr	r3, [sp, #24]
 8007532:	9301      	str	r3, [sp, #4]
 8007534:	9400      	str	r4, [sp, #0]
 8007536:	4623      	mov	r3, r4
 8007538:	9a07      	ldr	r2, [sp, #28]
 800753a:	490d      	ldr	r1, [pc, #52]	; (8007570 <vTaskStartScheduler+0x58>)
 800753c:	480d      	ldr	r0, [pc, #52]	; (8007574 <vTaskStartScheduler+0x5c>)
 800753e:	f7ff ff87 	bl	8007450 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8007542:	b190      	cbz	r0, 800756a <vTaskStartScheduler+0x52>
 8007544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007548:	f383 8811 	msr	BASEPRI, r3
 800754c:	f3bf 8f6f 	isb	sy
 8007550:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8007554:	4b08      	ldr	r3, [pc, #32]	; (8007578 <vTaskStartScheduler+0x60>)
 8007556:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800755a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800755c:	4b07      	ldr	r3, [pc, #28]	; (800757c <vTaskStartScheduler+0x64>)
 800755e:	2201      	movs	r2, #1
 8007560:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007562:	4b07      	ldr	r3, [pc, #28]	; (8007580 <vTaskStartScheduler+0x68>)
 8007564:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8007566:	f7fe ffcd 	bl	8006504 <xPortStartScheduler>
}
 800756a:	b008      	add	sp, #32
 800756c:	bd10      	pop	{r4, pc}
 800756e:	bf00      	nop
 8007570:	0800c93f 	.word	0x0800c93f
 8007574:	08007361 	.word	0x08007361
 8007578:	20003e24 	.word	0x20003e24
 800757c:	20003e40 	.word	0x20003e40
 8007580:	20003e6c 	.word	0x20003e6c

08007584 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8007584:	4a02      	ldr	r2, [pc, #8]	; (8007590 <vTaskSuspendAll+0xc>)
 8007586:	6813      	ldr	r3, [r2, #0]
 8007588:	3301      	adds	r3, #1
 800758a:	6013      	str	r3, [r2, #0]
 800758c:	4770      	bx	lr
 800758e:	bf00      	nop
 8007590:	20003df0 	.word	0x20003df0

08007594 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8007594:	4b01      	ldr	r3, [pc, #4]	; (800759c <xTaskGetTickCount+0x8>)
 8007596:	6818      	ldr	r0, [r3, #0]
}
 8007598:	4770      	bx	lr
 800759a:	bf00      	nop
 800759c:	20003e6c 	.word	0x20003e6c

080075a0 <xTaskGetTickCountFromISR>:
{
 80075a0:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80075a2:	f7ff f835 	bl	8006610 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 80075a6:	4b01      	ldr	r3, [pc, #4]	; (80075ac <xTaskGetTickCountFromISR+0xc>)
 80075a8:	6818      	ldr	r0, [r3, #0]
}
 80075aa:	bd08      	pop	{r3, pc}
 80075ac:	20003e6c 	.word	0x20003e6c

080075b0 <xTaskIncrementTick>:
{
 80075b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075b4:	4b3c      	ldr	r3, [pc, #240]	; (80076a8 <xTaskIncrementTick+0xf8>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d153      	bne.n	8007664 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80075bc:	4b3b      	ldr	r3, [pc, #236]	; (80076ac <xTaskIncrementTick+0xfc>)
 80075be:	681c      	ldr	r4, [r3, #0]
 80075c0:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 80075c2:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80075c4:	b9bc      	cbnz	r4, 80075f6 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80075c6:	4b3a      	ldr	r3, [pc, #232]	; (80076b0 <xTaskIncrementTick+0x100>)
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	6812      	ldr	r2, [r2, #0]
 80075cc:	b142      	cbz	r2, 80075e0 <xTaskIncrementTick+0x30>
 80075ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d2:	f383 8811 	msr	BASEPRI, r3
 80075d6:	f3bf 8f6f 	isb	sy
 80075da:	f3bf 8f4f 	dsb	sy
 80075de:	e7fe      	b.n	80075de <xTaskIncrementTick+0x2e>
 80075e0:	4a34      	ldr	r2, [pc, #208]	; (80076b4 <xTaskIncrementTick+0x104>)
 80075e2:	6819      	ldr	r1, [r3, #0]
 80075e4:	6810      	ldr	r0, [r2, #0]
 80075e6:	6018      	str	r0, [r3, #0]
 80075e8:	6011      	str	r1, [r2, #0]
 80075ea:	4a33      	ldr	r2, [pc, #204]	; (80076b8 <xTaskIncrementTick+0x108>)
 80075ec:	6813      	ldr	r3, [r2, #0]
 80075ee:	3301      	adds	r3, #1
 80075f0:	6013      	str	r3, [r2, #0]
 80075f2:	f7ff fe47 	bl	8007284 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80075f6:	4d31      	ldr	r5, [pc, #196]	; (80076bc <xTaskIncrementTick+0x10c>)
 80075f8:	4f31      	ldr	r7, [pc, #196]	; (80076c0 <xTaskIncrementTick+0x110>)
 80075fa:	682b      	ldr	r3, [r5, #0]
 80075fc:	429c      	cmp	r4, r3
 80075fe:	f04f 0b00 	mov.w	fp, #0
 8007602:	d33e      	bcc.n	8007682 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007604:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80076b0 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8007608:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 80076d0 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800760c:	f8d8 2000 	ldr.w	r2, [r8]
 8007610:	6812      	ldr	r2, [r2, #0]
 8007612:	bb72      	cbnz	r2, 8007672 <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007614:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007618:	602a      	str	r2, [r5, #0]
					break;
 800761a:	e032      	b.n	8007682 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800761c:	f106 0a04 	add.w	sl, r6, #4
 8007620:	4650      	mov	r0, sl
 8007622:	f7fe fe5c 	bl	80062de <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007626:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8007628:	b119      	cbz	r1, 8007632 <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800762a:	f106 0018 	add.w	r0, r6, #24
 800762e:	f7fe fe56 	bl	80062de <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007632:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8007634:	f8d9 3000 	ldr.w	r3, [r9]
 8007638:	2201      	movs	r2, #1
 800763a:	fa02 f100 	lsl.w	r1, r2, r0
 800763e:	4319      	orrs	r1, r3
 8007640:	4b20      	ldr	r3, [pc, #128]	; (80076c4 <xTaskIncrementTick+0x114>)
 8007642:	f8c9 1000 	str.w	r1, [r9]
 8007646:	f04f 0e14 	mov.w	lr, #20
 800764a:	4651      	mov	r1, sl
 800764c:	fb0e 3000 	mla	r0, lr, r0, r3
 8007650:	f7fe fe22 	bl	8006298 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007654:	6838      	ldr	r0, [r7, #0]
 8007656:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8007658:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800765a:	4291      	cmp	r1, r2
 800765c:	bf28      	it	cs
 800765e:	f04f 0b01 	movcs.w	fp, #1
 8007662:	e7d3      	b.n	800760c <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8007664:	4a18      	ldr	r2, [pc, #96]	; (80076c8 <xTaskIncrementTick+0x118>)
 8007666:	6813      	ldr	r3, [r2, #0]
 8007668:	3301      	adds	r3, #1
 800766a:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800766c:	f04f 0b00 	mov.w	fp, #0
 8007670:	e011      	b.n	8007696 <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007672:	f8d8 2000 	ldr.w	r2, [r8]
 8007676:	68d2      	ldr	r2, [r2, #12]
 8007678:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800767a:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 800767c:	428c      	cmp	r4, r1
 800767e:	d2cd      	bcs.n	800761c <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8007680:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007682:	683a      	ldr	r2, [r7, #0]
 8007684:	4b0f      	ldr	r3, [pc, #60]	; (80076c4 <xTaskIncrementTick+0x114>)
 8007686:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007688:	2214      	movs	r2, #20
 800768a:	434a      	muls	r2, r1
 800768c:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 800768e:	2a02      	cmp	r2, #2
 8007690:	bf28      	it	cs
 8007692:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8007696:	4a0d      	ldr	r2, [pc, #52]	; (80076cc <xTaskIncrementTick+0x11c>)
 8007698:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 800769a:	2a00      	cmp	r2, #0
 800769c:	bf18      	it	ne
 800769e:	f04f 0b01 	movne.w	fp, #1
}
 80076a2:	4658      	mov	r0, fp
 80076a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076a8:	20003df0 	.word	0x20003df0
 80076ac:	20003e6c 	.word	0x20003e6c
 80076b0:	20003d50 	.word	0x20003d50
 80076b4:	20003d54 	.word	0x20003d54
 80076b8:	20003e28 	.word	0x20003e28
 80076bc:	20003e24 	.word	0x20003e24
 80076c0:	20003d4c 	.word	0x20003d4c
 80076c4:	20003d58 	.word	0x20003d58
 80076c8:	20003dec 	.word	0x20003dec
 80076cc:	20003e70 	.word	0x20003e70
 80076d0:	20003df8 	.word	0x20003df8

080076d4 <xTaskResumeAll>:
{
 80076d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 80076d8:	4c31      	ldr	r4, [pc, #196]	; (80077a0 <xTaskResumeAll+0xcc>)
 80076da:	6823      	ldr	r3, [r4, #0]
 80076dc:	b943      	cbnz	r3, 80076f0 <xTaskResumeAll+0x1c>
 80076de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e2:	f383 8811 	msr	BASEPRI, r3
 80076e6:	f3bf 8f6f 	isb	sy
 80076ea:	f3bf 8f4f 	dsb	sy
 80076ee:	e7fe      	b.n	80076ee <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 80076f0:	f7fe fe70 	bl	80063d4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80076f4:	6823      	ldr	r3, [r4, #0]
 80076f6:	3b01      	subs	r3, #1
 80076f8:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076fa:	6824      	ldr	r4, [r4, #0]
 80076fc:	b12c      	cbz	r4, 800770a <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80076fe:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8007700:	f7fe fe8a 	bl	8006418 <vPortExitCritical>
}
 8007704:	4620      	mov	r0, r4
 8007706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800770a:	4b26      	ldr	r3, [pc, #152]	; (80077a4 <xTaskResumeAll+0xd0>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d0f5      	beq.n	80076fe <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007712:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80077bc <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8007716:	4f24      	ldr	r7, [pc, #144]	; (80077a8 <xTaskResumeAll+0xd4>)
 8007718:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80077c0 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800771c:	f8d9 3000 	ldr.w	r3, [r9]
 8007720:	b9e3      	cbnz	r3, 800775c <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8007722:	b10c      	cbz	r4, 8007728 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8007724:	f7ff fdae 	bl	8007284 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007728:	4d20      	ldr	r5, [pc, #128]	; (80077ac <xTaskResumeAll+0xd8>)
 800772a:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800772c:	b144      	cbz	r4, 8007740 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 800772e:	4e20      	ldr	r6, [pc, #128]	; (80077b0 <xTaskResumeAll+0xdc>)
 8007730:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8007732:	f7ff ff3d 	bl	80075b0 <xTaskIncrementTick>
 8007736:	b100      	cbz	r0, 800773a <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8007738:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800773a:	3c01      	subs	r4, #1
 800773c:	d1f9      	bne.n	8007732 <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 800773e:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8007740:	4b1b      	ldr	r3, [pc, #108]	; (80077b0 <xTaskResumeAll+0xdc>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d0da      	beq.n	80076fe <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8007748:	4b1a      	ldr	r3, [pc, #104]	; (80077b4 <xTaskResumeAll+0xe0>)
 800774a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800774e:	601a      	str	r2, [r3, #0]
 8007750:	f3bf 8f4f 	dsb	sy
 8007754:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8007758:	2401      	movs	r4, #1
 800775a:	e7d1      	b.n	8007700 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800775c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8007760:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007762:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007764:	f104 0018 	add.w	r0, r4, #24
 8007768:	f7fe fdb9 	bl	80062de <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800776c:	4630      	mov	r0, r6
 800776e:	f7fe fdb6 	bl	80062de <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007772:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007774:	6839      	ldr	r1, [r7, #0]
 8007776:	2501      	movs	r5, #1
 8007778:	fa05 f302 	lsl.w	r3, r5, r2
 800777c:	2014      	movs	r0, #20
 800777e:	430b      	orrs	r3, r1
 8007780:	fb00 8002 	mla	r0, r0, r2, r8
 8007784:	4631      	mov	r1, r6
 8007786:	603b      	str	r3, [r7, #0]
 8007788:	f7fe fd86 	bl	8006298 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800778c:	4b0a      	ldr	r3, [pc, #40]	; (80077b8 <xTaskResumeAll+0xe4>)
 800778e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007794:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8007796:	bf24      	itt	cs
 8007798:	4b05      	ldrcs	r3, [pc, #20]	; (80077b0 <xTaskResumeAll+0xdc>)
 800779a:	601d      	strcs	r5, [r3, #0]
 800779c:	e7be      	b.n	800771c <xTaskResumeAll+0x48>
 800779e:	bf00      	nop
 80077a0:	20003df0 	.word	0x20003df0
 80077a4:	20003de4 	.word	0x20003de4
 80077a8:	20003df8 	.word	0x20003df8
 80077ac:	20003dec 	.word	0x20003dec
 80077b0:	20003e70 	.word	0x20003e70
 80077b4:	e000ed04 	.word	0xe000ed04
 80077b8:	20003d4c 	.word	0x20003d4c
 80077bc:	20003e2c 	.word	0x20003e2c
 80077c0:	20003d58 	.word	0x20003d58

080077c4 <vTaskDelay>:
	{
 80077c4:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80077c6:	b940      	cbnz	r0, 80077da <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 80077c8:	4b0e      	ldr	r3, [pc, #56]	; (8007804 <vTaskDelay+0x40>)
 80077ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077ce:	601a      	str	r2, [r3, #0]
 80077d0:	f3bf 8f4f 	dsb	sy
 80077d4:	f3bf 8f6f 	isb	sy
 80077d8:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80077da:	4b0b      	ldr	r3, [pc, #44]	; (8007808 <vTaskDelay+0x44>)
 80077dc:	6819      	ldr	r1, [r3, #0]
 80077de:	b141      	cbz	r1, 80077f2 <vTaskDelay+0x2e>
 80077e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e4:	f383 8811 	msr	BASEPRI, r3
 80077e8:	f3bf 8f6f 	isb	sy
 80077ec:	f3bf 8f4f 	dsb	sy
 80077f0:	e7fe      	b.n	80077f0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80077f2:	f7ff fec7 	bl	8007584 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80077f6:	f7ff fde5 	bl	80073c4 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80077fa:	f7ff ff6b 	bl	80076d4 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80077fe:	2800      	cmp	r0, #0
 8007800:	d0e2      	beq.n	80077c8 <vTaskDelay+0x4>
 8007802:	bd08      	pop	{r3, pc}
 8007804:	e000ed04 	.word	0xe000ed04
 8007808:	20003df0 	.word	0x20003df0

0800780c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800780c:	4b17      	ldr	r3, [pc, #92]	; (800786c <vTaskSwitchContext+0x60>)
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	4b17      	ldr	r3, [pc, #92]	; (8007870 <vTaskSwitchContext+0x64>)
{
 8007812:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007814:	b112      	cbz	r2, 800781c <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8007816:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007818:	601a      	str	r2, [r3, #0]
 800781a:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 800781c:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800781e:	4b15      	ldr	r3, [pc, #84]	; (8007874 <vTaskSwitchContext+0x68>)
 8007820:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007822:	fab3 f383 	clz	r3, r3
 8007826:	b2db      	uxtb	r3, r3
 8007828:	f1c3 031f 	rsb	r3, r3, #31
 800782c:	2214      	movs	r2, #20
 800782e:	4912      	ldr	r1, [pc, #72]	; (8007878 <vTaskSwitchContext+0x6c>)
 8007830:	435a      	muls	r2, r3
 8007832:	1888      	adds	r0, r1, r2
 8007834:	588c      	ldr	r4, [r1, r2]
 8007836:	b944      	cbnz	r4, 800784a <vTaskSwitchContext+0x3e>
	__asm volatile
 8007838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800783c:	f383 8811 	msr	BASEPRI, r3
 8007840:	f3bf 8f6f 	isb	sy
 8007844:	f3bf 8f4f 	dsb	sy
 8007848:	e7fe      	b.n	8007848 <vTaskSwitchContext+0x3c>
 800784a:	6844      	ldr	r4, [r0, #4]
 800784c:	3208      	adds	r2, #8
 800784e:	6864      	ldr	r4, [r4, #4]
 8007850:	6044      	str	r4, [r0, #4]
 8007852:	440a      	add	r2, r1
 8007854:	4294      	cmp	r4, r2
 8007856:	bf04      	itt	eq
 8007858:	6862      	ldreq	r2, [r4, #4]
 800785a:	6042      	streq	r2, [r0, #4]
 800785c:	2214      	movs	r2, #20
 800785e:	fb02 1303 	mla	r3, r2, r3, r1
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	68da      	ldr	r2, [r3, #12]
 8007866:	4b05      	ldr	r3, [pc, #20]	; (800787c <vTaskSwitchContext+0x70>)
 8007868:	e7d6      	b.n	8007818 <vTaskSwitchContext+0xc>
 800786a:	bf00      	nop
 800786c:	20003df0 	.word	0x20003df0
 8007870:	20003e70 	.word	0x20003e70
 8007874:	20003df8 	.word	0x20003df8
 8007878:	20003d58 	.word	0x20003d58
 800787c:	20003d4c 	.word	0x20003d4c

08007880 <vTaskPlaceOnEventList>:
{
 8007880:	b510      	push	{r4, lr}
 8007882:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8007884:	b940      	cbnz	r0, 8007898 <vTaskPlaceOnEventList+0x18>
 8007886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800788a:	f383 8811 	msr	BASEPRI, r3
 800788e:	f3bf 8f6f 	isb	sy
 8007892:	f3bf 8f4f 	dsb	sy
 8007896:	e7fe      	b.n	8007896 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007898:	4b05      	ldr	r3, [pc, #20]	; (80078b0 <vTaskPlaceOnEventList+0x30>)
 800789a:	6819      	ldr	r1, [r3, #0]
 800789c:	3118      	adds	r1, #24
 800789e:	f7fe fd07 	bl	80062b0 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80078a2:	4620      	mov	r0, r4
 80078a4:	2101      	movs	r1, #1
}
 80078a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80078aa:	f7ff bd8b 	b.w	80073c4 <prvAddCurrentTaskToDelayedList>
 80078ae:	bf00      	nop
 80078b0:	20003d4c 	.word	0x20003d4c

080078b4 <xTaskRemoveFromEventList>:
{
 80078b4:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80078b6:	68c3      	ldr	r3, [r0, #12]
 80078b8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80078ba:	b944      	cbnz	r4, 80078ce <xTaskRemoveFromEventList+0x1a>
 80078bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c0:	f383 8811 	msr	BASEPRI, r3
 80078c4:	f3bf 8f6f 	isb	sy
 80078c8:	f3bf 8f4f 	dsb	sy
 80078cc:	e7fe      	b.n	80078cc <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80078ce:	f104 0518 	add.w	r5, r4, #24
 80078d2:	4628      	mov	r0, r5
 80078d4:	f7fe fd03 	bl	80062de <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078d8:	4b11      	ldr	r3, [pc, #68]	; (8007920 <xTaskRemoveFromEventList+0x6c>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	b9e3      	cbnz	r3, 8007918 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80078de:	1d25      	adds	r5, r4, #4
 80078e0:	4628      	mov	r0, r5
 80078e2:	f7fe fcfc 	bl	80062de <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80078e6:	490f      	ldr	r1, [pc, #60]	; (8007924 <xTaskRemoveFromEventList+0x70>)
 80078e8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80078ea:	6808      	ldr	r0, [r1, #0]
 80078ec:	2301      	movs	r3, #1
 80078ee:	4093      	lsls	r3, r2
 80078f0:	4303      	orrs	r3, r0
 80078f2:	600b      	str	r3, [r1, #0]
 80078f4:	4b0c      	ldr	r3, [pc, #48]	; (8007928 <xTaskRemoveFromEventList+0x74>)
 80078f6:	2014      	movs	r0, #20
 80078f8:	4629      	mov	r1, r5
 80078fa:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80078fe:	f7fe fccb 	bl	8006298 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007902:	4b0a      	ldr	r3, [pc, #40]	; (800792c <xTaskRemoveFromEventList+0x78>)
 8007904:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800790a:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 800790c:	bf83      	ittte	hi
 800790e:	4b08      	ldrhi	r3, [pc, #32]	; (8007930 <xTaskRemoveFromEventList+0x7c>)
 8007910:	2001      	movhi	r0, #1
 8007912:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8007914:	2000      	movls	r0, #0
}
 8007916:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007918:	4629      	mov	r1, r5
 800791a:	4806      	ldr	r0, [pc, #24]	; (8007934 <xTaskRemoveFromEventList+0x80>)
 800791c:	e7ef      	b.n	80078fe <xTaskRemoveFromEventList+0x4a>
 800791e:	bf00      	nop
 8007920:	20003df0 	.word	0x20003df0
 8007924:	20003df8 	.word	0x20003df8
 8007928:	20003d58 	.word	0x20003d58
 800792c:	20003d4c 	.word	0x20003d4c
 8007930:	20003e70 	.word	0x20003e70
 8007934:	20003e2c 	.word	0x20003e2c

08007938 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007938:	4b03      	ldr	r3, [pc, #12]	; (8007948 <vTaskInternalSetTimeOutState+0x10>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800793e:	4b03      	ldr	r3, [pc, #12]	; (800794c <vTaskInternalSetTimeOutState+0x14>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	6043      	str	r3, [r0, #4]
 8007944:	4770      	bx	lr
 8007946:	bf00      	nop
 8007948:	20003e28 	.word	0x20003e28
 800794c:	20003e6c 	.word	0x20003e6c

08007950 <xTaskCheckForTimeOut>:
{
 8007950:	b570      	push	{r4, r5, r6, lr}
 8007952:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8007954:	4605      	mov	r5, r0
 8007956:	b940      	cbnz	r0, 800796a <xTaskCheckForTimeOut+0x1a>
 8007958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800795c:	f383 8811 	msr	BASEPRI, r3
 8007960:	f3bf 8f6f 	isb	sy
 8007964:	f3bf 8f4f 	dsb	sy
 8007968:	e7fe      	b.n	8007968 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800796a:	b941      	cbnz	r1, 800797e <xTaskCheckForTimeOut+0x2e>
 800796c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007970:	f383 8811 	msr	BASEPRI, r3
 8007974:	f3bf 8f6f 	isb	sy
 8007978:	f3bf 8f4f 	dsb	sy
 800797c:	e7fe      	b.n	800797c <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800797e:	f7fe fd29 	bl	80063d4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8007982:	4b0f      	ldr	r3, [pc, #60]	; (80079c0 <xTaskCheckForTimeOut+0x70>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007984:	6869      	ldr	r1, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
 8007986:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8007988:	6823      	ldr	r3, [r4, #0]
 800798a:	1c58      	adds	r0, r3, #1
 800798c:	d00e      	beq.n	80079ac <xTaskCheckForTimeOut+0x5c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800798e:	480d      	ldr	r0, [pc, #52]	; (80079c4 <xTaskCheckForTimeOut+0x74>)
 8007990:	682e      	ldr	r6, [r5, #0]
 8007992:	6800      	ldr	r0, [r0, #0]
 8007994:	4286      	cmp	r6, r0
 8007996:	d001      	beq.n	800799c <xTaskCheckForTimeOut+0x4c>
 8007998:	428a      	cmp	r2, r1
 800799a:	d20e      	bcs.n	80079ba <xTaskCheckForTimeOut+0x6a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800799c:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800799e:	429a      	cmp	r2, r3
 80079a0:	d209      	bcs.n	80079b6 <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait -= xElapsedTime;
 80079a2:	1a9b      	subs	r3, r3, r2
 80079a4:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80079a6:	4628      	mov	r0, r5
 80079a8:	f7ff ffc6 	bl	8007938 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 80079ac:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80079ae:	f7fe fd33 	bl	8006418 <vPortExitCritical>
}
 80079b2:	4620      	mov	r0, r4
 80079b4:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 80079b6:	2300      	movs	r3, #0
 80079b8:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80079ba:	2401      	movs	r4, #1
 80079bc:	e7f7      	b.n	80079ae <xTaskCheckForTimeOut+0x5e>
 80079be:	bf00      	nop
 80079c0:	20003e6c 	.word	0x20003e6c
 80079c4:	20003e28 	.word	0x20003e28

080079c8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80079c8:	4b01      	ldr	r3, [pc, #4]	; (80079d0 <vTaskMissedYield+0x8>)
 80079ca:	2201      	movs	r2, #1
 80079cc:	601a      	str	r2, [r3, #0]
 80079ce:	4770      	bx	lr
 80079d0:	20003e70 	.word	0x20003e70

080079d4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80079d4:	4b05      	ldr	r3, [pc, #20]	; (80079ec <xTaskGetSchedulerState+0x18>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	b133      	cbz	r3, 80079e8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079da:	4b05      	ldr	r3, [pc, #20]	; (80079f0 <xTaskGetSchedulerState+0x1c>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 80079e0:	bf0c      	ite	eq
 80079e2:	2002      	moveq	r0, #2
 80079e4:	2000      	movne	r0, #0
 80079e6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80079e8:	2001      	movs	r0, #1
	}
 80079ea:	4770      	bx	lr
 80079ec:	20003e40 	.word	0x20003e40
 80079f0:	20003df0 	.word	0x20003df0

080079f4 <xTaskPriorityInherit>:
	{
 80079f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 80079f8:	4604      	mov	r4, r0
 80079fa:	2800      	cmp	r0, #0
 80079fc:	d041      	beq.n	8007a82 <xTaskPriorityInherit+0x8e>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80079fe:	4a24      	ldr	r2, [pc, #144]	; (8007a90 <xTaskPriorityInherit+0x9c>)
 8007a00:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8007a02:	6811      	ldr	r1, [r2, #0]
 8007a04:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8007a06:	428b      	cmp	r3, r1
 8007a08:	4617      	mov	r7, r2
 8007a0a:	d231      	bcs.n	8007a70 <xTaskPriorityInherit+0x7c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007a0c:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007a0e:	4d21      	ldr	r5, [pc, #132]	; (8007a94 <xTaskPriorityInherit+0xa0>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007a10:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a12:	bfa1      	itttt	ge
 8007a14:	683a      	ldrge	r2, [r7, #0]
 8007a16:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 8007a18:	f1c2 0207 	rsbge	r2, r2, #7
 8007a1c:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007a1e:	2614      	movs	r6, #20
 8007a20:	6942      	ldr	r2, [r0, #20]
 8007a22:	fb06 5303 	mla	r3, r6, r3, r5
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d12d      	bne.n	8007a86 <xTaskPriorityInherit+0x92>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a2a:	f100 0804 	add.w	r8, r0, #4
 8007a2e:	4640      	mov	r0, r8
 8007a30:	f7fe fc55 	bl	80062de <uxListRemove>
 8007a34:	4b18      	ldr	r3, [pc, #96]	; (8007a98 <xTaskPriorityInherit+0xa4>)
 8007a36:	b948      	cbnz	r0, 8007a4c <xTaskPriorityInherit+0x58>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8007a38:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8007a3a:	4346      	muls	r6, r0
 8007a3c:	59aa      	ldr	r2, [r5, r6]
 8007a3e:	b92a      	cbnz	r2, 8007a4c <xTaskPriorityInherit+0x58>
 8007a40:	681a      	ldr	r2, [r3, #0]
 8007a42:	2101      	movs	r1, #1
 8007a44:	4081      	lsls	r1, r0
 8007a46:	ea22 0201 	bic.w	r2, r2, r1
 8007a4a:	601a      	str	r2, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007a4c:	683a      	ldr	r2, [r7, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007a4e:	6819      	ldr	r1, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007a50:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007a52:	62e2      	str	r2, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007a54:	2401      	movs	r4, #1
 8007a56:	fa04 f002 	lsl.w	r0, r4, r2
 8007a5a:	4308      	orrs	r0, r1
 8007a5c:	6018      	str	r0, [r3, #0]
 8007a5e:	2014      	movs	r0, #20
 8007a60:	4641      	mov	r1, r8
 8007a62:	fb00 5002 	mla	r0, r0, r2, r5
 8007a66:	f7fe fc17 	bl	8006298 <vListInsertEnd>
				xReturn = pdTRUE;
 8007a6a:	2001      	movs	r0, #1
	}
 8007a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007a70:	6813      	ldr	r3, [r2, #0]
 8007a72:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8007a74:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8007a76:	42a0      	cmp	r0, r4
 8007a78:	bf2c      	ite	cs
 8007a7a:	2000      	movcs	r0, #0
 8007a7c:	2001      	movcc	r0, #1
 8007a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return xReturn;
 8007a82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a8a:	62c3      	str	r3, [r0, #44]	; 0x2c
 8007a8c:	e7ed      	b.n	8007a6a <xTaskPriorityInherit+0x76>
 8007a8e:	bf00      	nop
 8007a90:	20003d4c 	.word	0x20003d4c
 8007a94:	20003d58 	.word	0x20003d58
 8007a98:	20003df8 	.word	0x20003df8

08007a9c <xTaskPriorityDisinherit>:
	{
 8007a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8007a9e:	4604      	mov	r4, r0
 8007aa0:	b908      	cbnz	r0, 8007aa6 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8007aa2:	2000      	movs	r0, #0
 8007aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8007aa6:	4b22      	ldr	r3, [pc, #136]	; (8007b30 <xTaskPriorityDisinherit+0x94>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4298      	cmp	r0, r3
 8007aac:	d008      	beq.n	8007ac0 <xTaskPriorityDisinherit+0x24>
 8007aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab2:	f383 8811 	msr	BASEPRI, r3
 8007ab6:	f3bf 8f6f 	isb	sy
 8007aba:	f3bf 8f4f 	dsb	sy
 8007abe:	e7fe      	b.n	8007abe <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8007ac0:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8007ac2:	b943      	cbnz	r3, 8007ad6 <xTaskPriorityDisinherit+0x3a>
 8007ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac8:	f383 8811 	msr	BASEPRI, r3
 8007acc:	f3bf 8f6f 	isb	sy
 8007ad0:	f3bf 8f4f 	dsb	sy
 8007ad4:	e7fe      	b.n	8007ad4 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007ad6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8007ad8:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8007ada:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007adc:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8007ade:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007ae0:	d0df      	beq.n	8007aa2 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d1dd      	bne.n	8007aa2 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ae6:	1d05      	adds	r5, r0, #4
 8007ae8:	4628      	mov	r0, r5
 8007aea:	f7fe fbf8 	bl	80062de <uxListRemove>
 8007aee:	4e11      	ldr	r6, [pc, #68]	; (8007b34 <xTaskPriorityDisinherit+0x98>)
 8007af0:	4a11      	ldr	r2, [pc, #68]	; (8007b38 <xTaskPriorityDisinherit+0x9c>)
 8007af2:	b950      	cbnz	r0, 8007b0a <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007af4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8007af6:	2114      	movs	r1, #20
 8007af8:	4379      	muls	r1, r7
 8007afa:	5873      	ldr	r3, [r6, r1]
 8007afc:	b92b      	cbnz	r3, 8007b0a <xTaskPriorityDisinherit+0x6e>
 8007afe:	6813      	ldr	r3, [r2, #0]
 8007b00:	2001      	movs	r0, #1
 8007b02:	40b8      	lsls	r0, r7
 8007b04:	ea23 0300 	bic.w	r3, r3, r0
 8007b08:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007b0a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007b0c:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b0e:	f1c3 0107 	rsb	r1, r3, #7
 8007b12:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8007b14:	6811      	ldr	r1, [r2, #0]
 8007b16:	2401      	movs	r4, #1
 8007b18:	fa04 f003 	lsl.w	r0, r4, r3
 8007b1c:	4308      	orrs	r0, r1
 8007b1e:	6010      	str	r0, [r2, #0]
 8007b20:	2014      	movs	r0, #20
 8007b22:	fb00 6003 	mla	r0, r0, r3, r6
 8007b26:	4629      	mov	r1, r5
 8007b28:	f7fe fbb6 	bl	8006298 <vListInsertEnd>
					xReturn = pdTRUE;
 8007b2c:	4620      	mov	r0, r4
	}
 8007b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b30:	20003d4c 	.word	0x20003d4c
 8007b34:	20003d58 	.word	0x20003d58
 8007b38:	20003df8 	.word	0x20003df8

08007b3c <vTaskPriorityDisinheritAfterTimeout>:
	{
 8007b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8007b3e:	4604      	mov	r4, r0
 8007b40:	2800      	cmp	r0, #0
 8007b42:	d04d      	beq.n	8007be0 <vTaskPriorityDisinheritAfterTimeout+0xa4>
			configASSERT( pxTCB->uxMutexesHeld );
 8007b44:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8007b46:	b942      	cbnz	r2, 8007b5a <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8007b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b4c:	f383 8811 	msr	BASEPRI, r3
 8007b50:	f3bf 8f6f 	isb	sy
 8007b54:	f3bf 8f4f 	dsb	sy
 8007b58:	e7fe      	b.n	8007b58 <vTaskPriorityDisinheritAfterTimeout+0x1c>
 8007b5a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8007b5c:	4299      	cmp	r1, r3
 8007b5e:	bf38      	it	cc
 8007b60:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007b62:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8007b64:	428b      	cmp	r3, r1
 8007b66:	d03b      	beq.n	8007be0 <vTaskPriorityDisinheritAfterTimeout+0xa4>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007b68:	2a01      	cmp	r2, #1
 8007b6a:	d139      	bne.n	8007be0 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					configASSERT( pxTCB != pxCurrentTCB );
 8007b6c:	4a1d      	ldr	r2, [pc, #116]	; (8007be4 <vTaskPriorityDisinheritAfterTimeout+0xa8>)
 8007b6e:	6812      	ldr	r2, [r2, #0]
 8007b70:	4290      	cmp	r0, r2
 8007b72:	d108      	bne.n	8007b86 <vTaskPriorityDisinheritAfterTimeout+0x4a>
 8007b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b78:	f383 8811 	msr	BASEPRI, r3
 8007b7c:	f3bf 8f6f 	isb	sy
 8007b80:	f3bf 8f4f 	dsb	sy
 8007b84:	e7fe      	b.n	8007b84 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007b86:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007b88:	4d17      	ldr	r5, [pc, #92]	; (8007be8 <vTaskPriorityDisinheritAfterTimeout+0xac>)
					pxTCB->uxPriority = uxPriorityToUse;
 8007b8a:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007b8c:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007b8e:	f04f 0614 	mov.w	r6, #20
 8007b92:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b94:	bfa8      	it	ge
 8007b96:	f1c1 0107 	rsbge	r1, r1, #7
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007b9a:	fb06 5303 	mla	r3, r6, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b9e:	bfa8      	it	ge
 8007ba0:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d11c      	bne.n	8007be0 <vTaskPriorityDisinheritAfterTimeout+0xa4>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ba6:	1d07      	adds	r7, r0, #4
 8007ba8:	4638      	mov	r0, r7
 8007baa:	f7fe fb98 	bl	80062de <uxListRemove>
 8007bae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007bb0:	4c0e      	ldr	r4, [pc, #56]	; (8007bec <vTaskPriorityDisinheritAfterTimeout+0xb0>)
 8007bb2:	b940      	cbnz	r0, 8007bc6 <vTaskPriorityDisinheritAfterTimeout+0x8a>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007bb4:	4356      	muls	r6, r2
 8007bb6:	59ab      	ldr	r3, [r5, r6]
 8007bb8:	b92b      	cbnz	r3, 8007bc6 <vTaskPriorityDisinheritAfterTimeout+0x8a>
 8007bba:	6823      	ldr	r3, [r4, #0]
 8007bbc:	2101      	movs	r1, #1
 8007bbe:	4091      	lsls	r1, r2
 8007bc0:	ea23 0301 	bic.w	r3, r3, r1
 8007bc4:	6023      	str	r3, [r4, #0]
						prvAddTaskToReadyList( pxTCB );
 8007bc6:	6821      	ldr	r1, [r4, #0]
 8007bc8:	2301      	movs	r3, #1
 8007bca:	4093      	lsls	r3, r2
 8007bcc:	430b      	orrs	r3, r1
 8007bce:	2014      	movs	r0, #20
 8007bd0:	6023      	str	r3, [r4, #0]
 8007bd2:	4639      	mov	r1, r7
 8007bd4:	fb00 5002 	mla	r0, r0, r2, r5
	}
 8007bd8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
						prvAddTaskToReadyList( pxTCB );
 8007bdc:	f7fe bb5c 	b.w	8006298 <vListInsertEnd>
 8007be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007be2:	bf00      	nop
 8007be4:	20003d4c 	.word	0x20003d4c
 8007be8:	20003d58 	.word	0x20003d58
 8007bec:	20003df8 	.word	0x20003df8

08007bf0 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8007bf0:	4b04      	ldr	r3, [pc, #16]	; (8007c04 <pvTaskIncrementMutexHeldCount+0x14>)
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	b11a      	cbz	r2, 8007bfe <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8007bf6:	6819      	ldr	r1, [r3, #0]
 8007bf8:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8007bfa:	3201      	adds	r2, #1
 8007bfc:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 8007bfe:	6818      	ldr	r0, [r3, #0]
	}
 8007c00:	4770      	bx	lr
 8007c02:	bf00      	nop
 8007c04:	20003d4c 	.word	0x20003d4c

08007c08 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8007c08:	b507      	push	{r0, r1, r2, lr}
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
  __IO uint8_t status = SD_PRESENT;
 8007c0a:	2001      	movs	r0, #1
 8007c0c:	f88d 0007 	strb.w	r0, [sp, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */    	

  return status;
 8007c10:	f89d 3007 	ldrb.w	r3, [sp, #7]
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007c14:	4283      	cmp	r3, r0
 8007c16:	d102      	bne.n	8007c1e <BSP_SD_Init+0x16>
  sd_state = HAL_SD_Init(&hsd);
 8007c18:	4802      	ldr	r0, [pc, #8]	; (8007c24 <BSP_SD_Init+0x1c>)
 8007c1a:	f7fb fe93 	bl	8003944 <HAL_SD_Init>
}
 8007c1e:	b003      	add	sp, #12
 8007c20:	f85d fb04 	ldr.w	pc, [sp], #4
 8007c24:	200082c4 	.word	0x200082c4

08007c28 <BSP_SD_ReadBlocks_DMA>:
{
 8007c28:	b508      	push	{r3, lr}
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8007c2a:	4613      	mov	r3, r2
 8007c2c:	460a      	mov	r2, r1
 8007c2e:	4601      	mov	r1, r0
 8007c30:	4803      	ldr	r0, [pc, #12]	; (8007c40 <BSP_SD_ReadBlocks_DMA+0x18>)
 8007c32:	f7fb fb8f 	bl	8003354 <HAL_SD_ReadBlocks_DMA>
}
 8007c36:	3000      	adds	r0, #0
 8007c38:	bf18      	it	ne
 8007c3a:	2001      	movne	r0, #1
 8007c3c:	bd08      	pop	{r3, pc}
 8007c3e:	bf00      	nop
 8007c40:	200082c4 	.word	0x200082c4

08007c44 <BSP_SD_WriteBlocks_DMA>:
{
 8007c44:	b508      	push	{r3, lr}
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8007c46:	4613      	mov	r3, r2
 8007c48:	460a      	mov	r2, r1
 8007c4a:	4601      	mov	r1, r0
 8007c4c:	4803      	ldr	r0, [pc, #12]	; (8007c5c <BSP_SD_WriteBlocks_DMA+0x18>)
 8007c4e:	f7fb fc0b 	bl	8003468 <HAL_SD_WriteBlocks_DMA>
}
 8007c52:	3000      	adds	r0, #0
 8007c54:	bf18      	it	ne
 8007c56:	2001      	movne	r0, #1
 8007c58:	bd08      	pop	{r3, pc}
 8007c5a:	bf00      	nop
 8007c5c:	200082c4 	.word	0x200082c4

08007c60 <BSP_SD_GetCardState>:
{
 8007c60:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007c62:	4803      	ldr	r0, [pc, #12]	; (8007c70 <BSP_SD_GetCardState+0x10>)
 8007c64:	f7fb fe9a 	bl	800399c <HAL_SD_GetCardState>
}
 8007c68:	3804      	subs	r0, #4
 8007c6a:	bf18      	it	ne
 8007c6c:	2001      	movne	r0, #1
 8007c6e:	bd08      	pop	{r3, pc}
 8007c70:	200082c4 	.word	0x200082c4

08007c74 <BSP_SD_GetCardInfo>:
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8007c74:	4601      	mov	r1, r0
 8007c76:	4801      	ldr	r0, [pc, #4]	; (8007c7c <BSP_SD_GetCardInfo+0x8>)
 8007c78:	f7fb be7e 	b.w	8003978 <HAL_SD_GetCardInfo>
 8007c7c:	200082c4 	.word	0x200082c4

08007c80 <BSP_SD_AbortCallback>:
 8007c80:	4770      	bx	lr

08007c82 <HAL_SD_AbortCallback>:
{
 8007c82:	b508      	push	{r3, lr}
  BSP_SD_AbortCallback();
 8007c84:	f7ff fffc 	bl	8007c80 <BSP_SD_AbortCallback>
 8007c88:	bd08      	pop	{r3, pc}

08007c8a <HAL_SD_TxCpltCallback>:
{
 8007c8a:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 8007c8c:	f002 f93a 	bl	8009f04 <BSP_SD_WriteCpltCallback>
 8007c90:	bd08      	pop	{r3, pc}

08007c92 <HAL_SD_RxCpltCallback>:
{
 8007c92:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 8007c94:	f002 f940 	bl	8009f18 <BSP_SD_ReadCpltCallback>
 8007c98:	bd08      	pop	{r3, pc}
	...

08007c9c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8007c9c:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007c9e:	4903      	ldr	r1, [pc, #12]	; (8007cac <MX_FATFS_Init+0x10>)
 8007ca0:	4803      	ldr	r0, [pc, #12]	; (8007cb0 <MX_FATFS_Init+0x14>)
 8007ca2:	f7fe f989 	bl	8005fb8 <FATFS_LinkDriver>
 8007ca6:	4b03      	ldr	r3, [pc, #12]	; (8007cb4 <MX_FATFS_Init+0x18>)
 8007ca8:	7018      	strb	r0, [r3, #0]
 8007caa:	bd08      	pop	{r3, pc}
 8007cac:	2000432d 	.word	0x2000432d
 8007cb0:	0800ce18 	.word	0x0800ce18
 8007cb4:	2000432c 	.word	0x2000432c

08007cb8 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */  
}
 8007cb8:	2000      	movs	r0, #0
 8007cba:	4770      	bx	lr

08007cbc <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8007cbc:	4b03      	ldr	r3, [pc, #12]	; (8007ccc <vApplicationGetIdleTaskMemory+0x10>)
 8007cbe:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8007cc0:	4b03      	ldr	r3, [pc, #12]	; (8007cd0 <vApplicationGetIdleTaskMemory+0x14>)
 8007cc2:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8007cc4:	2380      	movs	r3, #128	; 0x80
 8007cc6:	6013      	str	r3, [r2, #0]
 8007cc8:	4770      	bx	lr
 8007cca:	bf00      	nop
 8007ccc:	20004074 	.word	0x20004074
 8007cd0:	20003e74 	.word	0x20003e74

08007cd4 <swo_printf>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// printf() via SWO
void swo_printf(const char *fmt, ...)
{
 8007cd4:	b40f      	push	{r0, r1, r2, r3}
 8007cd6:	b500      	push	{lr}
 8007cd8:	b0a3      	sub	sp, #140	; 0x8c
 8007cda:	ab24      	add	r3, sp, #144	; 0x90
  char buf[128];
  va_list argp;
  va_start(argp, fmt);
  if (0 < vsnprintf(buf, sizeof(buf), fmt, argp))
 8007cdc:	2180      	movs	r1, #128	; 0x80
{
 8007cde:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(argp, fmt);
 8007ce2:	9301      	str	r3, [sp, #4]
  if (0 < vsnprintf(buf, sizeof(buf), fmt, argp))
 8007ce4:	a802      	add	r0, sp, #8
 8007ce6:	f002 fe45 	bl	800a974 <vsniprintf>
 8007cea:	2800      	cmp	r0, #0
 8007cec:	dd06      	ble.n	8007cfc <swo_printf+0x28>
 8007cee:	f10d 0107 	add.w	r1, sp, #7
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8007cf2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
  {
    for (char *ptr = buf; *ptr; ptr++)
 8007cf6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007cfa:	b922      	cbnz	r2, 8007d06 <swo_printf+0x32>
    {
      ITM_SendChar(*ptr);
    }
  }
  va_end(argp);
}
 8007cfc:	b023      	add	sp, #140	; 0x8c
 8007cfe:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d02:	b004      	add	sp, #16
 8007d04:	4770      	bx	lr
 8007d06:	f8d3 0e80 	ldr.w	r0, [r3, #3712]	; 0xe80
 8007d0a:	07c0      	lsls	r0, r0, #31
 8007d0c:	d5f3      	bpl.n	8007cf6 <swo_printf+0x22>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8007d0e:	f8d3 0e00 	ldr.w	r0, [r3, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8007d12:	07c0      	lsls	r0, r0, #31
 8007d14:	d5ef      	bpl.n	8007cf6 <swo_printf+0x22>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8007d16:	6818      	ldr	r0, [r3, #0]
 8007d18:	b108      	cbz	r0, 8007d1e <swo_printf+0x4a>
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8007d1a:	701a      	strb	r2, [r3, #0]
 8007d1c:	e7eb      	b.n	8007cf6 <swo_printf+0x22>
      __NOP();
 8007d1e:	bf00      	nop
 8007d20:	e7f9      	b.n	8007d16 <swo_printf+0x42>
	...

08007d24 <StartLoggingTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartLoggingTask */
void StartLoggingTask(void const * argument)
{
 8007d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d28:	b0b5      	sub	sp, #212	; 0xd4
  /* init code for FATFS */
  MX_FATFS_Init();
 8007d2a:	f7ff ffb7 	bl	8007c9c <MX_FATFS_Init>
  {
    osDelay(200);

    //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET); // blue LED on

    swo_printf("Init complete\n");
 8007d2e:	4e9f      	ldr	r6, [pc, #636]	; (8007fac <StartLoggingTask+0x288>)

    swo_printf("Attempting to mount micro SD card...\n");
 8007d30:	4f9f      	ldr	r7, [pc, #636]	; (8007fb0 <StartLoggingTask+0x28c>)

    retSD = f_mount(&SDFatFS, "", 1);
    if (retSD != FR_OK)
    {
      swo_printf("Mount failed; error code: %d\n", retSD);
      HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); // red LED on
 8007d32:	4da0      	ldr	r5, [pc, #640]	; (8007fb4 <StartLoggingTask+0x290>)
    osDelay(200);
 8007d34:	20c8      	movs	r0, #200	; 0xc8
 8007d36:	f7fe f99d 	bl	8006074 <osDelay>
    swo_printf("Init complete\n");
 8007d3a:	4630      	mov	r0, r6
 8007d3c:	f7ff ffca 	bl	8007cd4 <swo_printf>
    swo_printf("Attempting to mount micro SD card...\n");
 8007d40:	4638      	mov	r0, r7
 8007d42:	f7ff ffc7 	bl	8007cd4 <swo_printf>
    retSD = f_mount(&SDFatFS, "", 1);
 8007d46:	2201      	movs	r2, #1
 8007d48:	499b      	ldr	r1, [pc, #620]	; (8007fb8 <StartLoggingTask+0x294>)
 8007d4a:	489c      	ldr	r0, [pc, #624]	; (8007fbc <StartLoggingTask+0x298>)
 8007d4c:	f7fd fc18 	bl	8005580 <f_mount>
 8007d50:	4b9b      	ldr	r3, [pc, #620]	; (8007fc0 <StartLoggingTask+0x29c>)
 8007d52:	4604      	mov	r4, r0
 8007d54:	7018      	strb	r0, [r3, #0]
    if (retSD != FR_OK)
 8007d56:	b148      	cbz	r0, 8007d6c <StartLoggingTask+0x48>
      swo_printf("Mount failed; error code: %d\n", retSD);
 8007d58:	4601      	mov	r1, r0
 8007d5a:	489a      	ldr	r0, [pc, #616]	; (8007fc4 <StartLoggingTask+0x2a0>)
 8007d5c:	f7ff ffba 	bl	8007cd4 <swo_printf>
      HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); // red LED on
 8007d60:	2201      	movs	r2, #1
 8007d62:	2140      	movs	r1, #64	; 0x40
 8007d64:	4628      	mov	r0, r5
 8007d66:	f7f9 fd55 	bl	8001814 <HAL_GPIO_WritePin>
    osDelay(200);
 8007d6a:	e7e3      	b.n	8007d34 <StartLoggingTask+0x10>
      continue;
    }

    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); // red LED off
 8007d6c:	4602      	mov	r2, r0
 8007d6e:	2140      	movs	r1, #64	; 0x40
 8007d70:	4890      	ldr	r0, [pc, #576]	; (8007fb4 <StartLoggingTask+0x290>)

    k = 0;
    while (1)
    {
      sprintf(buffer, "%04d", k);
 8007d72:	4d95      	ldr	r5, [pc, #596]	; (8007fc8 <StartLoggingTask+0x2a4>)
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); // red LED off
 8007d74:	f7f9 fd4e 	bl	8001814 <HAL_GPIO_WritePin>
      sprintf(buffer, "%04d", k);
 8007d78:	4622      	mov	r2, r4
 8007d7a:	4629      	mov	r1, r5
 8007d7c:	a814      	add	r0, sp, #80	; 0x50
 8007d7e:	f002 fda9 	bl	800a8d4 <siprintf>
      if (f_stat(buffer, 0) == FR_NO_FILE)
 8007d82:	2100      	movs	r1, #0
 8007d84:	a814      	add	r0, sp, #80	; 0x50
 8007d86:	f7fd fefa 	bl	8005b7e <f_stat>
 8007d8a:	2804      	cmp	r0, #4
 8007d8c:	d001      	beq.n	8007d92 <StartLoggingTask+0x6e>
        if (f_mkdir(buffer) == FR_OK)
        {
          break;
        }
      }
      k++;
 8007d8e:	3401      	adds	r4, #1
      sprintf(buffer, "%04d", k);
 8007d90:	e7f2      	b.n	8007d78 <StartLoggingTask+0x54>
        if (f_mkdir(buffer) == FR_OK)
 8007d92:	a814      	add	r0, sp, #80	; 0x50
 8007d94:	f7fd ff19 	bl	8005bca <f_mkdir>
 8007d98:	2800      	cmp	r0, #0
 8007d9a:	d1f8      	bne.n	8007d8e <StartLoggingTask+0x6a>
    }

    swo_printf("Using path %s\n", buffer);
 8007d9c:	a914      	add	r1, sp, #80	; 0x50
 8007d9e:	488b      	ldr	r0, [pc, #556]	; (8007fcc <StartLoggingTask+0x2a8>)
    f_chdir(buffer);

    swo_printf("Opening log files...\n");

    while (!baro_cal_valid)
 8007da0:	4c8b      	ldr	r4, [pc, #556]	; (8007fd0 <StartLoggingTask+0x2ac>)
    swo_printf("Using path %s\n", buffer);
 8007da2:	f7ff ff97 	bl	8007cd4 <swo_printf>
    f_chdir(buffer);
 8007da6:	a814      	add	r0, sp, #80	; 0x50
 8007da8:	f7fd feb7 	bl	8005b1a <f_chdir>
    swo_printf("Opening log files...\n");
 8007dac:	4889      	ldr	r0, [pc, #548]	; (8007fd4 <StartLoggingTask+0x2b0>)
 8007dae:	f7ff ff91 	bl	8007cd4 <swo_printf>
    while (!baro_cal_valid)
 8007db2:	7823      	ldrb	r3, [r4, #0]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	f000 80ba 	beq.w	8007f2e <StartLoggingTask+0x20a>
    {
      osDelay(1);
    }

    if (f_open(&baro_log, "baro_cal.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE) != FR_OK)
 8007dba:	2213      	movs	r2, #19
 8007dbc:	4986      	ldr	r1, [pc, #536]	; (8007fd8 <StartLoggingTask+0x2b4>)
 8007dbe:	4887      	ldr	r0, [pc, #540]	; (8007fdc <StartLoggingTask+0x2b8>)
 8007dc0:	f7fd fc28 	bl	8005614 <f_open>
 8007dc4:	b138      	cbz	r0, 8007dd6 <StartLoggingTask+0xb2>
    {
      swo_printf("Failed to open baro_cal.txt\n");
 8007dc6:	4886      	ldr	r0, [pc, #536]	; (8007fe0 <StartLoggingTask+0x2bc>)
 8007dc8:	f7ff ff84 	bl	8007cd4 <swo_printf>
      HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); // red LED on
 8007dcc:	2201      	movs	r2, #1
 8007dce:	2140      	movs	r1, #64	; 0x40
 8007dd0:	4878      	ldr	r0, [pc, #480]	; (8007fb4 <StartLoggingTask+0x290>)
 8007dd2:	f7f9 fd1f 	bl	8001814 <HAL_GPIO_WritePin>
    }

    for (int i = 0; i < 8; i++)
    {
      f_printf(&baro_log, "%d\n", baro.c[i]);
 8007dd6:	4f83      	ldr	r7, [pc, #524]	; (8007fe4 <StartLoggingTask+0x2c0>)
 8007dd8:	4e83      	ldr	r6, [pc, #524]	; (8007fe8 <StartLoggingTask+0x2c4>)
 8007dda:	4d80      	ldr	r5, [pc, #512]	; (8007fdc <StartLoggingTask+0x2b8>)
    k = 0;
 8007ddc:	2400      	movs	r4, #0
      f_printf(&baro_log, "%d\n", baro.c[i]);
 8007dde:	f837 2014 	ldrh.w	r2, [r7, r4, lsl #1]
 8007de2:	4631      	mov	r1, r6
 8007de4:	4628      	mov	r0, r5
    for (int i = 0; i < 8; i++)
 8007de6:	3401      	adds	r4, #1
      f_printf(&baro_log, "%d\n", baro.c[i]);
 8007de8:	f7fd ffcb 	bl	8005d82 <f_printf>
    for (int i = 0; i < 8; i++)
 8007dec:	2c08      	cmp	r4, #8
 8007dee:	d1f6      	bne.n	8007dde <StartLoggingTask+0xba>
    }

    f_sync(&baro_log);
 8007df0:	487a      	ldr	r0, [pc, #488]	; (8007fdc <StartLoggingTask+0x2b8>)
 8007df2:	f7fd fe29 	bl	8005a48 <f_sync>
    f_close(&baro_log);
 8007df6:	4879      	ldr	r0, [pc, #484]	; (8007fdc <StartLoggingTask+0x2b8>)
 8007df8:	f7fd fe76 	bl	8005ae8 <f_close>

    if (f_open(&baro_log, "baro_log.csv", FA_OPEN_ALWAYS | FA_READ | FA_WRITE) != FR_OK)
 8007dfc:	2213      	movs	r2, #19
 8007dfe:	497b      	ldr	r1, [pc, #492]	; (8007fec <StartLoggingTask+0x2c8>)
 8007e00:	4876      	ldr	r0, [pc, #472]	; (8007fdc <StartLoggingTask+0x2b8>)
 8007e02:	f7fd fc07 	bl	8005614 <f_open>
 8007e06:	b138      	cbz	r0, 8007e18 <StartLoggingTask+0xf4>
    {
      swo_printf("Failed to open baro_log.csv\n");
 8007e08:	4879      	ldr	r0, [pc, #484]	; (8007ff0 <StartLoggingTask+0x2cc>)
 8007e0a:	f7ff ff63 	bl	8007cd4 <swo_printf>
      HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); // red LED on
 8007e0e:	2201      	movs	r2, #1
 8007e10:	2140      	movs	r1, #64	; 0x40
 8007e12:	4868      	ldr	r0, [pc, #416]	; (8007fb4 <StartLoggingTask+0x290>)
 8007e14:	f7f9 fcfe 	bl	8001814 <HAL_GPIO_WritePin>
    }

    f_puts("time,pressure,temp,raw pressure,raw temp\n", &baro_log);
 8007e18:	4970      	ldr	r1, [pc, #448]	; (8007fdc <StartLoggingTask+0x2b8>)
 8007e1a:	4876      	ldr	r0, [pc, #472]	; (8007ff4 <StartLoggingTask+0x2d0>)
 8007e1c:	f7fd ff9f 	bl	8005d5e <f_puts>

    f_sync(&baro_log);
 8007e20:	486e      	ldr	r0, [pc, #440]	; (8007fdc <StartLoggingTask+0x2b8>)
 8007e22:	f7fd fe11 	bl	8005a48 <f_sync>

    if (f_open(&imu_log, "imu_log.csv", FA_OPEN_ALWAYS | FA_READ | FA_WRITE) != FR_OK)
 8007e26:	2213      	movs	r2, #19
 8007e28:	4973      	ldr	r1, [pc, #460]	; (8007ff8 <StartLoggingTask+0x2d4>)
 8007e2a:	4874      	ldr	r0, [pc, #464]	; (8007ffc <StartLoggingTask+0x2d8>)
 8007e2c:	f7fd fbf2 	bl	8005614 <f_open>
 8007e30:	b138      	cbz	r0, 8007e42 <StartLoggingTask+0x11e>
    {
      swo_printf("Failed to open imu_log.csv\n");
 8007e32:	4873      	ldr	r0, [pc, #460]	; (8008000 <StartLoggingTask+0x2dc>)
 8007e34:	f7ff ff4e 	bl	8007cd4 <swo_printf>
      HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); // red LED on
 8007e38:	2201      	movs	r2, #1
 8007e3a:	2140      	movs	r1, #64	; 0x40
 8007e3c:	485d      	ldr	r0, [pc, #372]	; (8007fb4 <StartLoggingTask+0x290>)
 8007e3e:	f7f9 fce9 	bl	8001814 <HAL_GPIO_WritePin>
    }

    f_puts("time,temp,gx,gy,gz,ax,ay,az\n", &imu_log);
 8007e42:	496e      	ldr	r1, [pc, #440]	; (8007ffc <StartLoggingTask+0x2d8>)
 8007e44:	486f      	ldr	r0, [pc, #444]	; (8008004 <StartLoggingTask+0x2e0>)
 8007e46:	f7fd ff8a 	bl	8005d5e <f_puts>

    f_sync(&imu_log);
 8007e4a:	486c      	ldr	r0, [pc, #432]	; (8007ffc <StartLoggingTask+0x2d8>)
 8007e4c:	f7fd fdfc 	bl	8005a48 <f_sync>

    if (f_open(&mag_log, "mag_log.csv", FA_OPEN_ALWAYS | FA_READ | FA_WRITE) != FR_OK)
 8007e50:	2213      	movs	r2, #19
 8007e52:	496d      	ldr	r1, [pc, #436]	; (8008008 <StartLoggingTask+0x2e4>)
 8007e54:	486d      	ldr	r0, [pc, #436]	; (800800c <StartLoggingTask+0x2e8>)
 8007e56:	f7fd fbdd 	bl	8005614 <f_open>
 8007e5a:	b138      	cbz	r0, 8007e6c <StartLoggingTask+0x148>
    {
      swo_printf("Failed to open mag_log.csv\n");
 8007e5c:	486c      	ldr	r0, [pc, #432]	; (8008010 <StartLoggingTask+0x2ec>)
 8007e5e:	f7ff ff39 	bl	8007cd4 <swo_printf>
      HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); // red LED on
 8007e62:	2201      	movs	r2, #1
 8007e64:	2140      	movs	r1, #64	; 0x40
 8007e66:	4853      	ldr	r0, [pc, #332]	; (8007fb4 <StartLoggingTask+0x290>)
 8007e68:	f7f9 fcd4 	bl	8001814 <HAL_GPIO_WritePin>
    }

    f_puts("time,mx,my,mz\n", &mag_log);
 8007e6c:	4967      	ldr	r1, [pc, #412]	; (800800c <StartLoggingTask+0x2e8>)
 8007e6e:	4869      	ldr	r0, [pc, #420]	; (8008014 <StartLoggingTask+0x2f0>)
 8007e70:	f7fd ff75 	bl	8005d5e <f_puts>

    f_sync(&mag_log);
 8007e74:	4865      	ldr	r0, [pc, #404]	; (800800c <StartLoggingTask+0x2e8>)
 8007e76:	f7fd fde7 	bl	8005a48 <f_sync>

    if (f_open(&gps_log, "gps_log.csv", FA_OPEN_ALWAYS | FA_READ | FA_WRITE) != FR_OK)
 8007e7a:	2213      	movs	r2, #19
 8007e7c:	4966      	ldr	r1, [pc, #408]	; (8008018 <StartLoggingTask+0x2f4>)
 8007e7e:	4867      	ldr	r0, [pc, #412]	; (800801c <StartLoggingTask+0x2f8>)
 8007e80:	f7fd fbc8 	bl	8005614 <f_open>
 8007e84:	b138      	cbz	r0, 8007e96 <StartLoggingTask+0x172>
    {
      swo_printf("Failed to open gps_log.csv\n");
 8007e86:	4866      	ldr	r0, [pc, #408]	; (8008020 <StartLoggingTask+0x2fc>)
 8007e88:	f7ff ff24 	bl	8007cd4 <swo_printf>
      HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); // red LED on
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	2140      	movs	r1, #64	; 0x40
 8007e90:	4848      	ldr	r0, [pc, #288]	; (8007fb4 <StartLoggingTask+0x290>)
 8007e92:	f7f9 fcbf 	bl	8001814 <HAL_GPIO_WritePin>
    }

    f_puts("gps nmea\n", &gps_log);
 8007e96:	4961      	ldr	r1, [pc, #388]	; (800801c <StartLoggingTask+0x2f8>)
 8007e98:	4862      	ldr	r0, [pc, #392]	; (8008024 <StartLoggingTask+0x300>)
 8007e9a:	f7fd ff60 	bl	8005d5e <f_puts>

    f_sync(&gps_log);
 8007e9e:	485f      	ldr	r0, [pc, #380]	; (800801c <StartLoggingTask+0x2f8>)
 8007ea0:	f7fd fdd2 	bl	8005a48 <f_sync>

    if (f_open(&mon_log, "mon_log.csv", FA_OPEN_ALWAYS | FA_READ | FA_WRITE) != FR_OK)
 8007ea4:	2213      	movs	r2, #19
 8007ea6:	4960      	ldr	r1, [pc, #384]	; (8008028 <StartLoggingTask+0x304>)
 8007ea8:	4860      	ldr	r0, [pc, #384]	; (800802c <StartLoggingTask+0x308>)
 8007eaa:	f7fd fbb3 	bl	8005614 <f_open>
 8007eae:	b138      	cbz	r0, 8007ec0 <StartLoggingTask+0x19c>
    {
      swo_printf("Failed to open mon_log.csv\n");
 8007eb0:	485f      	ldr	r0, [pc, #380]	; (8008030 <StartLoggingTask+0x30c>)
 8007eb2:	f7ff ff0f 	bl	8007cd4 <swo_printf>
      HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); // red LED on
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	2140      	movs	r1, #64	; 0x40
 8007eba:	483e      	ldr	r0, [pc, #248]	; (8007fb4 <StartLoggingTask+0x290>)
 8007ebc:	f7f9 fcaa 	bl	8001814 <HAL_GPIO_WritePin>
    }

    f_puts("flight monitor\n", &mon_log);
 8007ec0:	495a      	ldr	r1, [pc, #360]	; (800802c <StartLoggingTask+0x308>)
 8007ec2:	485c      	ldr	r0, [pc, #368]	; (8008034 <StartLoggingTask+0x310>)
    f_sync(&mon_log);

    //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET); // blue LED off

    // flush buffers
    while (uxQueueMessagesWaiting(usart6_rx_queue_handle))
 8007ec4:	4c5c      	ldr	r4, [pc, #368]	; (8008038 <StartLoggingTask+0x314>)
    f_puts("flight monitor\n", &mon_log);
 8007ec6:	f7fd ff4a 	bl	8005d5e <f_puts>
    f_sync(&mon_log);
 8007eca:	4858      	ldr	r0, [pc, #352]	; (800802c <StartLoggingTask+0x308>)
 8007ecc:	f7fd fdbc 	bl	8005a48 <f_sync>
    while (uxQueueMessagesWaiting(usart6_rx_queue_handle))
 8007ed0:	6820      	ldr	r0, [r4, #0]
 8007ed2:	f7ff f90f 	bl	80070f4 <uxQueueMessagesWaiting>
 8007ed6:	bb70      	cbnz	r0, 8007f36 <StartLoggingTask+0x212>
    {
      xQueueReceive(usart6_rx_queue_handle, &ch, 0);
    }

    log_status = 1;
 8007ed8:	4c58      	ldr	r4, [pc, #352]	; (800803c <StartLoggingTask+0x318>)

    while (1)
    {
      // store GPS data
      if (uxQueueMessagesWaiting(gps_log_queue_handle) > 128)
 8007eda:	4f59      	ldr	r7, [pc, #356]	; (8008040 <StartLoggingTask+0x31c>)

          if (f_putc(ch, &gps_log) < 0)
          {
            swo_printf("Fail gps log write\n");
            log_status = 0;
            HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); // red LED on
 8007edc:	4d35      	ldr	r5, [pc, #212]	; (8007fb4 <StartLoggingTask+0x290>)
    log_status = 1;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	7023      	strb	r3, [r4, #0]
 8007ee2:	46b8      	mov	r8, r7
      if (uxQueueMessagesWaiting(gps_log_queue_handle) > 128)
 8007ee4:	6838      	ldr	r0, [r7, #0]
 8007ee6:	f7ff f905 	bl	80070f4 <uxQueueMessagesWaiting>
 8007eea:	2880      	cmp	r0, #128	; 0x80
 8007eec:	d858      	bhi.n	8007fa0 <StartLoggingTask+0x27c>
          HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); // red LED on
        }
      }

      // store baro data
      if (uxQueueMessagesWaiting(baro_log_queue_handle) > 8)
 8007eee:	4e55      	ldr	r6, [pc, #340]	; (8008044 <StartLoggingTask+0x320>)
 8007ef0:	6830      	ldr	r0, [r6, #0]
 8007ef2:	f7ff f8ff 	bl	80070f4 <uxQueueMessagesWaiting>
 8007ef6:	2808      	cmp	r0, #8
 8007ef8:	f200 80e4 	bhi.w	80080c4 <StartLoggingTask+0x3a0>
          HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); // red LED on
        }
      }

      // store IMU data
      if (uxQueueMessagesWaiting(imu_log_queue_handle) > 32)
 8007efc:	4e52      	ldr	r6, [pc, #328]	; (8008048 <StartLoggingTask+0x324>)
 8007efe:	6830      	ldr	r0, [r6, #0]
 8007f00:	f7ff f8f8 	bl	80070f4 <uxQueueMessagesWaiting>
 8007f04:	2820      	cmp	r0, #32
 8007f06:	f200 8123 	bhi.w	8008150 <StartLoggingTask+0x42c>
          HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); // red LED on
        }
      }

      // store magnetometer data
      if (uxQueueMessagesWaiting(mag_log_queue_handle) > 8)
 8007f0a:	4e50      	ldr	r6, [pc, #320]	; (800804c <StartLoggingTask+0x328>)
 8007f0c:	6830      	ldr	r0, [r6, #0]
 8007f0e:	f7ff f8f1 	bl	80070f4 <uxQueueMessagesWaiting>
 8007f12:	2808      	cmp	r0, #8
 8007f14:	f200 8156 	bhi.w	80081c4 <StartLoggingTask+0x4a0>
          HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); // red LED on
        }
      }

      // store flight monitor data
      if (uxQueueMessagesWaiting(mon_log_queue_handle) > 128)
 8007f18:	4e4d      	ldr	r6, [pc, #308]	; (8008050 <StartLoggingTask+0x32c>)
 8007f1a:	6830      	ldr	r0, [r6, #0]
 8007f1c:	f7ff f8ea 	bl	80070f4 <uxQueueMessagesWaiting>
 8007f20:	2880      	cmp	r0, #128	; 0x80
 8007f22:	f200 8182 	bhi.w	800822a <StartLoggingTask+0x506>
          log_status = 0;
          HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); // red LED on
        }
      }

      osDelay(1);
 8007f26:	2001      	movs	r0, #1
 8007f28:	f7fe f8a4 	bl	8006074 <osDelay>
      if (uxQueueMessagesWaiting(gps_log_queue_handle) > 128)
 8007f2c:	e7da      	b.n	8007ee4 <StartLoggingTask+0x1c0>
      osDelay(1);
 8007f2e:	2001      	movs	r0, #1
 8007f30:	f7fe f8a0 	bl	8006074 <osDelay>
 8007f34:	e73d      	b.n	8007db2 <StartLoggingTask+0x8e>
      xQueueReceive(usart6_rx_queue_handle, &ch, 0);
 8007f36:	2200      	movs	r2, #0
 8007f38:	f10d 011b 	add.w	r1, sp, #27
 8007f3c:	6820      	ldr	r0, [r4, #0]
 8007f3e:	f7fe ff25 	bl	8006d8c <xQueueReceive>
 8007f42:	e7c5      	b.n	8007ed0 <StartLoggingTask+0x1ac>
          xQueueReceive(gps_log_queue_handle, &ch, 0);
 8007f44:	2200      	movs	r2, #0
 8007f46:	f10d 011b 	add.w	r1, sp, #27
 8007f4a:	f8d8 0000 	ldr.w	r0, [r8]
 8007f4e:	f7fe ff1d 	bl	8006d8c <xQueueReceive>
          if (f_putc(ch, &gps_log) < 0)
 8007f52:	4649      	mov	r1, r9
 8007f54:	f89d 001b 	ldrb.w	r0, [sp, #27]
 8007f58:	f7fd fef1 	bl	8005d3e <f_putc>
 8007f5c:	2800      	cmp	r0, #0
 8007f5e:	da09      	bge.n	8007f74 <StartLoggingTask+0x250>
            swo_printf("Fail gps log write\n");
 8007f60:	4650      	mov	r0, sl
 8007f62:	f7ff feb7 	bl	8007cd4 <swo_printf>
            log_status = 0;
 8007f66:	2300      	movs	r3, #0
            HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); // red LED on
 8007f68:	2201      	movs	r2, #1
 8007f6a:	2140      	movs	r1, #64	; 0x40
 8007f6c:	4628      	mov	r0, r5
            log_status = 0;
 8007f6e:	7023      	strb	r3, [r4, #0]
            HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); // red LED on
 8007f70:	f7f9 fc50 	bl	8001814 <HAL_GPIO_WritePin>
        while (uxQueueMessagesWaiting(gps_log_queue_handle))
 8007f74:	f8d8 0000 	ldr.w	r0, [r8]
 8007f78:	f7ff f8bc 	bl	80070f4 <uxQueueMessagesWaiting>
 8007f7c:	4606      	mov	r6, r0
 8007f7e:	2800      	cmp	r0, #0
 8007f80:	d1e0      	bne.n	8007f44 <StartLoggingTask+0x220>
        if (f_sync(&gps_log))
 8007f82:	4826      	ldr	r0, [pc, #152]	; (800801c <StartLoggingTask+0x2f8>)
 8007f84:	f7fd fd60 	bl	8005a48 <f_sync>
 8007f88:	2800      	cmp	r0, #0
 8007f8a:	d0b0      	beq.n	8007eee <StartLoggingTask+0x1ca>
          swo_printf("Fail gps log sync\n");
 8007f8c:	4831      	ldr	r0, [pc, #196]	; (8008054 <StartLoggingTask+0x330>)
 8007f8e:	f7ff fea1 	bl	8007cd4 <swo_printf>
          HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); // red LED on
 8007f92:	2201      	movs	r2, #1
 8007f94:	2140      	movs	r1, #64	; 0x40
 8007f96:	4628      	mov	r0, r5
          log_status = 0;
 8007f98:	7026      	strb	r6, [r4, #0]
          HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); // red LED on
 8007f9a:	f7f9 fc3b 	bl	8001814 <HAL_GPIO_WritePin>
 8007f9e:	e7a6      	b.n	8007eee <StartLoggingTask+0x1ca>
          if (f_putc(ch, &gps_log) < 0)
 8007fa0:	f8df 9078 	ldr.w	r9, [pc, #120]	; 800801c <StartLoggingTask+0x2f8>
            swo_printf("Fail gps log write\n");
 8007fa4:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 8008058 <StartLoggingTask+0x334>
 8007fa8:	e7e4      	b.n	8007f74 <StartLoggingTask+0x250>
 8007faa:	bf00      	nop
 8007fac:	0800c944 	.word	0x0800c944
 8007fb0:	0800c953 	.word	0x0800c953
 8007fb4:	40021000 	.word	0x40021000
 8007fb8:	0800cd9b 	.word	0x0800cd9b
 8007fbc:	20004564 	.word	0x20004564
 8007fc0:	2000432c 	.word	0x2000432c
 8007fc4:	0800c979 	.word	0x0800c979
 8007fc8:	0800c997 	.word	0x0800c997
 8007fcc:	0800c99c 	.word	0x0800c99c
 8007fd0:	200040c8 	.word	0x200040c8
 8007fd4:	0800c9ab 	.word	0x0800c9ab
 8007fd8:	0800c9c1 	.word	0x0800c9c1
 8007fdc:	200066c4 	.word	0x200066c4
 8007fe0:	0800c9ce 	.word	0x0800c9ce
 8007fe4:	20006cf0 	.word	0x20006cf0
 8007fe8:	0800c993 	.word	0x0800c993
 8007fec:	0800c9eb 	.word	0x0800c9eb
 8007ff0:	0800c9f8 	.word	0x0800c9f8
 8007ff4:	0800ca15 	.word	0x0800ca15
 8007ff8:	0800ca3f 	.word	0x0800ca3f
 8007ffc:	2000a464 	.word	0x2000a464
 8008000:	0800ca4b 	.word	0x0800ca4b
 8008004:	0800ca67 	.word	0x0800ca67
 8008008:	0800ca84 	.word	0x0800ca84
 800800c:	20004cf0 	.word	0x20004cf0
 8008010:	0800ca90 	.word	0x0800ca90
 8008014:	0800caac 	.word	0x0800caac
 8008018:	0800cabb 	.word	0x0800cabb
 800801c:	2000a0f0 	.word	0x2000a0f0
 8008020:	0800cac7 	.word	0x0800cac7
 8008024:	0800cae3 	.word	0x0800cae3
 8008028:	0800caed 	.word	0x0800caed
 800802c:	200068f8 	.word	0x200068f8
 8008030:	0800caf9 	.word	0x0800caf9
 8008034:	0800cb15 	.word	0x0800cb15
 8008038:	20004cec 	.word	0x20004cec
 800803c:	200040d1 	.word	0x200040d1
 8008040:	20004978 	.word	0x20004978
 8008044:	20004ce8 	.word	0x20004ce8
 8008048:	2000a460 	.word	0x2000a460
 800804c:	20006c6c 	.word	0x20006c6c
 8008050:	20009624 	.word	0x20009624
 8008054:	0800cb39 	.word	0x0800cb39
 8008058:	0800cb25 	.word	0x0800cb25
          xQueueReceive(baro_log_queue_handle, &baro_s, 0);
 800805c:	2200      	movs	r2, #0
 800805e:	a90f      	add	r1, sp, #60	; 0x3c
 8008060:	6830      	ldr	r0, [r6, #0]
 8008062:	f7fe fe93 	bl	8006d8c <xQueueReceive>
          if (f_printf(&baro_log, "%ld,%ld,%ld,%ld,%ld\n", baro_s.time, baro_s.p, baro_s.temp, baro_s.raw_p, baro_s.raw_temp) < 0)
 8008066:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008068:	9302      	str	r3, [sp, #8]
 800806a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800806c:	9301      	str	r3, [sp, #4]
 800806e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008070:	9300      	str	r3, [sp, #0]
 8008072:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008074:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008076:	4651      	mov	r1, sl
 8008078:	4658      	mov	r0, fp
 800807a:	f7fd fe82 	bl	8005d82 <f_printf>
 800807e:	2800      	cmp	r0, #0
 8008080:	da09      	bge.n	8008096 <StartLoggingTask+0x372>
            swo_printf("Fail baro log write\n");
 8008082:	486c      	ldr	r0, [pc, #432]	; (8008234 <StartLoggingTask+0x510>)
 8008084:	f7ff fe26 	bl	8007cd4 <swo_printf>
            log_status = 0;
 8008088:	2300      	movs	r3, #0
            HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); // red LED on
 800808a:	2201      	movs	r2, #1
 800808c:	2140      	movs	r1, #64	; 0x40
 800808e:	4628      	mov	r0, r5
            log_status = 0;
 8008090:	7023      	strb	r3, [r4, #0]
            HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); // red LED on
 8008092:	f7f9 fbbf 	bl	8001814 <HAL_GPIO_WritePin>
        while (uxQueueMessagesWaiting(baro_log_queue_handle))
 8008096:	6830      	ldr	r0, [r6, #0]
 8008098:	f7ff f82c 	bl	80070f4 <uxQueueMessagesWaiting>
 800809c:	4681      	mov	r9, r0
 800809e:	2800      	cmp	r0, #0
 80080a0:	d1dc      	bne.n	800805c <StartLoggingTask+0x338>
        if (f_sync(&baro_log))
 80080a2:	4865      	ldr	r0, [pc, #404]	; (8008238 <StartLoggingTask+0x514>)
 80080a4:	f7fd fcd0 	bl	8005a48 <f_sync>
 80080a8:	2800      	cmp	r0, #0
 80080aa:	f43f af27 	beq.w	8007efc <StartLoggingTask+0x1d8>
          swo_printf("Fail baro log sync\n");
 80080ae:	4863      	ldr	r0, [pc, #396]	; (800823c <StartLoggingTask+0x518>)
 80080b0:	f7ff fe10 	bl	8007cd4 <swo_printf>
          HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); // red LED on
 80080b4:	2201      	movs	r2, #1
 80080b6:	2140      	movs	r1, #64	; 0x40
 80080b8:	4628      	mov	r0, r5
          log_status = 0;
 80080ba:	f884 9000 	strb.w	r9, [r4]
          HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); // red LED on
 80080be:	f7f9 fba9 	bl	8001814 <HAL_GPIO_WritePin>
 80080c2:	e71b      	b.n	8007efc <StartLoggingTask+0x1d8>
          if (f_printf(&baro_log, "%ld,%ld,%ld,%ld,%ld\n", baro_s.time, baro_s.p, baro_s.temp, baro_s.raw_p, baro_s.raw_temp) < 0)
 80080c4:	f8df a198 	ldr.w	sl, [pc, #408]	; 8008260 <StartLoggingTask+0x53c>
 80080c8:	f8df b16c 	ldr.w	fp, [pc, #364]	; 8008238 <StartLoggingTask+0x514>
 80080cc:	e7e3      	b.n	8008096 <StartLoggingTask+0x372>
          xQueueReceive(imu_log_queue_handle, &imu_s, 0);
 80080ce:	2200      	movs	r2, #0
 80080d0:	a90a      	add	r1, sp, #40	; 0x28
 80080d2:	6830      	ldr	r0, [r6, #0]
 80080d4:	f7fe fe5a 	bl	8006d8c <xQueueReceive>
          if (f_printf(&imu_log, "%ld,%d,%d,%d,%d,%d,%d,%d\n", imu_s.time, imu_s.temp, imu_s.gx, imu_s.gy, imu_s.gz, imu_s.ax, imu_s.ay, imu_s.az) < 0)
 80080d8:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 80080dc:	9205      	str	r2, [sp, #20]
 80080de:	f9bd 2036 	ldrsh.w	r2, [sp, #54]	; 0x36
 80080e2:	9204      	str	r2, [sp, #16]
 80080e4:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 80080e8:	9203      	str	r2, [sp, #12]
 80080ea:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 80080ee:	9202      	str	r2, [sp, #8]
 80080f0:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 80080f4:	9201      	str	r2, [sp, #4]
 80080f6:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 80080fa:	9200      	str	r2, [sp, #0]
 80080fc:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8008100:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008102:	4651      	mov	r1, sl
 8008104:	4658      	mov	r0, fp
 8008106:	f7fd fe3c 	bl	8005d82 <f_printf>
 800810a:	2800      	cmp	r0, #0
 800810c:	da09      	bge.n	8008122 <StartLoggingTask+0x3fe>
            swo_printf("Fail imu log write\n");
 800810e:	484c      	ldr	r0, [pc, #304]	; (8008240 <StartLoggingTask+0x51c>)
 8008110:	f7ff fde0 	bl	8007cd4 <swo_printf>
            log_status = 0;
 8008114:	2300      	movs	r3, #0
            HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); // red LED on
 8008116:	2201      	movs	r2, #1
 8008118:	2140      	movs	r1, #64	; 0x40
 800811a:	4628      	mov	r0, r5
            log_status = 0;
 800811c:	7023      	strb	r3, [r4, #0]
            HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); // red LED on
 800811e:	f7f9 fb79 	bl	8001814 <HAL_GPIO_WritePin>
        while (uxQueueMessagesWaiting(imu_log_queue_handle))
 8008122:	6830      	ldr	r0, [r6, #0]
 8008124:	f7fe ffe6 	bl	80070f4 <uxQueueMessagesWaiting>
 8008128:	4681      	mov	r9, r0
 800812a:	2800      	cmp	r0, #0
 800812c:	d1cf      	bne.n	80080ce <StartLoggingTask+0x3aa>
        if (f_sync(&imu_log))
 800812e:	4845      	ldr	r0, [pc, #276]	; (8008244 <StartLoggingTask+0x520>)
 8008130:	f7fd fc8a 	bl	8005a48 <f_sync>
 8008134:	2800      	cmp	r0, #0
 8008136:	f43f aee8 	beq.w	8007f0a <StartLoggingTask+0x1e6>
          swo_printf("Fail imu log sync\n");
 800813a:	4843      	ldr	r0, [pc, #268]	; (8008248 <StartLoggingTask+0x524>)
 800813c:	f7ff fdca 	bl	8007cd4 <swo_printf>
          HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); // red LED on
 8008140:	2201      	movs	r2, #1
 8008142:	2140      	movs	r1, #64	; 0x40
 8008144:	4628      	mov	r0, r5
          log_status = 0;
 8008146:	f884 9000 	strb.w	r9, [r4]
          HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); // red LED on
 800814a:	f7f9 fb63 	bl	8001814 <HAL_GPIO_WritePin>
 800814e:	e6dc      	b.n	8007f0a <StartLoggingTask+0x1e6>
          if (f_printf(&imu_log, "%ld,%d,%d,%d,%d,%d,%d,%d\n", imu_s.time, imu_s.temp, imu_s.gx, imu_s.gy, imu_s.gz, imu_s.ax, imu_s.ay, imu_s.az) < 0)
 8008150:	f8df a110 	ldr.w	sl, [pc, #272]	; 8008264 <StartLoggingTask+0x540>
 8008154:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 8008244 <StartLoggingTask+0x520>
 8008158:	e7e3      	b.n	8008122 <StartLoggingTask+0x3fe>
          xQueueReceive(mag_log_queue_handle, &mag_s, 0);
 800815a:	2200      	movs	r2, #0
 800815c:	a907      	add	r1, sp, #28
 800815e:	6830      	ldr	r0, [r6, #0]
 8008160:	f7fe fe14 	bl	8006d8c <xQueueReceive>
          if (f_printf(&mag_log, "%ld,%d,%d,%d\n", mag_s.time, mag_s.x, mag_s.y, mag_s.z) < 0)
 8008164:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
 8008168:	9201      	str	r2, [sp, #4]
 800816a:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 800816e:	9200      	str	r2, [sp, #0]
 8008170:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8008174:	9a07      	ldr	r2, [sp, #28]
 8008176:	4651      	mov	r1, sl
 8008178:	4658      	mov	r0, fp
 800817a:	f7fd fe02 	bl	8005d82 <f_printf>
 800817e:	2800      	cmp	r0, #0
 8008180:	da09      	bge.n	8008196 <StartLoggingTask+0x472>
            swo_printf("Fail mag log write\n");
 8008182:	4832      	ldr	r0, [pc, #200]	; (800824c <StartLoggingTask+0x528>)
 8008184:	f7ff fda6 	bl	8007cd4 <swo_printf>
            log_status = 0;
 8008188:	2300      	movs	r3, #0
            HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); // red LED on
 800818a:	2201      	movs	r2, #1
 800818c:	2140      	movs	r1, #64	; 0x40
 800818e:	4628      	mov	r0, r5
            log_status = 0;
 8008190:	7023      	strb	r3, [r4, #0]
            HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); // red LED on
 8008192:	f7f9 fb3f 	bl	8001814 <HAL_GPIO_WritePin>
        while (uxQueueMessagesWaiting(mag_log_queue_handle))
 8008196:	6830      	ldr	r0, [r6, #0]
 8008198:	f7fe ffac 	bl	80070f4 <uxQueueMessagesWaiting>
 800819c:	4681      	mov	r9, r0
 800819e:	2800      	cmp	r0, #0
 80081a0:	d1db      	bne.n	800815a <StartLoggingTask+0x436>
        if (f_sync(&mag_log))
 80081a2:	482b      	ldr	r0, [pc, #172]	; (8008250 <StartLoggingTask+0x52c>)
 80081a4:	f7fd fc50 	bl	8005a48 <f_sync>
 80081a8:	2800      	cmp	r0, #0
 80081aa:	f43f aeb5 	beq.w	8007f18 <StartLoggingTask+0x1f4>
          swo_printf("Fail mag log sync\n");
 80081ae:	4829      	ldr	r0, [pc, #164]	; (8008254 <StartLoggingTask+0x530>)
 80081b0:	f7ff fd90 	bl	8007cd4 <swo_printf>
          HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); // red LED on
 80081b4:	2201      	movs	r2, #1
 80081b6:	2140      	movs	r1, #64	; 0x40
 80081b8:	4628      	mov	r0, r5
          log_status = 0;
 80081ba:	f884 9000 	strb.w	r9, [r4]
          HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); // red LED on
 80081be:	f7f9 fb29 	bl	8001814 <HAL_GPIO_WritePin>
 80081c2:	e6a9      	b.n	8007f18 <StartLoggingTask+0x1f4>
          if (f_printf(&mag_log, "%ld,%d,%d,%d\n", mag_s.time, mag_s.x, mag_s.y, mag_s.z) < 0)
 80081c4:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 8008268 <StartLoggingTask+0x544>
 80081c8:	f8df b084 	ldr.w	fp, [pc, #132]	; 8008250 <StartLoggingTask+0x52c>
 80081cc:	e7e3      	b.n	8008196 <StartLoggingTask+0x472>
          xQueueReceive(mon_log_queue_handle, &ch, 0);
 80081ce:	2200      	movs	r2, #0
 80081d0:	f10d 011b 	add.w	r1, sp, #27
 80081d4:	6830      	ldr	r0, [r6, #0]
 80081d6:	f7fe fdd9 	bl	8006d8c <xQueueReceive>
          if (f_putc(ch, &mon_log) < 0)
 80081da:	4651      	mov	r1, sl
 80081dc:	f89d 001b 	ldrb.w	r0, [sp, #27]
 80081e0:	f7fd fdad 	bl	8005d3e <f_putc>
 80081e4:	2800      	cmp	r0, #0
 80081e6:	da09      	bge.n	80081fc <StartLoggingTask+0x4d8>
            swo_printf("Fail mon log write\n");
 80081e8:	4658      	mov	r0, fp
 80081ea:	f7ff fd73 	bl	8007cd4 <swo_printf>
            log_status = 0;
 80081ee:	2300      	movs	r3, #0
            HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); // red LED on
 80081f0:	2201      	movs	r2, #1
 80081f2:	2140      	movs	r1, #64	; 0x40
 80081f4:	4628      	mov	r0, r5
            log_status = 0;
 80081f6:	7023      	strb	r3, [r4, #0]
            HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); // red LED on
 80081f8:	f7f9 fb0c 	bl	8001814 <HAL_GPIO_WritePin>
        while (uxQueueMessagesWaiting(mon_log_queue_handle))
 80081fc:	6830      	ldr	r0, [r6, #0]
 80081fe:	f7fe ff79 	bl	80070f4 <uxQueueMessagesWaiting>
 8008202:	4681      	mov	r9, r0
 8008204:	2800      	cmp	r0, #0
 8008206:	d1e2      	bne.n	80081ce <StartLoggingTask+0x4aa>
        if (f_sync(&mon_log))
 8008208:	4813      	ldr	r0, [pc, #76]	; (8008258 <StartLoggingTask+0x534>)
 800820a:	f7fd fc1d 	bl	8005a48 <f_sync>
 800820e:	2800      	cmp	r0, #0
 8008210:	f43f ae89 	beq.w	8007f26 <StartLoggingTask+0x202>
          swo_printf("Fail mon log sync\n");
 8008214:	4811      	ldr	r0, [pc, #68]	; (800825c <StartLoggingTask+0x538>)
 8008216:	f7ff fd5d 	bl	8007cd4 <swo_printf>
          HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); // red LED on
 800821a:	2201      	movs	r2, #1
 800821c:	2140      	movs	r1, #64	; 0x40
 800821e:	4628      	mov	r0, r5
          log_status = 0;
 8008220:	f884 9000 	strb.w	r9, [r4]
          HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); // red LED on
 8008224:	f7f9 faf6 	bl	8001814 <HAL_GPIO_WritePin>
 8008228:	e67d      	b.n	8007f26 <StartLoggingTask+0x202>
          if (f_putc(ch, &mon_log) < 0)
 800822a:	f8df a02c 	ldr.w	sl, [pc, #44]	; 8008258 <StartLoggingTask+0x534>
            swo_printf("Fail mon log write\n");
 800822e:	f8df b03c 	ldr.w	fp, [pc, #60]	; 800826c <StartLoggingTask+0x548>
 8008232:	e7e3      	b.n	80081fc <StartLoggingTask+0x4d8>
 8008234:	0800cb61 	.word	0x0800cb61
 8008238:	200066c4 	.word	0x200066c4
 800823c:	0800cb76 	.word	0x0800cb76
 8008240:	0800cba4 	.word	0x0800cba4
 8008244:	2000a464 	.word	0x2000a464
 8008248:	0800cbb8 	.word	0x0800cbb8
 800824c:	0800cbd9 	.word	0x0800cbd9
 8008250:	20004cf0 	.word	0x20004cf0
 8008254:	0800cbed 	.word	0x0800cbed
 8008258:	200068f8 	.word	0x200068f8
 800825c:	0800cc14 	.word	0x0800cc14
 8008260:	0800cb4c 	.word	0x0800cb4c
 8008264:	0800cb8a 	.word	0x0800cb8a
 8008268:	0800cbcb 	.word	0x0800cbcb
 800826c:	0800cc00 	.word	0x0800cc00

08008270 <StartSensorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensorTask */
void StartSensorTask(void const * argument)
{
 8008270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  uint8_t baro_state = 0;
  uint32_t baro_next_sample = 0;
  uint32_t baro_next_op = 0;

  osDelay(200);
 8008274:	20c8      	movs	r0, #200	; 0xc8
{
 8008276:	b0a5      	sub	sp, #148	; 0x94
  osDelay(200);
 8008278:	f7fd fefc 	bl	8006074 <osDelay>

  swo_printf("Scan I2C bus (I2C3, main IMU)\n");
 800827c:	48d4      	ldr	r0, [pc, #848]	; (80085d0 <StartSensorTask+0x360>)

  for (int i = 0; i < 256; i+=2)
  {
    if (HAL_I2C_IsDeviceReady(&hi2c3, i, 1, 100) == HAL_OK)
 800827e:	4dd5      	ldr	r5, [pc, #852]	; (80085d4 <StartSensorTask+0x364>)
    {
      swo_printf("Found I2C device at 0x%02x\n", i);
 8008280:	4ed5      	ldr	r6, [pc, #852]	; (80085d8 <StartSensorTask+0x368>)
  swo_printf("Scan I2C bus (I2C3, main IMU)\n");
 8008282:	f7ff fd27 	bl	8007cd4 <swo_printf>
  for (int i = 0; i < 256; i+=2)
 8008286:	2400      	movs	r4, #0
    if (HAL_I2C_IsDeviceReady(&hi2c3, i, 1, 100) == HAL_OK)
 8008288:	2364      	movs	r3, #100	; 0x64
 800828a:	2201      	movs	r2, #1
 800828c:	b2a1      	uxth	r1, r4
 800828e:	4628      	mov	r0, r5
 8008290:	f7f9 ffa4 	bl	80021dc <HAL_I2C_IsDeviceReady>
 8008294:	b918      	cbnz	r0, 800829e <StartSensorTask+0x2e>
      swo_printf("Found I2C device at 0x%02x\n", i);
 8008296:	4621      	mov	r1, r4
 8008298:	4630      	mov	r0, r6
 800829a:	f7ff fd1b 	bl	8007cd4 <swo_printf>
  for (int i = 0; i < 256; i+=2)
 800829e:	3402      	adds	r4, #2
 80082a0:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 80082a4:	d1f0      	bne.n	8008288 <StartSensorTask+0x18>
    }
  }

  swo_printf("Scan I2C bus (I2C2, emulated IMU)\n");
 80082a6:	48cd      	ldr	r0, [pc, #820]	; (80085dc <StartSensorTask+0x36c>)
  I2C_HandleTypeDef *imu_i2c = &hi2c3;
 80082a8:	4cca      	ldr	r4, [pc, #808]	; (80085d4 <StartSensorTask+0x364>)

  for (int i = 0; i < 256; i+=2)
  {
    if (HAL_I2C_IsDeviceReady(&hi2c2, i, 1, 100) == HAL_OK)
 80082aa:	4ecd      	ldr	r6, [pc, #820]	; (80085e0 <StartSensorTask+0x370>)
    {
      swo_printf("Found I2C device at 0x%02x\n", i);
 80082ac:	4fca      	ldr	r7, [pc, #808]	; (80085d8 <StartSensorTask+0x368>)
  swo_printf("Scan I2C bus (I2C2, emulated IMU)\n");
 80082ae:	f7ff fd11 	bl	8007cd4 <swo_printf>
  for (int i = 0; i < 256; i+=2)
 80082b2:	2500      	movs	r5, #0
    if (HAL_I2C_IsDeviceReady(&hi2c2, i, 1, 100) == HAL_OK)
 80082b4:	2364      	movs	r3, #100	; 0x64
 80082b6:	2201      	movs	r2, #1
 80082b8:	b2a9      	uxth	r1, r5
 80082ba:	4630      	mov	r0, r6
 80082bc:	f7f9 ff8e 	bl	80021dc <HAL_I2C_IsDeviceReady>
 80082c0:	b930      	cbnz	r0, 80082d0 <StartSensorTask+0x60>
      swo_printf("Found I2C device at 0x%02x\n", i);
 80082c2:	4629      	mov	r1, r5
 80082c4:	4638      	mov	r0, r7
 80082c6:	f7ff fd05 	bl	8007cd4 <swo_printf>

      if (i == BARO_I2C_ADDR)
      {
        // detected emulated IMU components; use emulated IMU
        imu_i2c = &hi2c2;
 80082ca:	2dee      	cmp	r5, #238	; 0xee
 80082cc:	bf08      	it	eq
 80082ce:	4634      	moveq	r4, r6
  for (int i = 0; i < 256; i+=2)
 80082d0:	3502      	adds	r5, #2
 80082d2:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80082d6:	d1ed      	bne.n	80082b4 <StartSensorTask+0x44>
  }

  swo_printf("Init MS56XX...\n");

  // init barometric pressure sensor
  data[0] = MS56XX_RESET;
 80082d8:	ad24      	add	r5, sp, #144	; 0x90
 80082da:	261e      	movs	r6, #30
  swo_printf("Init MS56XX...\n");
 80082dc:	48c1      	ldr	r0, [pc, #772]	; (80085e4 <StartSensorTask+0x374>)
  osDelay(20);

  for (int k = 0; k < 8; k++)
  {
    HAL_I2C_Mem_Read(imu_i2c, BARO_I2C_ADDR, MS56XX_PROM_READ+(k<<1), 1, data, 2, 100);
    baro.c[k] = data[0] << 8 | data[1];
 80082de:	f8df 930c 	ldr.w	r9, [pc, #780]	; 80085ec <StartSensorTask+0x37c>
    swo_printf("%d\n", baro.c[k]);
 80082e2:	f8df 8320 	ldr.w	r8, [pc, #800]	; 8008604 <StartSensorTask+0x394>
  swo_printf("Init MS56XX...\n");
 80082e6:	f7ff fcf5 	bl	8007cd4 <swo_printf>
  data[0] = MS56XX_RESET;
 80082ea:	f805 6d40 	strb.w	r6, [r5, #-64]!
  HAL_I2C_Master_Transmit(imu_i2c, BARO_I2C_ADDR, data, 1, 100);
 80082ee:	2764      	movs	r7, #100	; 0x64
 80082f0:	2301      	movs	r3, #1
 80082f2:	462a      	mov	r2, r5
 80082f4:	21ee      	movs	r1, #238	; 0xee
 80082f6:	9700      	str	r7, [sp, #0]
 80082f8:	4620      	mov	r0, r4
 80082fa:	f7f9 fd05 	bl	8001d08 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Transmit(imu_i2c, BARO_I2C_ADDR, data, 1, 100);
 80082fe:	2301      	movs	r3, #1
 8008300:	462a      	mov	r2, r5
 8008302:	21ee      	movs	r1, #238	; 0xee
 8008304:	9700      	str	r7, [sp, #0]
 8008306:	4620      	mov	r0, r4
  data[0] = MS56XX_RESET;
 8008308:	f88d 6050 	strb.w	r6, [sp, #80]	; 0x50
  HAL_I2C_Master_Transmit(imu_i2c, BARO_I2C_ADDR, data, 1, 100);
 800830c:	f7f9 fcfc 	bl	8001d08 <HAL_I2C_Master_Transmit>
  osDelay(20);
 8008310:	2014      	movs	r0, #20
 8008312:	f7fd feaf 	bl	8006074 <osDelay>
 8008316:	2600      	movs	r6, #0
    HAL_I2C_Mem_Read(imu_i2c, BARO_I2C_ADDR, MS56XX_PROM_READ+(k<<1), 1, data, 2, 100);
 8008318:	f106 02a0 	add.w	r2, r6, #160	; 0xa0
 800831c:	2302      	movs	r3, #2
 800831e:	9301      	str	r3, [sp, #4]
 8008320:	b292      	uxth	r2, r2
 8008322:	2301      	movs	r3, #1
 8008324:	21ee      	movs	r1, #238	; 0xee
 8008326:	9702      	str	r7, [sp, #8]
 8008328:	9500      	str	r5, [sp, #0]
 800832a:	4620      	mov	r0, r4
 800832c:	f7f9 fe4a 	bl	8001fc4 <HAL_I2C_Mem_Read>
    baro.c[k] = data[0] << 8 | data[1];
 8008330:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8008334:	f89d 1051 	ldrb.w	r1, [sp, #81]	; 0x51
 8008338:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 800833c:	f826 1009 	strh.w	r1, [r6, r9]
    swo_printf("%d\n", baro.c[k]);
 8008340:	4640      	mov	r0, r8
 8008342:	3602      	adds	r6, #2
 8008344:	f7ff fcc6 	bl	8007cd4 <swo_printf>
  for (int k = 0; k < 8; k++)
 8008348:	2e10      	cmp	r6, #16
 800834a:	d1e5      	bne.n	8008318 <StartSensorTask+0xa8>
  }

  baro_cal_valid = 1;
 800834c:	4ba6      	ldr	r3, [pc, #664]	; (80085e8 <StartSensorTask+0x378>)

  if (ms56xx_check_prom_crc(&baro))
 800834e:	48a7      	ldr	r0, [pc, #668]	; (80085ec <StartSensorTask+0x37c>)
  baro_cal_valid = 1;
 8008350:	2201      	movs	r2, #1
 8008352:	701a      	strb	r2, [r3, #0]
  if (ms56xx_check_prom_crc(&baro))
 8008354:	f002 f9b8 	bl	800a6c8 <ms56xx_check_prom_crc>
 8008358:	2800      	cmp	r0, #0
 800835a:	f000 81a1 	beq.w	80086a0 <StartSensorTask+0x430>
  {
    swo_printf("Good CRC\n");
 800835e:	48a4      	ldr	r0, [pc, #656]	; (80085f0 <StartSensorTask+0x380>)

  swo_printf("Init IMU...\n");

  // gryo and accelerometer
  data[0] = 0; // set gyro HPF reference to 0
  HAL_I2C_Mem_Write(imu_i2c, AG_I2C_ADDR, LSM9DS1_AG_REFERENCE_G, 1, data, 1, 100);
 8008360:	2601      	movs	r6, #1
 8008362:	2764      	movs	r7, #100	; 0x64
    swo_printf("CRC check failed\n");
 8008364:	f7ff fcb6 	bl	8007cd4 <swo_printf>
  swo_printf("Init IMU...\n");
 8008368:	48a2      	ldr	r0, [pc, #648]	; (80085f4 <StartSensorTask+0x384>)
  data[0] = 0; // set gyro HPF reference to 0
 800836a:	f04f 0800 	mov.w	r8, #0
  swo_printf("Init IMU...\n");
 800836e:	f7ff fcb1 	bl	8007cd4 <swo_printf>
  HAL_I2C_Mem_Write(imu_i2c, AG_I2C_ADDR, LSM9DS1_AG_REFERENCE_G, 1, data, 1, 100);
 8008372:	4633      	mov	r3, r6
 8008374:	e88d 0060 	stmia.w	sp, {r5, r6}
 8008378:	220b      	movs	r2, #11
 800837a:	21d4      	movs	r1, #212	; 0xd4
 800837c:	9702      	str	r7, [sp, #8]
 800837e:	4620      	mov	r0, r4
  data[0] = 0x78; // ODR_G = 3'b011 (119 sps), FS_G = 2'b11 (2000 dps), BW_G = 2'b00 (14 Hz)
 8008380:	f04f 0a78 	mov.w	sl, #120	; 0x78
  data[0] = 0; // set gyro HPF reference to 0
 8008384:	f88d 8050 	strb.w	r8, [sp, #80]	; 0x50
  HAL_I2C_Mem_Write(imu_i2c, AG_I2C_ADDR, LSM9DS1_AG_REFERENCE_G, 1, data, 1, 100);
 8008388:	f7f9 fd8c 	bl	8001ea4 <HAL_I2C_Mem_Write>
  HAL_I2C_Mem_Write(imu_i2c, AG_I2C_ADDR, LSM9DS1_AG_CTRL_REG1_G, 1, data, 1, 100);
 800838c:	4633      	mov	r3, r6
 800838e:	e88d 00e0 	stmia.w	sp, {r5, r6, r7}
 8008392:	2210      	movs	r2, #16
 8008394:	21d4      	movs	r1, #212	; 0xd4
 8008396:	4620      	mov	r0, r4
  data[0] = 0x78; // ODR_G = 3'b011 (119 sps), FS_G = 2'b11 (2000 dps), BW_G = 2'b00 (14 Hz)
 8008398:	f88d a050 	strb.w	sl, [sp, #80]	; 0x50
  HAL_I2C_Mem_Write(imu_i2c, AG_I2C_ADDR, LSM9DS1_AG_CTRL_REG1_G, 1, data, 1, 100);
 800839c:	f7f9 fd82 	bl	8001ea4 <HAL_I2C_Mem_Write>
  data[0] = 0x00; // INT_SEL = 2'b00 (LPF1), OUT_SEL = 2'b00 (LPF1)
  HAL_I2C_Mem_Write(imu_i2c, AG_I2C_ADDR, LSM9DS1_AG_CTRL_REG2_G, 1, data, 1, 100);
 80083a0:	4633      	mov	r3, r6
 80083a2:	e88d 00e0 	stmia.w	sp, {r5, r6, r7}
 80083a6:	2211      	movs	r2, #17
 80083a8:	21d4      	movs	r1, #212	; 0xd4
 80083aa:	4620      	mov	r0, r4
  data[0] = 0x00; // INT_SEL = 2'b00 (LPF1), OUT_SEL = 2'b00 (LPF1)
 80083ac:	f88d 8050 	strb.w	r8, [sp, #80]	; 0x50
  HAL_I2C_Mem_Write(imu_i2c, AG_I2C_ADDR, LSM9DS1_AG_CTRL_REG2_G, 1, data, 1, 100);
 80083b0:	f7f9 fd78 	bl	8001ea4 <HAL_I2C_Mem_Write>
  data[0] = 0x00; // LP_mode = 1'b0, HP_EN = 1'b0, HPCF_G = 4'b0000
  HAL_I2C_Mem_Write(imu_i2c, AG_I2C_ADDR, LSM9DS1_AG_CTRL_REG3_G, 1, data, 1, 100);
 80083b4:	4633      	mov	r3, r6
 80083b6:	e88d 00e0 	stmia.w	sp, {r5, r6, r7}
 80083ba:	2212      	movs	r2, #18
 80083bc:	21d4      	movs	r1, #212	; 0xd4
 80083be:	4620      	mov	r0, r4
  data[0] = 0x00; // LP_mode = 1'b0, HP_EN = 1'b0, HPCF_G = 4'b0000
 80083c0:	f88d 8050 	strb.w	r8, [sp, #80]	; 0x50
  HAL_I2C_Mem_Write(imu_i2c, AG_I2C_ADDR, LSM9DS1_AG_CTRL_REG3_G, 1, data, 1, 100);
 80083c4:	f7f9 fd6e 	bl	8001ea4 <HAL_I2C_Mem_Write>
  data[0] = 0x00; // SignX_G = 1'b0, SignY_G = 1'b0, SignZ_G = 1'b0, Orient = 3'b000
  HAL_I2C_Mem_Write(imu_i2c, AG_I2C_ADDR, LSM9DS1_AG_ORIENT_CFG_G, 1, data, 1, 100);
 80083c8:	4633      	mov	r3, r6
 80083ca:	e88d 00e0 	stmia.w	sp, {r5, r6, r7}
 80083ce:	2213      	movs	r2, #19
 80083d0:	21d4      	movs	r1, #212	; 0xd4
 80083d2:	4620      	mov	r0, r4
  data[0] = 0x38; // Zen_G = 1'b1, Yen_G = 1'b1, Xen_G = 1'b1, LIR_XL1 = 1'b0, 4D_XL1 = 1'b0
 80083d4:	f04f 0938 	mov.w	r9, #56	; 0x38
  data[0] = 0x00; // SignX_G = 1'b0, SignY_G = 1'b0, SignZ_G = 1'b0, Orient = 3'b000
 80083d8:	f88d 8050 	strb.w	r8, [sp, #80]	; 0x50
  HAL_I2C_Mem_Write(imu_i2c, AG_I2C_ADDR, LSM9DS1_AG_ORIENT_CFG_G, 1, data, 1, 100);
 80083dc:	f7f9 fd62 	bl	8001ea4 <HAL_I2C_Mem_Write>
  HAL_I2C_Mem_Write(imu_i2c, AG_I2C_ADDR, LSM9DS1_AG_CTRL_REG4, 1, data, 1, 100);
 80083e0:	4633      	mov	r3, r6
 80083e2:	e88d 00e0 	stmia.w	sp, {r5, r6, r7}
 80083e6:	221e      	movs	r2, #30
 80083e8:	21d4      	movs	r1, #212	; 0xd4
 80083ea:	4620      	mov	r0, r4
  data[0] = 0x38; // Zen_G = 1'b1, Yen_G = 1'b1, Xen_G = 1'b1, LIR_XL1 = 1'b0, 4D_XL1 = 1'b0
 80083ec:	f88d 9050 	strb.w	r9, [sp, #80]	; 0x50
  HAL_I2C_Mem_Write(imu_i2c, AG_I2C_ADDR, LSM9DS1_AG_CTRL_REG4, 1, data, 1, 100);
 80083f0:	f7f9 fd58 	bl	8001ea4 <HAL_I2C_Mem_Write>
  data[0] = 0x38; // DEC = 2'b00, Zen_XL = 1'b1, Yen_XL = 1'b1, Zen_XL = 1'b1
  HAL_I2C_Mem_Write(imu_i2c, AG_I2C_ADDR, LSM9DS1_AG_CTRL_REG5_XL, 1, data, 1, 100);
 80083f4:	4633      	mov	r3, r6
 80083f6:	e88d 00e0 	stmia.w	sp, {r5, r6, r7}
 80083fa:	221f      	movs	r2, #31
 80083fc:	21d4      	movs	r1, #212	; 0xd4
 80083fe:	4620      	mov	r0, r4
  data[0] = 0x38; // DEC = 2'b00, Zen_XL = 1'b1, Yen_XL = 1'b1, Zen_XL = 1'b1
 8008400:	f88d 9050 	strb.w	r9, [sp, #80]	; 0x50
  HAL_I2C_Mem_Write(imu_i2c, AG_I2C_ADDR, LSM9DS1_AG_CTRL_REG5_XL, 1, data, 1, 100);
 8008404:	f7f9 fd4e 	bl	8001ea4 <HAL_I2C_Mem_Write>
  data[0] = 0x78; // ODR_XL = 3'b011 (119 sps), FS_XL = 2'b11 (8g), BW_SCAL_ODR = 1'b0, BW_XL = 2'b00 (408 Hz)
  HAL_I2C_Mem_Write(imu_i2c, AG_I2C_ADDR, LSM9DS1_AG_CTRL_REG6_XL, 1, data, 1, 100);
 8008408:	4633      	mov	r3, r6
 800840a:	e88d 00e0 	stmia.w	sp, {r5, r6, r7}
 800840e:	2220      	movs	r2, #32
 8008410:	21d4      	movs	r1, #212	; 0xd4
 8008412:	4620      	mov	r0, r4
  data[0] = 0x78; // ODR_XL = 3'b011 (119 sps), FS_XL = 2'b11 (8g), BW_SCAL_ODR = 1'b0, BW_XL = 2'b00 (408 Hz)
 8008414:	f88d a050 	strb.w	sl, [sp, #80]	; 0x50
  HAL_I2C_Mem_Write(imu_i2c, AG_I2C_ADDR, LSM9DS1_AG_CTRL_REG6_XL, 1, data, 1, 100);
 8008418:	f7f9 fd44 	bl	8001ea4 <HAL_I2C_Mem_Write>
  data[0] = 0x00; // HR = 1'b0 (high res off), DCF = 2'b00 (ODR/50), FDS = 1'b0 (filter bypassed), HPIS1 = 1'b0 (filter bypassed)
  HAL_I2C_Mem_Write(imu_i2c, AG_I2C_ADDR, LSM9DS1_AG_CTRL_REG7_XL, 1, data, 1, 100);
 800841c:	4633      	mov	r3, r6
 800841e:	e88d 00e0 	stmia.w	sp, {r5, r6, r7}
 8008422:	2221      	movs	r2, #33	; 0x21
 8008424:	21d4      	movs	r1, #212	; 0xd4
 8008426:	4620      	mov	r0, r4
  data[0] = 0x00; // HR = 1'b0 (high res off), DCF = 2'b00 (ODR/50), FDS = 1'b0 (filter bypassed), HPIS1 = 1'b0 (filter bypassed)
 8008428:	f88d 8050 	strb.w	r8, [sp, #80]	; 0x50
  HAL_I2C_Mem_Write(imu_i2c, AG_I2C_ADDR, LSM9DS1_AG_CTRL_REG7_XL, 1, data, 1, 100);
 800842c:	f7f9 fd3a 	bl	8001ea4 <HAL_I2C_Mem_Write>
  data[0] = 0x04; // BOOT = 1'b0, BDU = 1'b0, H_LACTIVE = 1'b0, PP_OD = 1'b0, SIM = 1'b0, IF_ADD_INC = 1'b1, BLE = 1'b0, SW_RESET = 1'b0
 8008430:	2304      	movs	r3, #4
 8008432:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
  HAL_I2C_Mem_Write(imu_i2c, AG_I2C_ADDR, LSM9DS1_AG_CTRL_REG8, 1, data, 1, 100);
 8008436:	e88d 00e0 	stmia.w	sp, {r5, r6, r7}
 800843a:	4633      	mov	r3, r6
 800843c:	2222      	movs	r2, #34	; 0x22
 800843e:	21d4      	movs	r1, #212	; 0xd4
 8008440:	4620      	mov	r0, r4
 8008442:	f7f9 fd2f 	bl	8001ea4 <HAL_I2C_Mem_Write>
  data[0] = 0x02; // SLEEP_G = 1'b0, FIFO_TEMP_EN = 1'b0, DRDY_mask_bit = 1'b0, I2C_DISABLE = 1'b0, FIFO_EN = 1'b1, STOP_ON_FTH = 1'b0
 8008446:	f04f 0a02 	mov.w	sl, #2
  HAL_I2C_Mem_Write(imu_i2c, AG_I2C_ADDR, LSM9DS1_AG_CTRL_REG9, 1, data, 1, 100);
 800844a:	4633      	mov	r3, r6
 800844c:	e88d 00e0 	stmia.w	sp, {r5, r6, r7}
 8008450:	2223      	movs	r2, #35	; 0x23
 8008452:	21d4      	movs	r1, #212	; 0xd4
 8008454:	4620      	mov	r0, r4
  data[0] = 0x02; // SLEEP_G = 1'b0, FIFO_TEMP_EN = 1'b0, DRDY_mask_bit = 1'b0, I2C_DISABLE = 1'b0, FIFO_EN = 1'b1, STOP_ON_FTH = 1'b0
 8008456:	f88d a050 	strb.w	sl, [sp, #80]	; 0x50
  HAL_I2C_Mem_Write(imu_i2c, AG_I2C_ADDR, LSM9DS1_AG_CTRL_REG9, 1, data, 1, 100);
 800845a:	f7f9 fd23 	bl	8001ea4 <HAL_I2C_Mem_Write>
  data[0] = 0x00; // ST_G = 1'b0, ST_XL = 1'b0
  HAL_I2C_Mem_Write(imu_i2c, AG_I2C_ADDR, LSM9DS1_AG_CTRL_REG10, 1, data, 1, 100);
 800845e:	4633      	mov	r3, r6
 8008460:	e88d 00e0 	stmia.w	sp, {r5, r6, r7}
 8008464:	2224      	movs	r2, #36	; 0x24
 8008466:	21d4      	movs	r1, #212	; 0xd4
 8008468:	4620      	mov	r0, r4
  data[0] = 0x00; // ST_G = 1'b0, ST_XL = 1'b0
 800846a:	f88d 8050 	strb.w	r8, [sp, #80]	; 0x50
  HAL_I2C_Mem_Write(imu_i2c, AG_I2C_ADDR, LSM9DS1_AG_CTRL_REG10, 1, data, 1, 100);
 800846e:	f7f9 fd19 	bl	8001ea4 <HAL_I2C_Mem_Write>
  data[0] = 0xD0; // FMODE = 3'b110, FTH = 5'b10000
 8008472:	23d0      	movs	r3, #208	; 0xd0
 8008474:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
  HAL_I2C_Mem_Write(imu_i2c, AG_I2C_ADDR, LSM9DS1_AG_FIFO_CTRL, 1, data, 1, 100);
 8008478:	e88d 00e0 	stmia.w	sp, {r5, r6, r7}
 800847c:	4633      	mov	r3, r6
 800847e:	222e      	movs	r2, #46	; 0x2e
 8008480:	21d4      	movs	r1, #212	; 0xd4
 8008482:	4620      	mov	r0, r4
 8008484:	f7f9 fd0e 	bl	8001ea4 <HAL_I2C_Mem_Write>

  // magnetometer
  data[0] = 0x00; // OFXM, OFYM, OFZM
  data[1] = 0x00;
  HAL_I2C_Mem_Write(imu_i2c, MAG_I2C_ADDR, LSM9DS1_MAG_OFFSET_X_REG_L_M, 1, data, 2, 100);
 8008488:	4633      	mov	r3, r6
 800848a:	2205      	movs	r2, #5
 800848c:	4649      	mov	r1, r9
 800848e:	9702      	str	r7, [sp, #8]
 8008490:	e88d 0420 	stmia.w	sp, {r5, sl}
 8008494:	4620      	mov	r0, r4
  data[0] = 0x00; // OFXM, OFYM, OFZM
 8008496:	f88d 8050 	strb.w	r8, [sp, #80]	; 0x50
  data[1] = 0x00;
 800849a:	f88d 8051 	strb.w	r8, [sp, #81]	; 0x51
  HAL_I2C_Mem_Write(imu_i2c, MAG_I2C_ADDR, LSM9DS1_MAG_OFFSET_X_REG_L_M, 1, data, 2, 100);
 800849e:	f7f9 fd01 	bl	8001ea4 <HAL_I2C_Mem_Write>
  HAL_I2C_Mem_Write(imu_i2c, MAG_I2C_ADDR, LSM9DS1_MAG_OFFSET_Y_REG_L_M, 1, data, 2, 100);
 80084a2:	4633      	mov	r3, r6
 80084a4:	2207      	movs	r2, #7
 80084a6:	4649      	mov	r1, r9
 80084a8:	9702      	str	r7, [sp, #8]
 80084aa:	e88d 0420 	stmia.w	sp, {r5, sl}
 80084ae:	4620      	mov	r0, r4
 80084b0:	f7f9 fcf8 	bl	8001ea4 <HAL_I2C_Mem_Write>
  HAL_I2C_Mem_Write(imu_i2c, MAG_I2C_ADDR, LSM9DS1_MAG_OFFSET_Z_REG_L_M, 1, data, 2, 100);
 80084b4:	4633      	mov	r3, r6
 80084b6:	2209      	movs	r2, #9
 80084b8:	4649      	mov	r1, r9
 80084ba:	9702      	str	r7, [sp, #8]
 80084bc:	e88d 0420 	stmia.w	sp, {r5, sl}
 80084c0:	4620      	mov	r0, r4
 80084c2:	f7f9 fcef 	bl	8001ea4 <HAL_I2C_Mem_Write>
  data[0] = 0xf0; // TEMP_COMP = 1'b1, OM = 2'b11, DO = 3'b100 (10 sps), FAST_ODR = 1'b0, ST = 1'b0
 80084c6:	23f0      	movs	r3, #240	; 0xf0
 80084c8:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
  HAL_I2C_Mem_Write(imu_i2c, MAG_I2C_ADDR, LSM9DS1_MAG_CTRL_REG1_M, 1, data, 1, 100);
 80084cc:	e88d 00e0 	stmia.w	sp, {r5, r6, r7}
 80084d0:	4633      	mov	r3, r6
 80084d2:	2220      	movs	r2, #32
 80084d4:	4649      	mov	r1, r9
 80084d6:	4620      	mov	r0, r4
 80084d8:	f7f9 fce4 	bl	8001ea4 <HAL_I2C_Mem_Write>
  data[0] = 0x00; // FS = 2'b00, REBOOT = 1'b0, SOFT_RST = 1'b0
  HAL_I2C_Mem_Write(imu_i2c, MAG_I2C_ADDR, LSM9DS1_MAG_CTRL_REG2_M, 1, data, 1, 100);
 80084dc:	4633      	mov	r3, r6
 80084de:	e88d 00e0 	stmia.w	sp, {r5, r6, r7}
 80084e2:	2221      	movs	r2, #33	; 0x21
 80084e4:	4649      	mov	r1, r9
 80084e6:	4620      	mov	r0, r4
  data[0] = 0x00; // FS = 2'b00, REBOOT = 1'b0, SOFT_RST = 1'b0
 80084e8:	f88d 8050 	strb.w	r8, [sp, #80]	; 0x50
  HAL_I2C_Mem_Write(imu_i2c, MAG_I2C_ADDR, LSM9DS1_MAG_CTRL_REG2_M, 1, data, 1, 100);
 80084ec:	f7f9 fcda 	bl	8001ea4 <HAL_I2C_Mem_Write>
  data[0] = 0x00; // I2C_DISABLE = 1'b0, LP = 1'b0, SIM = 1'b0, MD = 2'b00
  HAL_I2C_Mem_Write(imu_i2c, MAG_I2C_ADDR, LSM9DS1_MAG_CTRL_REG3_M, 1, data, 1, 100);
 80084f0:	4633      	mov	r3, r6
 80084f2:	e88d 00e0 	stmia.w	sp, {r5, r6, r7}
 80084f6:	2222      	movs	r2, #34	; 0x22
 80084f8:	4649      	mov	r1, r9
 80084fa:	4620      	mov	r0, r4
  data[0] = 0x00; // I2C_DISABLE = 1'b0, LP = 1'b0, SIM = 1'b0, MD = 2'b00
 80084fc:	f88d 8050 	strb.w	r8, [sp, #80]	; 0x50
  HAL_I2C_Mem_Write(imu_i2c, MAG_I2C_ADDR, LSM9DS1_MAG_CTRL_REG3_M, 1, data, 1, 100);
 8008500:	f7f9 fcd0 	bl	8001ea4 <HAL_I2C_Mem_Write>
  data[0] = 0x0C; // OMZ = 2'b11, BLE = 1'b0
 8008504:	230c      	movs	r3, #12
 8008506:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
  HAL_I2C_Mem_Write(imu_i2c, MAG_I2C_ADDR, LSM9DS1_MAG_CTRL_REG4_M, 1, data, 1, 100);
 800850a:	e88d 00e0 	stmia.w	sp, {r5, r6, r7}
 800850e:	4633      	mov	r3, r6
 8008510:	2223      	movs	r2, #35	; 0x23
 8008512:	4649      	mov	r1, r9
 8008514:	4620      	mov	r0, r4
 8008516:	f7f9 fcc5 	bl	8001ea4 <HAL_I2C_Mem_Write>
  data[0] = 0x00; // FAST_READ = 1'b0, BDU = 1'b0
  HAL_I2C_Mem_Write(imu_i2c, MAG_I2C_ADDR, LSM9DS1_MAG_CTRL_REG5_M, 1, data, 1, 100);
 800851a:	e88d 00e0 	stmia.w	sp, {r5, r6, r7}
 800851e:	4633      	mov	r3, r6
 8008520:	2224      	movs	r2, #36	; 0x24
 8008522:	4649      	mov	r1, r9
 8008524:	4620      	mov	r0, r4
  data[0] = 0x00; // FAST_READ = 1'b0, BDU = 1'b0
 8008526:	f88d 8050 	strb.w	r8, [sp, #80]	; 0x50
  HAL_I2C_Mem_Write(imu_i2c, MAG_I2C_ADDR, LSM9DS1_MAG_CTRL_REG5_M, 1, data, 1, 100);
 800852a:	f7f9 fcbb 	bl	8001ea4 <HAL_I2C_Mem_Write>

  // GPS
  while (uxQueueMessagesWaiting(usart6_rx_queue_handle))
 800852e:	4e32      	ldr	r6, [pc, #200]	; (80085f8 <StartSensorTask+0x388>)
 8008530:	6830      	ldr	r0, [r6, #0]
 8008532:	f7fe fddf 	bl	80070f4 <uxQueueMessagesWaiting>
 8008536:	2800      	cmp	r0, #0
 8008538:	f040 80b4 	bne.w	80086a4 <StartSensorTask+0x434>
 800853c:	2301      	movs	r3, #1
 800853e:	4680      	mov	r8, r0
 8008540:	4683      	mov	fp, r0
 8008542:	4606      	mov	r6, r0
 8008544:	9305      	str	r3, [sp, #20]
  /* Infinite loop */
  while (1)
  {
    // check for IMU data
    // gyro and accelerometer
    HAL_I2C_Mem_Read(imu_i2c, AG_I2C_ADDR, LSM9DS1_AG_FIFO_SRC, 1, data, 1, 100); // FIFO status
 8008546:	2764      	movs	r7, #100	; 0x64
 8008548:	f04f 0a01 	mov.w	sl, #1
 800854c:	4653      	mov	r3, sl
 800854e:	9702      	str	r7, [sp, #8]
 8008550:	e88d 0420 	stmia.w	sp, {r5, sl}
 8008554:	222f      	movs	r2, #47	; 0x2f
 8008556:	21d4      	movs	r1, #212	; 0xd4
 8008558:	4620      	mov	r0, r4
 800855a:	f7f9 fd33 	bl	8001fc4 <HAL_I2C_Mem_Read>
    if (data[0] & 0x3f)
 800855e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8008562:	0698      	lsls	r0, r3, #26
 8008564:	d050      	beq.n	8008608 <StartSensorTask+0x398>
    {
      // data available in FIFO
      // read complete set of data
      imu_s.time = osKernelSysTick();
 8008566:	f7fd fd56 	bl	8006016 <osKernelSysTick>
 800856a:	f10d 0990 	add.w	r9, sp, #144	; 0x90
      HAL_I2C_Mem_Read(imu_i2c, AG_I2C_ADDR, LSM9DS1_AG_OUT_TEMP_L, 1, (uint8_t *)&imu_s.temp, 2, 100);
 800856e:	2302      	movs	r3, #2
      imu_s.time = osKernelSysTick();
 8008570:	f849 0d68 	str.w	r0, [r9, #-104]!
      HAL_I2C_Mem_Read(imu_i2c, AG_I2C_ADDR, LSM9DS1_AG_OUT_TEMP_L, 1, (uint8_t *)&imu_s.temp, 2, 100);
 8008574:	9301      	str	r3, [sp, #4]
 8008576:	ab0b      	add	r3, sp, #44	; 0x2c
 8008578:	9300      	str	r3, [sp, #0]
 800857a:	2215      	movs	r2, #21
 800857c:	4653      	mov	r3, sl
 800857e:	21d4      	movs	r1, #212	; 0xd4
 8008580:	9702      	str	r7, [sp, #8]
 8008582:	4620      	mov	r0, r4
 8008584:	f7f9 fd1e 	bl	8001fc4 <HAL_I2C_Mem_Read>
      imu_s.temp = ((imu_s.temp * 100) >> 4) + 2500; // rescale temp to deg C
 8008588:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
      HAL_I2C_Mem_Read(imu_i2c, AG_I2C_ADDR, LSM9DS1_AG_OUT_X_L_G, 1, (uint8_t *)&imu_s.gx, 2*(3+3), 100);
 800858c:	9702      	str	r7, [sp, #8]
      imu_s.temp = ((imu_s.temp * 100) >> 4) + 2500; // rescale temp to deg C
 800858e:	fb13 f307 	smulbb	r3, r3, r7
 8008592:	111b      	asrs	r3, r3, #4
 8008594:	f603 13c4 	addw	r3, r3, #2500	; 0x9c4
 8008598:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
      HAL_I2C_Mem_Read(imu_i2c, AG_I2C_ADDR, LSM9DS1_AG_OUT_X_L_G, 1, (uint8_t *)&imu_s.gx, 2*(3+3), 100);
 800859c:	230c      	movs	r3, #12
 800859e:	9301      	str	r3, [sp, #4]
 80085a0:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 80085a4:	9300      	str	r3, [sp, #0]
 80085a6:	2218      	movs	r2, #24
 80085a8:	4653      	mov	r3, sl
 80085aa:	21d4      	movs	r1, #212	; 0xd4
 80085ac:	4620      	mov	r0, r4
 80085ae:	f7f9 fd09 	bl	8001fc4 <HAL_I2C_Mem_Read>

      xQueueSend(imu_log_queue_handle, &imu_s, 0);
 80085b2:	4812      	ldr	r0, [pc, #72]	; (80085fc <StartSensorTask+0x38c>)
 80085b4:	2300      	movs	r3, #0
 80085b6:	461a      	mov	r2, r3
 80085b8:	4649      	mov	r1, r9
 80085ba:	6800      	ldr	r0, [r0, #0]
 80085bc:	f7fe fa7a 	bl	8006ab4 <xQueueGenericSend>
      xQueueSend(imu_mon_queue_handle, &imu_s, 0);
 80085c0:	480f      	ldr	r0, [pc, #60]	; (8008600 <StartSensorTask+0x390>)
 80085c2:	2300      	movs	r3, #0
 80085c4:	461a      	mov	r2, r3
 80085c6:	4649      	mov	r1, r9
 80085c8:	6800      	ldr	r0, [r0, #0]
 80085ca:	f7fe fa73 	bl	8006ab4 <xQueueGenericSend>
 80085ce:	e01b      	b.n	8008608 <StartSensorTask+0x398>
 80085d0:	0800cd3e 	.word	0x0800cd3e
 80085d4:	200048a4 	.word	0x200048a4
 80085d8:	0800cd5d 	.word	0x0800cd5d
 80085dc:	0800cd79 	.word	0x0800cd79
 80085e0:	20004c4c 	.word	0x20004c4c
 80085e4:	0800cd9c 	.word	0x0800cd9c
 80085e8:	200040c8 	.word	0x200040c8
 80085ec:	20006cf0 	.word	0x20006cf0
 80085f0:	0800cdac 	.word	0x0800cdac
 80085f4:	0800cdc8 	.word	0x0800cdc8
 80085f8:	20004cec 	.word	0x20004cec
 80085fc:	2000a460 	.word	0x2000a460
 8008600:	20004854 	.word	0x20004854
 8008604:	0800c993 	.word	0x0800c993
    }

    // magnetometer
    HAL_I2C_Mem_Read(imu_i2c, MAG_I2C_ADDR, LSM9DS1_MAG_STATUS_REG_M, 1, data, 1, 100); // status
 8008608:	f04f 0a01 	mov.w	sl, #1
 800860c:	4653      	mov	r3, sl
 800860e:	2138      	movs	r1, #56	; 0x38
 8008610:	9702      	str	r7, [sp, #8]
 8008612:	e88d 0420 	stmia.w	sp, {r5, sl}
 8008616:	2227      	movs	r2, #39	; 0x27
 8008618:	4620      	mov	r0, r4
 800861a:	f7f9 fcd3 	bl	8001fc4 <HAL_I2C_Mem_Read>
    if (data[0] & 0x08)
 800861e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8008622:	0719      	lsls	r1, r3, #28
 8008624:	d517      	bpl.n	8008656 <StartSensorTask+0x3e6>
    {
      // data available
      // read complete set of data
      mag_s.time = osKernelSysTick();
 8008626:	f7fd fcf6 	bl	8006016 <osKernelSysTick>
 800862a:	f10d 0990 	add.w	r9, sp, #144	; 0x90
      HAL_I2C_Mem_Read(imu_i2c, MAG_I2C_ADDR, LSM9DS1_MAG_OUT_X_L_M, 1, (uint8_t *)&mag_s.x, 2*3, 100);
 800862e:	2306      	movs	r3, #6
      mag_s.time = osKernelSysTick();
 8008630:	f849 0d74 	str.w	r0, [r9, #-116]!
      HAL_I2C_Mem_Read(imu_i2c, MAG_I2C_ADDR, LSM9DS1_MAG_OUT_X_L_M, 1, (uint8_t *)&mag_s.x, 2*3, 100);
 8008634:	9301      	str	r3, [sp, #4]
 8008636:	ab08      	add	r3, sp, #32
 8008638:	9300      	str	r3, [sp, #0]
 800863a:	2228      	movs	r2, #40	; 0x28
 800863c:	4653      	mov	r3, sl
 800863e:	2138      	movs	r1, #56	; 0x38
 8008640:	9702      	str	r7, [sp, #8]
 8008642:	4620      	mov	r0, r4
 8008644:	f7f9 fcbe 	bl	8001fc4 <HAL_I2C_Mem_Read>

      xQueueSend(mag_log_queue_handle, &mag_s, 0);
 8008648:	485a      	ldr	r0, [pc, #360]	; (80087b4 <StartSensorTask+0x544>)
 800864a:	2300      	movs	r3, #0
 800864c:	461a      	mov	r2, r3
 800864e:	4649      	mov	r1, r9
 8008650:	6800      	ldr	r0, [r0, #0]
 8008652:	f7fe fa2f 	bl	8006ab4 <xQueueGenericSend>
    }

    // barometer
    if (baro_state == 0)
 8008656:	bb66      	cbnz	r6, 80086b2 <StartSensorTask+0x442>
    {
      // sample pressure
      if (baro_next_sample <= osKernelSysTick())
 8008658:	f7fd fcdd 	bl	8006016 <osKernelSysTick>
 800865c:	4583      	cmp	fp, r0
 800865e:	d813      	bhi.n	8008688 <StartSensorTask+0x418>
      {
        baro_s.time = osKernelSysTick();
 8008660:	f7fd fcd9 	bl	8006016 <osKernelSysTick>
        baro_next_sample += 50;

        data[0] = MS56XX_CONV_D1_4096;
 8008664:	2348      	movs	r3, #72	; 0x48
        baro_s.time = osKernelSysTick();
 8008666:	900f      	str	r0, [sp, #60]	; 0x3c
        data[0] = MS56XX_CONV_D1_4096;
 8008668:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
        HAL_I2C_Master_Transmit(imu_i2c, BARO_I2C_ADDR, data, 1, 100);
 800866c:	462a      	mov	r2, r5
 800866e:	2301      	movs	r3, #1
 8008670:	21ee      	movs	r1, #238	; 0xee
 8008672:	9700      	str	r7, [sp, #0]
 8008674:	4620      	mov	r0, r4
 8008676:	f7f9 fb47 	bl	8001d08 <HAL_I2C_Master_Transmit>

        baro_next_op = osKernelSysTick() + 10;
 800867a:	f7fd fccc 	bl	8006016 <osKernelSysTick>
        baro_next_sample += 50;
 800867e:	f10b 0b32 	add.w	fp, fp, #50	; 0x32
        baro_next_op = osKernelSysTick() + 10;
 8008682:	f100 080a 	add.w	r8, r0, #10
        baro_state = 1;
 8008686:	2601      	movs	r6, #1
    // GPS
    while (uxQueueMessagesWaiting(usart6_rx_queue_handle))
    {
      if (gps_insert_ts)
      {
        sprintf(buffer, "%ld ", osKernelSysTick());
 8008688:	f8df 9144 	ldr.w	r9, [pc, #324]	; 80087d0 <StartSensorTask+0x560>
    while (uxQueueMessagesWaiting(usart6_rx_queue_handle))
 800868c:	4b4a      	ldr	r3, [pc, #296]	; (80087b8 <StartSensorTask+0x548>)
 800868e:	6818      	ldr	r0, [r3, #0]
 8008690:	f7fe fd30 	bl	80070f4 <uxQueueMessagesWaiting>
 8008694:	2800      	cmp	r0, #0
 8008696:	d160      	bne.n	800875a <StartSensorTask+0x4ea>
      xQueueSend(gps_log_queue_handle, data, 0);
      if (data[0] == '\n')
        gps_insert_ts = 1;
    }

    osDelay(1);
 8008698:	2001      	movs	r0, #1
 800869a:	f7fd fceb 	bl	8006074 <osDelay>
    HAL_I2C_Mem_Read(imu_i2c, AG_I2C_ADDR, LSM9DS1_AG_FIFO_SRC, 1, data, 1, 100); // FIFO status
 800869e:	e753      	b.n	8008548 <StartSensorTask+0x2d8>
    swo_printf("CRC check failed\n");
 80086a0:	4846      	ldr	r0, [pc, #280]	; (80087bc <StartSensorTask+0x54c>)
 80086a2:	e65d      	b.n	8008360 <StartSensorTask+0xf0>
    xQueueReceive(usart6_rx_queue_handle, &ch, 0);
 80086a4:	2200      	movs	r2, #0
 80086a6:	f10d 011b 	add.w	r1, sp, #27
 80086aa:	6830      	ldr	r0, [r6, #0]
 80086ac:	f7fe fb6e 	bl	8006d8c <xQueueReceive>
 80086b0:	e73e      	b.n	8008530 <StartSensorTask+0x2c0>
    else if (baro_state == 1)
 80086b2:	2e01      	cmp	r6, #1
 80086b4:	d120      	bne.n	80086f8 <StartSensorTask+0x488>
      if (baro_next_op <= osKernelSysTick())
 80086b6:	f7fd fcae 	bl	8006016 <osKernelSysTick>
 80086ba:	4580      	cmp	r8, r0
 80086bc:	d8e4      	bhi.n	8008688 <StartSensorTask+0x418>
        HAL_I2C_Mem_Read(imu_i2c, BARO_I2C_ADDR, MS56XX_ADC_READ, 1, ((uint8_t *)&baro_s.raw_p)+1, 3, 100);
 80086be:	2303      	movs	r3, #3
 80086c0:	9301      	str	r3, [sp, #4]
 80086c2:	f10d 0349 	add.w	r3, sp, #73	; 0x49
        baro_s.raw_p = 0;
 80086c6:	2200      	movs	r2, #0
        HAL_I2C_Mem_Read(imu_i2c, BARO_I2C_ADDR, MS56XX_ADC_READ, 1, ((uint8_t *)&baro_s.raw_p)+1, 3, 100);
 80086c8:	9300      	str	r3, [sp, #0]
 80086ca:	21ee      	movs	r1, #238	; 0xee
 80086cc:	4633      	mov	r3, r6
 80086ce:	9702      	str	r7, [sp, #8]
 80086d0:	4620      	mov	r0, r4
        baro_s.raw_p = 0;
 80086d2:	9212      	str	r2, [sp, #72]	; 0x48
        HAL_I2C_Mem_Read(imu_i2c, BARO_I2C_ADDR, MS56XX_ADC_READ, 1, ((uint8_t *)&baro_s.raw_p)+1, 3, 100);
 80086d4:	f7f9 fc76 	bl	8001fc4 <HAL_I2C_Mem_Read>
        data[0] = MS56XX_CONV_D2_4096;
 80086d8:	2358      	movs	r3, #88	; 0x58
 80086da:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
        HAL_I2C_Master_Transmit(imu_i2c, BARO_I2C_ADDR, data, 1, 100);
 80086de:	462a      	mov	r2, r5
 80086e0:	4633      	mov	r3, r6
 80086e2:	21ee      	movs	r1, #238	; 0xee
 80086e4:	9700      	str	r7, [sp, #0]
 80086e6:	4620      	mov	r0, r4
 80086e8:	f7f9 fb0e 	bl	8001d08 <HAL_I2C_Master_Transmit>
        baro_next_op = osKernelSysTick() + 10;
 80086ec:	f7fd fc93 	bl	8006016 <osKernelSysTick>
        baro_state = 2;
 80086f0:	2602      	movs	r6, #2
        baro_next_op = osKernelSysTick() + 10;
 80086f2:	f100 080a 	add.w	r8, r0, #10
 80086f6:	e7c7      	b.n	8008688 <StartSensorTask+0x418>
    else if (baro_state == 2)
 80086f8:	2e02      	cmp	r6, #2
 80086fa:	d1c5      	bne.n	8008688 <StartSensorTask+0x418>
      if (baro_next_op <= osKernelSysTick())
 80086fc:	f7fd fc8b 	bl	8006016 <osKernelSysTick>
 8008700:	4580      	cmp	r8, r0
 8008702:	d8c1      	bhi.n	8008688 <StartSensorTask+0x418>
        HAL_I2C_Mem_Read(imu_i2c, BARO_I2C_ADDR, MS56XX_ADC_READ, 1, ((uint8_t *)&baro_s.raw_temp)+1, 3, 100);
 8008704:	2303      	movs	r3, #3
        baro_s.raw_temp = 0;
 8008706:	2600      	movs	r6, #0
        HAL_I2C_Mem_Read(imu_i2c, BARO_I2C_ADDR, MS56XX_ADC_READ, 1, ((uint8_t *)&baro_s.raw_temp)+1, 3, 100);
 8008708:	9301      	str	r3, [sp, #4]
 800870a:	f10d 034d 	add.w	r3, sp, #77	; 0x4d
 800870e:	9300      	str	r3, [sp, #0]
 8008710:	4632      	mov	r2, r6
 8008712:	9702      	str	r7, [sp, #8]
 8008714:	2301      	movs	r3, #1
 8008716:	21ee      	movs	r1, #238	; 0xee
 8008718:	4620      	mov	r0, r4
        baro_s.raw_temp = 0;
 800871a:	9613      	str	r6, [sp, #76]	; 0x4c
        HAL_I2C_Mem_Read(imu_i2c, BARO_I2C_ADDR, MS56XX_ADC_READ, 1, ((uint8_t *)&baro_s.raw_temp)+1, 3, 100);
 800871c:	f7f9 fc52 	bl	8001fc4 <HAL_I2C_Mem_Read>
  \return               Reversed value
 */
__STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
{
#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
  return __builtin_bswap32(value);
 8008720:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008722:	9b13      	ldr	r3, [sp, #76]	; 0x4c
        ms56xx_convert_2(&baro, &baro_s.p, &baro_s.temp);
 8008724:	4826      	ldr	r0, [pc, #152]	; (80087c0 <StartSensorTask+0x550>)
 8008726:	ba12      	rev	r2, r2
        baro_s.raw_p = __REV(baro_s.raw_p);
 8008728:	9212      	str	r2, [sp, #72]	; 0x48
        baro_s.p = baro_s.raw_p;
 800872a:	9210      	str	r2, [sp, #64]	; 0x40
        baro_s.temp = baro_s.raw_temp;
 800872c:	aa24      	add	r2, sp, #144	; 0x90
 800872e:	ba1b      	rev	r3, r3
 8008730:	f842 3d4c 	str.w	r3, [r2, #-76]!
        ms56xx_convert_2(&baro, &baro_s.p, &baro_s.temp);
 8008734:	a910      	add	r1, sp, #64	; 0x40
        baro_s.raw_temp = __REV(baro_s.raw_temp);
 8008736:	9313      	str	r3, [sp, #76]	; 0x4c
        ms56xx_convert_2(&baro, &baro_s.p, &baro_s.temp);
 8008738:	f001 ffd1 	bl	800a6de <ms56xx_convert_2>
        xQueueSend(baro_log_queue_handle, &baro_s, 0);
 800873c:	4821      	ldr	r0, [pc, #132]	; (80087c4 <StartSensorTask+0x554>)
 800873e:	4633      	mov	r3, r6
 8008740:	4632      	mov	r2, r6
 8008742:	a90f      	add	r1, sp, #60	; 0x3c
 8008744:	6800      	ldr	r0, [r0, #0]
 8008746:	f7fe f9b5 	bl	8006ab4 <xQueueGenericSend>
        xQueueSend(baro_mon_queue_handle, &baro_s, 0);
 800874a:	481f      	ldr	r0, [pc, #124]	; (80087c8 <StartSensorTask+0x558>)
 800874c:	4633      	mov	r3, r6
 800874e:	4632      	mov	r2, r6
 8008750:	a90f      	add	r1, sp, #60	; 0x3c
 8008752:	6800      	ldr	r0, [r0, #0]
 8008754:	f7fe f9ae 	bl	8006ab4 <xQueueGenericSend>
 8008758:	e796      	b.n	8008688 <StartSensorTask+0x418>
      if (gps_insert_ts)
 800875a:	9b05      	ldr	r3, [sp, #20]
 800875c:	b9a3      	cbnz	r3, 8008788 <StartSensorTask+0x518>
      xQueueReceive(usart6_rx_queue_handle, data, 0);
 800875e:	4b16      	ldr	r3, [pc, #88]	; (80087b8 <StartSensorTask+0x548>)
 8008760:	2200      	movs	r2, #0
 8008762:	4629      	mov	r1, r5
 8008764:	6818      	ldr	r0, [r3, #0]
 8008766:	f7fe fb11 	bl	8006d8c <xQueueReceive>
      xQueueSend(gps_log_queue_handle, data, 0);
 800876a:	4818      	ldr	r0, [pc, #96]	; (80087cc <StartSensorTask+0x55c>)
 800876c:	2300      	movs	r3, #0
 800876e:	461a      	mov	r2, r3
 8008770:	4629      	mov	r1, r5
 8008772:	6800      	ldr	r0, [r0, #0]
 8008774:	f7fe f99e 	bl	8006ab4 <xQueueGenericSend>
      if (data[0] == '\n')
 8008778:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800877c:	f1a3 020a 	sub.w	r2, r3, #10
 8008780:	4253      	negs	r3, r2
 8008782:	4153      	adcs	r3, r2
 8008784:	9305      	str	r3, [sp, #20]
 8008786:	e781      	b.n	800868c <StartSensorTask+0x41c>
        sprintf(buffer, "%ld ", osKernelSysTick());
 8008788:	f7fd fc45 	bl	8006016 <osKernelSysTick>
 800878c:	4649      	mov	r1, r9
 800878e:	4602      	mov	r2, r0
 8008790:	a81c      	add	r0, sp, #112	; 0x70
 8008792:	f002 f89f 	bl	800a8d4 <siprintf>
 8008796:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
 800879a:	4651      	mov	r1, sl
 800879c:	f10a 0a01 	add.w	sl, sl, #1
        for (char *ptr = buffer; *ptr; ptr++)
 80087a0:	780b      	ldrb	r3, [r1, #0]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d0db      	beq.n	800875e <StartSensorTask+0x4ee>
          xQueueSend(gps_log_queue_handle, ptr, 0);
 80087a6:	4809      	ldr	r0, [pc, #36]	; (80087cc <StartSensorTask+0x55c>)
 80087a8:	2300      	movs	r3, #0
 80087aa:	461a      	mov	r2, r3
 80087ac:	6800      	ldr	r0, [r0, #0]
 80087ae:	f7fe f981 	bl	8006ab4 <xQueueGenericSend>
 80087b2:	e7f2      	b.n	800879a <StartSensorTask+0x52a>
 80087b4:	20006c6c 	.word	0x20006c6c
 80087b8:	20004cec 	.word	0x20004cec
 80087bc:	0800cdb6 	.word	0x0800cdb6
 80087c0:	20006cf0 	.word	0x20006cf0
 80087c4:	20004ce8 	.word	0x20004ce8
 80087c8:	20004850 	.word	0x20004850
 80087cc:	20004978 	.word	0x20004978
 80087d0:	0800cdd5 	.word	0x0800cdd5
 80087d4:	00000000 	.word	0x00000000

080087d8 <StartMonitorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMonitorTask */
void StartMonitorTask(void const * argument)
{
 80087d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087dc:	ed2d 8b0c 	vpush	{d8-d13}
  float imu_alt = 0;

  float baro_raw_alt = 0;
  float baro_pad_alt = 0;
  float baro_alt = 0;
  float baro_vel = 0;
 80087e0:	eddf 8a79 	vldr	s17, [pc, #484]	; 80089c8 <StartMonitorTask+0x1f0>
  float g_scale = 4000;
 80087e4:	eddf ca79 	vldr	s25, [pc, #484]	; 80089cc <StartMonitorTask+0x1f4>
{
 80087e8:	b0b3      	sub	sp, #204	; 0xcc
    {
      xQueueReceive(baro_mon_queue_handle, &baro_s, 0);

      // p = 101325 (1 - 2.25577e-5 * h) ** 5.25588
      // h = (1 - 10 ** (log10(p / 101325) / 5.25588)) / 2.25577e-5
      baro_raw_alt = (1.0 - pow(10, log10(baro_s.p / 101325.0) / 5.25588)) / 2.25577e-5;
 80087ea:	ed9f bb6f 	vldr	d11, [pc, #444]	; 80089a8 <StartMonitorTask+0x1d0>
  uint32_t actuation_clear_time = 0;
 80087ee:	2400      	movs	r4, #0
  long xmit_t = 0;
 80087f0:	46a3      	mov	fp, r4
  long update_t = 0;
 80087f2:	9402      	str	r4, [sp, #8]
  long launch_t = 0;
 80087f4:	9405      	str	r4, [sp, #20]
  float baro_alt = 0;
 80087f6:	eef0 9a68 	vmov.f32	s19, s17
  float baro_pad_alt = 0;
 80087fa:	eeb0 aa68 	vmov.f32	s20, s17
  float baro_raw_alt = 0;
 80087fe:	eef0 aa68 	vmov.f32	s21, s17
  float imu_alt = 0;
 8008802:	eeb0 8a68 	vmov.f32	s16, s17
  float imu_vel = 0;
 8008806:	eeb0 9a68 	vmov.f32	s18, s17
  float imu_accel = 0;
 800880a:	eeb0 ca68 	vmov.f32	s24, s17
  int raw_imu_accel = 0;
 800880e:	46a2      	mov	sl, r4
  uint32_t last_baro_s_time = 0;
 8008810:	9404      	str	r4, [sp, #16]
  uint32_t last_imu_s_time = 0;
 8008812:	9403      	str	r4, [sp, #12]
    while (uxQueueMessagesWaiting(imu_mon_queue_handle))
 8008814:	4e6e      	ldr	r6, [pc, #440]	; (80089d0 <StartMonitorTask+0x1f8>)
 8008816:	4d6f      	ldr	r5, [pc, #444]	; (80089d4 <StartMonitorTask+0x1fc>)
 8008818:	6830      	ldr	r0, [r6, #0]
 800881a:	f7fe fc6b 	bl	80070f4 <uxQueueMessagesWaiting>
 800881e:	2800      	cmp	r0, #0
 8008820:	f000 816f 	beq.w	8008b02 <StartMonitorTask+0x32a>
      xQueueReceive(imu_mon_queue_handle, &imu_s, 0);
 8008824:	6830      	ldr	r0, [r6, #0]
 8008826:	2200      	movs	r2, #0
 8008828:	a906      	add	r1, sp, #24
 800882a:	f7fe faaf 	bl	8006d8c <xQueueReceive>
      if (fm_state == FM_STATE_PAD)
 800882e:	782e      	ldrb	r6, [r5, #0]
 8008830:	4b69      	ldr	r3, [pc, #420]	; (80089d8 <StartMonitorTask+0x200>)
 8008832:	b92e      	cbnz	r6, 8008840 <StartMonitorTask+0x68>
        if (imu_s.ax > 2000)
 8008834:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
 8008838:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 800883c:	dd08      	ble.n	8008850 <StartMonitorTask+0x78>
          fm_orientation = FM_ORIENTATION_PLUS_X;
 800883e:	701e      	strb	r6, [r3, #0]
      switch (fm_orientation)
 8008840:	781b      	ldrb	r3, [r3, #0]
 8008842:	2b05      	cmp	r3, #5
 8008844:	d824      	bhi.n	8008890 <StartMonitorTask+0xb8>
 8008846:	e8df f003 	tbb	[pc, r3]
 800884a:	6321      	.short	0x6321
 800884c:	716e6b68 	.word	0x716e6b68
        else if (imu_s.ax < -2000)
 8008850:	f512 6ffa 	cmn.w	r2, #2000	; 0x7d0
 8008854:	da02      	bge.n	800885c <StartMonitorTask+0x84>
          fm_orientation = FM_ORIENTATION_MINUS_X;
 8008856:	2201      	movs	r2, #1
          fm_orientation = FM_ORIENTATION_MINUS_Z;
 8008858:	701a      	strb	r2, [r3, #0]
 800885a:	e7f1      	b.n	8008840 <StartMonitorTask+0x68>
        else if (imu_s.ay > 2000)
 800885c:	f9bd 2026 	ldrsh.w	r2, [sp, #38]	; 0x26
 8008860:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 8008864:	dd01      	ble.n	800886a <StartMonitorTask+0x92>
          fm_orientation = FM_ORIENTATION_PLUS_Y;
 8008866:	2202      	movs	r2, #2
 8008868:	e7f6      	b.n	8008858 <StartMonitorTask+0x80>
        else if (imu_s.ay < -2000)
 800886a:	f512 6ffa 	cmn.w	r2, #2000	; 0x7d0
 800886e:	da01      	bge.n	8008874 <StartMonitorTask+0x9c>
          fm_orientation = FM_ORIENTATION_MINUS_Y;
 8008870:	2203      	movs	r2, #3
 8008872:	e7f1      	b.n	8008858 <StartMonitorTask+0x80>
        else if (imu_s.az > 2000)
 8008874:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8008878:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 800887c:	dd01      	ble.n	8008882 <StartMonitorTask+0xaa>
          fm_orientation = FM_ORIENTATION_PLUS_Z;
 800887e:	2204      	movs	r2, #4
 8008880:	e7ea      	b.n	8008858 <StartMonitorTask+0x80>
        else if (imu_s.az < -2000)
 8008882:	f512 6ffa 	cmn.w	r2, #2000	; 0x7d0
 8008886:	dadb      	bge.n	8008840 <StartMonitorTask+0x68>
          fm_orientation = FM_ORIENTATION_MINUS_Z;
 8008888:	2205      	movs	r2, #5
 800888a:	e7e5      	b.n	8008858 <StartMonitorTask+0x80>
          raw_imu_accel = imu_s.ax;
 800888c:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
      imu_accel = ((raw_imu_accel/g_scale) - 1) * 9.81;
 8008890:	ee07 aa90 	vmov	s15, sl
 8008894:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008898:	ee87 7aac 	vdiv.f32	s14, s15, s25
 800889c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80088a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80088a4:	ee17 0a90 	vmov	r0, s15
 80088a8:	f7f7 fe46 	bl	8000538 <__aeabi_f2d>
 80088ac:	a340      	add	r3, pc, #256	; (adr r3, 80089b0 <StartMonitorTask+0x1d8>)
 80088ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b2:	f7f7 fe95 	bl	80005e0 <__aeabi_dmul>
 80088b6:	f7f8 f943 	bl	8000b40 <__aeabi_d2f>
 80088ba:	9d06      	ldr	r5, [sp, #24]
 80088bc:	ee0c 0a10 	vmov	s24, r0
      switch (fm_state)
 80088c0:	bbbe      	cbnz	r6, 8008932 <StartMonitorTask+0x15a>
          if (raw_imu_accel > 3600 && raw_imu_accel < 4400)
 80088c2:	f46f 6361 	mvn.w	r3, #3600	; 0xe10
 80088c6:	eb0a 0203 	add.w	r2, sl, r3
 80088ca:	f240 331e 	movw	r3, #798	; 0x31e
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d81c      	bhi.n	800890c <StartMonitorTask+0x134>
            g_scale = g_scale * 0.999 + raw_imu_accel * 0.001;
 80088d2:	4650      	mov	r0, sl
 80088d4:	f7f7 fe1e 	bl	8000514 <__aeabi_i2d>
 80088d8:	a337      	add	r3, pc, #220	; (adr r3, 80089b8 <StartMonitorTask+0x1e0>)
 80088da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088de:	f7f7 fe7f 	bl	80005e0 <__aeabi_dmul>
 80088e2:	4606      	mov	r6, r0
 80088e4:	ee1c 0a90 	vmov	r0, s25
 80088e8:	460f      	mov	r7, r1
 80088ea:	f7f7 fe25 	bl	8000538 <__aeabi_f2d>
 80088ee:	a334      	add	r3, pc, #208	; (adr r3, 80089c0 <StartMonitorTask+0x1e8>)
 80088f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f4:	f7f7 fe74 	bl	80005e0 <__aeabi_dmul>
 80088f8:	4602      	mov	r2, r0
 80088fa:	460b      	mov	r3, r1
 80088fc:	4630      	mov	r0, r6
 80088fe:	4639      	mov	r1, r7
 8008900:	f7f7 fcbc 	bl	800027c <__adddf3>
 8008904:	f7f8 f91c 	bl	8000b40 <__aeabi_d2f>
 8008908:	ee0c 0a90 	vmov	s25, r0
      last_imu_s_time = imu_s.time;
 800890c:	9503      	str	r5, [sp, #12]
 800890e:	e781      	b.n	8008814 <StartMonitorTask+0x3c>
          raw_imu_accel = -imu_s.ax;
 8008910:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
          raw_imu_accel = -imu_s.az;
 8008914:	f1ca 0a00 	rsb	sl, sl, #0
          break;
 8008918:	e7ba      	b.n	8008890 <StartMonitorTask+0xb8>
          raw_imu_accel = imu_s.ay;
 800891a:	f9bd a026 	ldrsh.w	sl, [sp, #38]	; 0x26
          break;
 800891e:	e7b7      	b.n	8008890 <StartMonitorTask+0xb8>
          raw_imu_accel = -imu_s.ay;
 8008920:	f9bd a026 	ldrsh.w	sl, [sp, #38]	; 0x26
 8008924:	e7f6      	b.n	8008914 <StartMonitorTask+0x13c>
          raw_imu_accel = imu_s.az;
 8008926:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
          break;
 800892a:	e7b1      	b.n	8008890 <StartMonitorTask+0xb8>
          raw_imu_accel = -imu_s.az;
 800892c:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 8008930:	e7f0      	b.n	8008914 <StartMonitorTask+0x13c>
          imu_vel = imu_vel + imu_accel * ((imu_s.time - last_imu_s_time)*0.001);
 8008932:	9b03      	ldr	r3, [sp, #12]
 8008934:	1ae8      	subs	r0, r5, r3
 8008936:	f7f7 fddd 	bl	80004f4 <__aeabi_ui2d>
 800893a:	a31f      	add	r3, pc, #124	; (adr r3, 80089b8 <StartMonitorTask+0x1e0>)
 800893c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008940:	f7f7 fe4e 	bl	80005e0 <__aeabi_dmul>
 8008944:	4606      	mov	r6, r0
 8008946:	460f      	mov	r7, r1
 8008948:	ee1c 0a10 	vmov	r0, s24
 800894c:	f7f7 fdf4 	bl	8000538 <__aeabi_f2d>
 8008950:	4632      	mov	r2, r6
 8008952:	463b      	mov	r3, r7
 8008954:	f7f7 fe44 	bl	80005e0 <__aeabi_dmul>
 8008958:	4680      	mov	r8, r0
 800895a:	ee19 0a10 	vmov	r0, s18
 800895e:	4689      	mov	r9, r1
 8008960:	f7f7 fdea 	bl	8000538 <__aeabi_f2d>
 8008964:	4602      	mov	r2, r0
 8008966:	460b      	mov	r3, r1
 8008968:	4640      	mov	r0, r8
 800896a:	4649      	mov	r1, r9
 800896c:	f7f7 fc86 	bl	800027c <__adddf3>
 8008970:	f7f8 f8e6 	bl	8000b40 <__aeabi_d2f>
 8008974:	ee09 0a10 	vmov	s18, r0
          imu_alt = imu_alt + imu_vel * ((imu_s.time - last_imu_s_time)*0.001);
 8008978:	f7f7 fdde 	bl	8000538 <__aeabi_f2d>
 800897c:	4632      	mov	r2, r6
 800897e:	463b      	mov	r3, r7
 8008980:	f7f7 fe2e 	bl	80005e0 <__aeabi_dmul>
 8008984:	4606      	mov	r6, r0
 8008986:	ee18 0a10 	vmov	r0, s16
 800898a:	460f      	mov	r7, r1
 800898c:	f7f7 fdd4 	bl	8000538 <__aeabi_f2d>
 8008990:	4602      	mov	r2, r0
 8008992:	460b      	mov	r3, r1
 8008994:	4630      	mov	r0, r6
 8008996:	4639      	mov	r1, r7
 8008998:	f7f7 fc70 	bl	800027c <__adddf3>
 800899c:	f7f8 f8d0 	bl	8000b40 <__aeabi_d2f>
 80089a0:	ee08 0a10 	vmov	s16, r0
          break;
 80089a4:	e7b2      	b.n	800890c <StartMonitorTask+0x134>
 80089a6:	bf00      	nop
 80089a8:	00000000 	.word	0x00000000
 80089ac:	40240000 	.word	0x40240000
 80089b0:	51eb851f 	.word	0x51eb851f
 80089b4:	40239eb8 	.word	0x40239eb8
 80089b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80089bc:	3f50624d 	.word	0x3f50624d
 80089c0:	d916872b 	.word	0xd916872b
 80089c4:	3feff7ce 	.word	0x3feff7ce
 80089c8:	00000000 	.word	0x00000000
 80089cc:	457a0000 	.word	0x457a0000
 80089d0:	20004854 	.word	0x20004854
 80089d4:	200040d0 	.word	0x200040d0
 80089d8:	2000000d 	.word	0x2000000d
      xQueueReceive(baro_mon_queue_handle, &baro_s, 0);
 80089dc:	2200      	movs	r2, #0
 80089de:	a90b      	add	r1, sp, #44	; 0x2c
 80089e0:	6830      	ldr	r0, [r6, #0]
 80089e2:	f7fe f9d3 	bl	8006d8c <xQueueReceive>
      baro_raw_alt = (1.0 - pow(10, log10(baro_s.p / 101325.0) / 5.25588)) / 2.25577e-5;
 80089e6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80089e8:	f7f7 fd94 	bl	8000514 <__aeabi_i2d>
 80089ec:	a386      	add	r3, pc, #536	; (adr r3, 8008c08 <StartMonitorTask+0x430>)
 80089ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f2:	f7f7 ff1f 	bl	8000834 <__aeabi_ddiv>
 80089f6:	ec41 0b10 	vmov	d0, r0, r1
 80089fa:	f002 fbb7 	bl	800b16c <log10>
 80089fe:	a384      	add	r3, pc, #528	; (adr r3, 8008c10 <StartMonitorTask+0x438>)
 8008a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a04:	ec51 0b10 	vmov	r0, r1, d0
 8008a08:	f7f7 ff14 	bl	8000834 <__aeabi_ddiv>
 8008a0c:	eeb0 0a4b 	vmov.f32	s0, s22
 8008a10:	eef0 0a6b 	vmov.f32	s1, s23
 8008a14:	ec41 0b11 	vmov	d1, r0, r1
 8008a18:	f002 fc28 	bl	800b26c <pow>
 8008a1c:	2000      	movs	r0, #0
 8008a1e:	ec53 2b10 	vmov	r2, r3, d0
 8008a22:	4971      	ldr	r1, [pc, #452]	; (8008be8 <StartMonitorTask+0x410>)
 8008a24:	f7f7 fc28 	bl	8000278 <__aeabi_dsub>
 8008a28:	a365      	add	r3, pc, #404	; (adr r3, 8008bc0 <StartMonitorTask+0x3e8>)
 8008a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a2e:	f7f7 ff01 	bl	8000834 <__aeabi_ddiv>
 8008a32:	f7f8 f885 	bl	8000b40 <__aeabi_d2f>
 8008a36:	ee0a 0a90 	vmov	s21, r0
      baro_vel = baro_vel * 0.95 + ((baro_raw_alt - baro_pad_alt - baro_alt) / ((baro_s.time - last_baro_s_time)*0.001)) * 0.05;
 8008a3a:	ee3a daca 	vsub.f32	s26, s21, s20
 8008a3e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008a40:	ee7d 7a69 	vsub.f32	s15, s26, s19
 8008a44:	ee17 0a90 	vmov	r0, s15
 8008a48:	f7f7 fd76 	bl	8000538 <__aeabi_f2d>
 8008a4c:	9b04      	ldr	r3, [sp, #16]
 8008a4e:	4680      	mov	r8, r0
 8008a50:	1af0      	subs	r0, r6, r3
 8008a52:	4689      	mov	r9, r1
 8008a54:	f7f7 fd4e 	bl	80004f4 <__aeabi_ui2d>
 8008a58:	a35b      	add	r3, pc, #364	; (adr r3, 8008bc8 <StartMonitorTask+0x3f0>)
 8008a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a5e:	f7f7 fdbf 	bl	80005e0 <__aeabi_dmul>
 8008a62:	4602      	mov	r2, r0
 8008a64:	460b      	mov	r3, r1
 8008a66:	4640      	mov	r0, r8
 8008a68:	4649      	mov	r1, r9
 8008a6a:	f7f7 fee3 	bl	8000834 <__aeabi_ddiv>
 8008a6e:	a358      	add	r3, pc, #352	; (adr r3, 8008bd0 <StartMonitorTask+0x3f8>)
 8008a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a74:	f7f7 fdb4 	bl	80005e0 <__aeabi_dmul>
 8008a78:	4680      	mov	r8, r0
 8008a7a:	ee18 0a90 	vmov	r0, s17
 8008a7e:	4689      	mov	r9, r1
 8008a80:	f7f7 fd5a 	bl	8000538 <__aeabi_f2d>
 8008a84:	a354      	add	r3, pc, #336	; (adr r3, 8008bd8 <StartMonitorTask+0x400>)
 8008a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a8a:	f7f7 fda9 	bl	80005e0 <__aeabi_dmul>
 8008a8e:	460b      	mov	r3, r1
 8008a90:	4602      	mov	r2, r0
 8008a92:	4649      	mov	r1, r9
 8008a94:	4640      	mov	r0, r8
 8008a96:	f7f7 fbf1 	bl	800027c <__adddf3>
 8008a9a:	f7f8 f851 	bl	8000b40 <__aeabi_d2f>
      baro_alt = baro_raw_alt - baro_pad_alt;

      switch (fm_state)
 8008a9e:	782b      	ldrb	r3, [r5, #0]
      baro_vel = baro_vel * 0.95 + ((baro_raw_alt - baro_pad_alt - baro_alt) / ((baro_s.time - last_baro_s_time)*0.001)) * 0.05;
 8008aa0:	ee08 0a90 	vmov	s17, r0
      switch (fm_state)
 8008aa4:	bb53      	cbnz	r3, 8008afc <StartMonitorTask+0x324>
      {
        case FM_STATE_PAD:
          baro_pad_alt = baro_pad_alt * 0.999 + baro_raw_alt * 0.001;
 8008aa6:	ee1a 0a10 	vmov	r0, s20
 8008aaa:	f7f7 fd45 	bl	8000538 <__aeabi_f2d>
 8008aae:	a34c      	add	r3, pc, #304	; (adr r3, 8008be0 <StartMonitorTask+0x408>)
 8008ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab4:	f7f7 fd94 	bl	80005e0 <__aeabi_dmul>
 8008ab8:	4680      	mov	r8, r0
 8008aba:	ee1a 0a90 	vmov	r0, s21
 8008abe:	4689      	mov	r9, r1
 8008ac0:	f7f7 fd3a 	bl	8000538 <__aeabi_f2d>
 8008ac4:	a340      	add	r3, pc, #256	; (adr r3, 8008bc8 <StartMonitorTask+0x3f0>)
 8008ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aca:	f7f7 fd89 	bl	80005e0 <__aeabi_dmul>
 8008ace:	460b      	mov	r3, r1
 8008ad0:	4602      	mov	r2, r0
 8008ad2:	4649      	mov	r1, r9
 8008ad4:	4640      	mov	r0, r8
 8008ad6:	f7f7 fbd1 	bl	800027c <__adddf3>
 8008ada:	f7f8 f831 	bl	8000b40 <__aeabi_d2f>
 8008ade:	ee0a 0a10 	vmov	s20, r0

          if (abs(baro_pad_alt - baro_raw_alt) > 25)
 8008ae2:	ee7a 7a6a 	vsub.f32	s15, s20, s21
 8008ae6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008aea:	ee17 3a90 	vmov	r3, s15
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	bfb8      	it	lt
 8008af2:	425b      	neglt	r3, r3
          {
            baro_pad_alt = baro_raw_alt;
 8008af4:	2b1a      	cmp	r3, #26
 8008af6:	bfa8      	it	ge
 8008af8:	eeb0 aa6a 	vmovge.f32	s20, s21
 8008afc:	eef0 9a4d 	vmov.f32	s19, s26
 8008b00:	9604      	str	r6, [sp, #16]
    while (uxQueueMessagesWaiting(baro_mon_queue_handle))
 8008b02:	4e3a      	ldr	r6, [pc, #232]	; (8008bec <StartMonitorTask+0x414>)
 8008b04:	6830      	ldr	r0, [r6, #0]
 8008b06:	f7fe faf5 	bl	80070f4 <uxQueueMessagesWaiting>
 8008b0a:	2800      	cmp	r0, #0
 8008b0c:	f47f af66 	bne.w	80089dc <StartMonitorTask+0x204>

      last_baro_s_time = baro_s.time;
    }

    // monitor flight status
    switch (fm_state)
 8008b10:	782b      	ldrb	r3, [r5, #0]
 8008b12:	2b05      	cmp	r3, #5
 8008b14:	f200 80a4 	bhi.w	8008c60 <StartMonitorTask+0x488>
 8008b18:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008b1c:	007e0006 	.word	0x007e0006
 8008b20:	03250302 	.word	0x03250302
 8008b24:	03c10373 	.word	0x03c10373
        // on launch pad
        imu_vel = 0;
        imu_alt = 0;

        // detect launch
        if (fm_armed && imu_accel > 10 && baro_vel > 2)
 8008b28:	4b31      	ldr	r3, [pc, #196]	; (8008bf0 <StartMonitorTask+0x418>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d035      	beq.n	8008b9c <StartMonitorTask+0x3c4>
 8008b30:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8008b34:	eeb4 cae7 	vcmpe.f32	s24, s15
 8008b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b3c:	dd2e      	ble.n	8008b9c <StartMonitorTask+0x3c4>
 8008b3e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8008b42:	eef4 8ae7 	vcmpe.f32	s17, s15
 8008b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b4a:	dd27      	ble.n	8008b9c <StartMonitorTask+0x3c4>
        {
          launch_t = osKernelSysTick();
 8008b4c:	f7fd fa63 	bl	8006016 <osKernelSysTick>
          fm_state = FM_STATE_ASCENT_1;
 8008b50:	2301      	movs	r3, #1
 8008b52:	702b      	strb	r3, [r5, #0]
          launch_t = osKernelSysTick();
 8008b54:	9005      	str	r0, [sp, #20]

          sprintf(buffer, "%ld launch detected\n", osKernelSysTick());
 8008b56:	f7fd fa5e 	bl	8006016 <osKernelSysTick>
 8008b5a:	4926      	ldr	r1, [pc, #152]	; (8008bf4 <StartMonitorTask+0x41c>)
          swo_printf("%s", buffer);
          for (char *ptr = buffer; *ptr; ptr++)
            xQueueSend(mon_log_queue_handle, ptr, 0);
 8008b5c:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8008c00 <StartMonitorTask+0x428>
          sprintf(buffer, "%ld launch detected\n", osKernelSysTick());
 8008b60:	4602      	mov	r2, r0
 8008b62:	a810      	add	r0, sp, #64	; 0x40
 8008b64:	f001 feb6 	bl	800a8d4 <siprintf>
          swo_printf("%s", buffer);
 8008b68:	a910      	add	r1, sp, #64	; 0x40
 8008b6a:	4823      	ldr	r0, [pc, #140]	; (8008bf8 <StartMonitorTask+0x420>)
 8008b6c:	f7ff f8b2 	bl	8007cd4 <swo_printf>
 8008b70:	ae10      	add	r6, sp, #64	; 0x40
          for (char *ptr = buffer; *ptr; ptr++)
 8008b72:	4637      	mov	r7, r6
 8008b74:	4639      	mov	r1, r7
 8008b76:	3701      	adds	r7, #1
 8008b78:	780b      	ldrb	r3, [r1, #0]
 8008b7a:	b9a3      	cbnz	r3, 8008ba6 <StartMonitorTask+0x3ce>
          sprintf(buffer, "%ld ascent 1\n", osKernelSysTick());
 8008b7c:	f7fd fa4b 	bl	8006016 <osKernelSysTick>
 8008b80:	491e      	ldr	r1, [pc, #120]	; (8008bfc <StartMonitorTask+0x424>)
          swo_printf("%s", buffer);
          for (char *ptr = buffer; *ptr; ptr++)
            xQueueSend(mon_log_queue_handle, ptr, 0);
 8008b82:	4f1f      	ldr	r7, [pc, #124]	; (8008c00 <StartMonitorTask+0x428>)
          sprintf(buffer, "%ld ascent 1\n", osKernelSysTick());
 8008b84:	4602      	mov	r2, r0
 8008b86:	a810      	add	r0, sp, #64	; 0x40
 8008b88:	f001 fea4 	bl	800a8d4 <siprintf>
          swo_printf("%s", buffer);
 8008b8c:	a910      	add	r1, sp, #64	; 0x40
 8008b8e:	481a      	ldr	r0, [pc, #104]	; (8008bf8 <StartMonitorTask+0x420>)
 8008b90:	f7ff f8a0 	bl	8007cd4 <swo_printf>
 8008b94:	4631      	mov	r1, r6
 8008b96:	3601      	adds	r6, #1
          for (char *ptr = buffer; *ptr; ptr++)
 8008b98:	780b      	ldrb	r3, [r1, #0]
 8008b9a:	b95b      	cbnz	r3, 8008bb4 <StartMonitorTask+0x3dc>
        imu_alt = 0;
 8008b9c:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8008c04 <StartMonitorTask+0x42c>
        imu_vel = 0;
 8008ba0:	eeb0 9a48 	vmov.f32	s18, s16
 8008ba4:	e05c      	b.n	8008c60 <StartMonitorTask+0x488>
            xQueueSend(mon_log_queue_handle, ptr, 0);
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	461a      	mov	r2, r3
 8008baa:	f8d8 0000 	ldr.w	r0, [r8]
 8008bae:	f7fd ff81 	bl	8006ab4 <xQueueGenericSend>
 8008bb2:	e7df      	b.n	8008b74 <StartMonitorTask+0x39c>
            xQueueSend(mon_log_queue_handle, ptr, 0);
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	461a      	mov	r2, r3
 8008bb8:	6838      	ldr	r0, [r7, #0]
 8008bba:	f7fd ff7b 	bl	8006ab4 <xQueueGenericSend>
 8008bbe:	e7e9      	b.n	8008b94 <StartMonitorTask+0x3bc>
 8008bc0:	572255df 	.word	0x572255df
 8008bc4:	3ef7a749 	.word	0x3ef7a749
 8008bc8:	d2f1a9fc 	.word	0xd2f1a9fc
 8008bcc:	3f50624d 	.word	0x3f50624d
 8008bd0:	9999999a 	.word	0x9999999a
 8008bd4:	3fa99999 	.word	0x3fa99999
 8008bd8:	66666666 	.word	0x66666666
 8008bdc:	3fee6666 	.word	0x3fee6666
 8008be0:	d916872b 	.word	0xd916872b
 8008be4:	3feff7ce 	.word	0x3feff7ce
 8008be8:	3ff00000 	.word	0x3ff00000
 8008bec:	20004850 	.word	0x20004850
 8008bf0:	200040cc 	.word	0x200040cc
 8008bf4:	0800cc27 	.word	0x0800cc27
 8008bf8:	0800cc3c 	.word	0x0800cc3c
 8008bfc:	0800cc3f 	.word	0x0800cc3f
 8008c00:	20009624 	.word	0x20009624
	...
 8008c0c:	40f8bcd0 	.word	0x40f8bcd0
 8008c10:	681ecd4b 	.word	0x681ecd4b
 8008c14:	40150605 	.word	0x40150605
        }
        break;
      case FM_STATE_ASCENT_1:
        // first ascent state, fixed delay
        if (osKernelSysTick() - launch_t > 2*1000) // TODO parameter
 8008c18:	f7fd f9fd 	bl	8006016 <osKernelSysTick>
 8008c1c:	9b05      	ldr	r3, [sp, #20]
 8008c1e:	1ac0      	subs	r0, r0, r3
 8008c20:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8008c24:	d91c      	bls.n	8008c60 <StartMonitorTask+0x488>
        {
          if (baro_alt > 20) // min alt to confirm launch
 8008c26:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8008c2a:	eef4 9ae7 	vcmpe.f32	s19, s15
 8008c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c32:	f340 825a 	ble.w	80090ea <StartMonitorTask+0x912>
          {
            fm_state = FM_STATE_ASCENT_2;
 8008c36:	2302      	movs	r3, #2
 8008c38:	702b      	strb	r3, [r5, #0]

            sprintf(buffer, "%ld ascent 2\n", osKernelSysTick());
 8008c3a:	f7fd f9ec 	bl	8006016 <osKernelSysTick>
 8008c3e:	49d3      	ldr	r1, [pc, #844]	; (8008f8c <StartMonitorTask+0x7b4>)
            swo_printf("%s", buffer);
            for (char *ptr = buffer; *ptr; ptr++)
              xQueueSend(mon_log_queue_handle, ptr, 0);
 8008c40:	4fd3      	ldr	r7, [pc, #844]	; (8008f90 <StartMonitorTask+0x7b8>)
            sprintf(buffer, "%ld ascent 2\n", osKernelSysTick());
 8008c42:	4602      	mov	r2, r0
 8008c44:	a810      	add	r0, sp, #64	; 0x40
 8008c46:	f001 fe45 	bl	800a8d4 <siprintf>
            swo_printf("%s", buffer);
 8008c4a:	a910      	add	r1, sp, #64	; 0x40
 8008c4c:	48d1      	ldr	r0, [pc, #836]	; (8008f94 <StartMonitorTask+0x7bc>)
 8008c4e:	f7ff f841 	bl	8007cd4 <swo_printf>
 8008c52:	ae10      	add	r6, sp, #64	; 0x40
 8008c54:	4631      	mov	r1, r6
 8008c56:	3601      	adds	r6, #1
            for (char *ptr = buffer; *ptr; ptr++)
 8008c58:	780b      	ldrb	r3, [r1, #0]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	f040 823f 	bne.w	80090de <StartMonitorTask+0x906>
            xQueueSend(mon_log_queue_handle, ptr, 0);
        }
        break;
    }

    if (actuation_clear_time <= osKernelSysTick())
 8008c60:	f7fd f9d9 	bl	8006016 <osKernelSysTick>
 8008c64:	4284      	cmp	r4, r0
 8008c66:	d809      	bhi.n	8008c7c <StartMonitorTask+0x4a4>
    {
      HAL_GPIO_WritePin(BACKUP_GO_GPIO_Port, BACKUP_GO_Pin, GPIO_PIN_RESET);
 8008c68:	2200      	movs	r2, #0
 8008c6a:	2120      	movs	r1, #32
 8008c6c:	48ca      	ldr	r0, [pc, #808]	; (8008f98 <StartMonitorTask+0x7c0>)
 8008c6e:	f7f8 fdd1 	bl	8001814 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MAIN_GO_GPIO_Port, MAIN_GO_Pin, GPIO_PIN_RESET);
 8008c72:	2200      	movs	r2, #0
 8008c74:	2140      	movs	r1, #64	; 0x40
 8008c76:	48c8      	ldr	r0, [pc, #800]	; (8008f98 <StartMonitorTask+0x7c0>)
 8008c78:	f7f8 fdcc 	bl	8001814 <HAL_GPIO_WritePin>
    }

    if (update_t <= osKernelSysTick())
 8008c7c:	f7fd f9cb 	bl	8006016 <osKernelSysTick>
 8008c80:	9b02      	ldr	r3, [sp, #8]
 8008c82:	4298      	cmp	r0, r3
 8008c84:	d374      	bcc.n	8008d70 <StartMonitorTask+0x598>
    {
      update_t += 250;
 8008c86:	33fa      	adds	r3, #250	; 0xfa
 8008c88:	9302      	str	r3, [sp, #8]

      sprintf(buffer, "%ld flight monitor status\n", osKernelSysTick());
 8008c8a:	f7fd f9c4 	bl	8006016 <osKernelSysTick>
 8008c8e:	49c3      	ldr	r1, [pc, #780]	; (8008f9c <StartMonitorTask+0x7c4>)
      //swo_printf("%s", buffer);
      for (char *ptr = buffer; *ptr; ptr++)
        xQueueSend(mon_log_queue_handle, ptr, 0);
 8008c90:	f8df 82fc 	ldr.w	r8, [pc, #764]	; 8008f90 <StartMonitorTask+0x7b8>
      sprintf(buffer, "%ld flight monitor status\n", osKernelSysTick());
 8008c94:	4602      	mov	r2, r0
 8008c96:	a810      	add	r0, sp, #64	; 0x40
 8008c98:	f001 fe1c 	bl	800a8d4 <siprintf>
 8008c9c:	af10      	add	r7, sp, #64	; 0x40
      for (char *ptr = buffer; *ptr; ptr++)
 8008c9e:	463e      	mov	r6, r7
 8008ca0:	4631      	mov	r1, r6
 8008ca2:	3601      	adds	r6, #1
 8008ca4:	780b      	ldrb	r3, [r1, #0]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	f040 8318 	bne.w	80092dc <StartMonitorTask+0xb04>
      sprintf(buffer, "state %d\n", fm_state);
 8008cac:	782a      	ldrb	r2, [r5, #0]
 8008cae:	49bc      	ldr	r1, [pc, #752]	; (8008fa0 <StartMonitorTask+0x7c8>)
      //swo_printf("%s", buffer);
      for (char *ptr = buffer; *ptr; ptr++)
        xQueueSend(mon_log_queue_handle, ptr, 0);
 8008cb0:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 8008f90 <StartMonitorTask+0x7b8>
      sprintf(buffer, "state %d\n", fm_state);
 8008cb4:	a810      	add	r0, sp, #64	; 0x40
 8008cb6:	f001 fe0d 	bl	800a8d4 <siprintf>
      for (char *ptr = buffer; *ptr; ptr++)
 8008cba:	ae10      	add	r6, sp, #64	; 0x40
 8008cbc:	4631      	mov	r1, r6
 8008cbe:	3601      	adds	r6, #1
 8008cc0:	780b      	ldrb	r3, [r1, #0]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	f040 8311 	bne.w	80092ea <StartMonitorTask+0xb12>
      sprintf(buffer, "imu raw %d scale %d\n", raw_imu_accel, (int)g_scale);
 8008cc8:	eefd 7aec 	vcvt.s32.f32	s15, s25
 8008ccc:	4652      	mov	r2, sl
 8008cce:	ee17 3a90 	vmov	r3, s15
 8008cd2:	49b4      	ldr	r1, [pc, #720]	; (8008fa4 <StartMonitorTask+0x7cc>)
      //swo_printf("%s", buffer);
      for (char *ptr = buffer; *ptr; ptr++)
        xQueueSend(mon_log_queue_handle, ptr, 0);
 8008cd4:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 8008f90 <StartMonitorTask+0x7b8>
      sprintf(buffer, "imu raw %d scale %d\n", raw_imu_accel, (int)g_scale);
 8008cd8:	a810      	add	r0, sp, #64	; 0x40
 8008cda:	f001 fdfb 	bl	800a8d4 <siprintf>
      for (char *ptr = buffer; *ptr; ptr++)
 8008cde:	ae10      	add	r6, sp, #64	; 0x40
 8008ce0:	4631      	mov	r1, r6
 8008ce2:	3601      	adds	r6, #1
 8008ce4:	780b      	ldrb	r3, [r1, #0]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	f040 8306 	bne.w	80092f8 <StartMonitorTask+0xb20>
      sprintf(buffer, "imu accel %d vel %d alt %d\n", (int)imu_accel, (int)imu_vel, (int)imu_alt);
 8008cec:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8008cf0:	49ad      	ldr	r1, [pc, #692]	; (8008fa8 <StartMonitorTask+0x7d0>)
 8008cf2:	edcd 7a00 	vstr	s15, [sp]
 8008cf6:	eefd 7ac9 	vcvt.s32.f32	s15, s18
 8008cfa:	a810      	add	r0, sp, #64	; 0x40
 8008cfc:	ee17 3a90 	vmov	r3, s15
 8008d00:	eefd 7acc 	vcvt.s32.f32	s15, s24
      //swo_printf("%s", buffer);
      for (char *ptr = buffer; *ptr; ptr++)
        xQueueSend(mon_log_queue_handle, ptr, 0);
 8008d04:	f8df 8288 	ldr.w	r8, [pc, #648]	; 8008f90 <StartMonitorTask+0x7b8>
      sprintf(buffer, "imu accel %d vel %d alt %d\n", (int)imu_accel, (int)imu_vel, (int)imu_alt);
 8008d08:	ee17 2a90 	vmov	r2, s15
 8008d0c:	f001 fde2 	bl	800a8d4 <siprintf>
      for (char *ptr = buffer; *ptr; ptr++)
 8008d10:	ae10      	add	r6, sp, #64	; 0x40
 8008d12:	4631      	mov	r1, r6
 8008d14:	3601      	adds	r6, #1
 8008d16:	780b      	ldrb	r3, [r1, #0]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	f040 82f4 	bne.w	8009306 <StartMonitorTask+0xb2e>
      sprintf(buffer, "baro raw %ld raw alt %d pad alt %d\n", baro_s.p, (int)baro_raw_alt, (int)baro_pad_alt);
 8008d1e:	eefd 7aca 	vcvt.s32.f32	s15, s20
 8008d22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d24:	edcd 7a00 	vstr	s15, [sp]
 8008d28:	eefd 7aea 	vcvt.s32.f32	s15, s21
 8008d2c:	499f      	ldr	r1, [pc, #636]	; (8008fac <StartMonitorTask+0x7d4>)
      //swo_printf("%s", buffer);
      for (char *ptr = buffer; *ptr; ptr++)
        xQueueSend(mon_log_queue_handle, ptr, 0);
 8008d2e:	f8df 8260 	ldr.w	r8, [pc, #608]	; 8008f90 <StartMonitorTask+0x7b8>
      sprintf(buffer, "baro raw %ld raw alt %d pad alt %d\n", baro_s.p, (int)baro_raw_alt, (int)baro_pad_alt);
 8008d32:	ee17 3a90 	vmov	r3, s15
 8008d36:	a810      	add	r0, sp, #64	; 0x40
 8008d38:	f001 fdcc 	bl	800a8d4 <siprintf>
      for (char *ptr = buffer; *ptr; ptr++)
 8008d3c:	ae10      	add	r6, sp, #64	; 0x40
 8008d3e:	4631      	mov	r1, r6
 8008d40:	3601      	adds	r6, #1
 8008d42:	780b      	ldrb	r3, [r1, #0]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	f040 82e5 	bne.w	8009314 <StartMonitorTask+0xb3c>
      sprintf(buffer, "baro alt %d vel %d\n", (int)baro_alt, (int)baro_vel);
 8008d4a:	eefd 7ae8 	vcvt.s32.f32	s15, s17
 8008d4e:	4998      	ldr	r1, [pc, #608]	; (8008fb0 <StartMonitorTask+0x7d8>)
      //swo_printf("%s", buffer);
      for (char *ptr = buffer; *ptr; ptr++)
        xQueueSend(mon_log_queue_handle, ptr, 0);
 8008d50:	4e8f      	ldr	r6, [pc, #572]	; (8008f90 <StartMonitorTask+0x7b8>)
      sprintf(buffer, "baro alt %d vel %d\n", (int)baro_alt, (int)baro_vel);
 8008d52:	ee17 3a90 	vmov	r3, s15
 8008d56:	eefd 7ae9 	vcvt.s32.f32	s15, s19
 8008d5a:	a810      	add	r0, sp, #64	; 0x40
 8008d5c:	ee17 2a90 	vmov	r2, s15
 8008d60:	f001 fdb8 	bl	800a8d4 <siprintf>
 8008d64:	4639      	mov	r1, r7
 8008d66:	3701      	adds	r7, #1
      for (char *ptr = buffer; *ptr; ptr++)
 8008d68:	780b      	ldrb	r3, [r1, #0]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	f040 82d9 	bne.w	8009322 <StartMonitorTask+0xb4a>
    }

    if (xmit_t <= osKernelSysTick())
 8008d70:	f7fd f951 	bl	8006016 <osKernelSysTick>
 8008d74:	4558      	cmp	r0, fp
 8008d76:	f0c0 81ad 	bcc.w	80090d4 <StartMonitorTask+0x8fc>
    {
      long l;

      xmit_t += 500;

      msg.dest    = MSG_DEST_BCAST;
 8008d7a:	23ff      	movs	r3, #255	; 0xff
 8008d7c:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
      msg.src     = dev_id;
 8008d80:	4b8c      	ldr	r3, [pc, #560]	; (8008fb4 <StartMonitorTask+0x7dc>)
 8008d82:	781b      	ldrb	r3, [r3, #0]
 8008d84:	f88d 3081 	strb.w	r3, [sp, #129]	; 0x81
      msg.flags   = MSG_FLAG_RADIO;
 8008d88:	2310      	movs	r3, #16
 8008d8a:	f88d 3082 	strb.w	r3, [sp, #130]	; 0x82
      msg.tx_mask = MSG_TX_UART4 | MSG_TX_UART2;
 8008d8e:	230a      	movs	r3, #10
 8008d90:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87

      msg.ptype   = 0xf0;
 8008d94:	23f0      	movs	r3, #240	; 0xf0
 8008d96:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
      msg.len     = 0;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
      l = osKernelSysTick();
 8008da0:	f7fd f939 	bl	8006016 <osKernelSysTick>
      msg.data[msg.len++] = l & 0xff;
 8008da4:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
 8008da8:	aa32      	add	r2, sp, #200	; 0xc8
 8008daa:	441a      	add	r2, r3
      msg.data[msg.len++] = (l >> 8) & 0xff;
 8008dac:	a932      	add	r1, sp, #200	; 0xc8
      msg.data[msg.len++] = l & 0xff;
 8008dae:	f802 0c40 	strb.w	r0, [r2, #-64]
 8008db2:	1c5a      	adds	r2, r3, #1
      msg.data[msg.len++] = (l >> 8) & 0xff;
 8008db4:	fa11 f282 	uxtah	r2, r1, r2
 8008db8:	1201      	asrs	r1, r0, #8
 8008dba:	f802 1c40 	strb.w	r1, [r2, #-64]
 8008dbe:	1c9a      	adds	r2, r3, #2
      msg.data[msg.len++] = (l >> 16) & 0xff;
 8008dc0:	a932      	add	r1, sp, #200	; 0xc8
 8008dc2:	fa11 f282 	uxtah	r2, r1, r2
 8008dc6:	1401      	asrs	r1, r0, #16
 8008dc8:	f802 1c40 	strb.w	r1, [r2, #-64]
 8008dcc:	1cda      	adds	r2, r3, #3
      msg.data[msg.len++] = (l >> 24) & 0xff;
 8008dce:	a932      	add	r1, sp, #200	; 0xc8
 8008dd0:	fa11 f282 	uxtah	r2, r1, r2
 8008dd4:	0e00      	lsrs	r0, r0, #24
 8008dd6:	f802 0c40 	strb.w	r0, [r2, #-64]
      msg.data[msg.len++] = fm_state;
 8008dda:	1d5a      	adds	r2, r3, #5
      msg.data[msg.len++] = (l >> 24) & 0xff;
 8008ddc:	3304      	adds	r3, #4
      msg.data[msg.len++] = fm_state;
 8008dde:	fa11 f383 	uxtah	r3, r1, r3
 8008de2:	f8ad 2084 	strh.w	r2, [sp, #132]	; 0x84
 8008de6:	782a      	ldrb	r2, [r5, #0]
 8008de8:	f803 2c40 	strb.w	r2, [r3, #-64]
      l = 0;
      if (fm_armed) l |= (1 << 0);
 8008dec:	4b72      	ldr	r3, [pc, #456]	; (8008fb8 <StartMonitorTask+0x7e0>)
 8008dee:	681d      	ldr	r5, [r3, #0]
      if (log_status) l |= (1 << 1);
 8008df0:	4b72      	ldr	r3, [pc, #456]	; (8008fbc <StartMonitorTask+0x7e4>)
 8008df2:	781b      	ldrb	r3, [r3, #0]
      if (fm_armed) l |= (1 << 0);
 8008df4:	3500      	adds	r5, #0
      xmit_t += 500;
 8008df6:	f50b 7bfa 	add.w	fp, fp, #500	; 0x1f4
      if (fm_armed) l |= (1 << 0);
 8008dfa:	bf18      	it	ne
 8008dfc:	2501      	movne	r5, #1
      if (log_status) l |= (1 << 1);
 8008dfe:	b10b      	cbz	r3, 8008e04 <StartMonitorTask+0x62c>
 8008e00:	f045 0502 	orr.w	r5, r5, #2
      if (HAL_GPIO_ReadPin(BACKUP_SENSE_GPIO_Port, BACKUP_SENSE_Pin)) l |= (1 << 4);
 8008e04:	2180      	movs	r1, #128	; 0x80
 8008e06:	4864      	ldr	r0, [pc, #400]	; (8008f98 <StartMonitorTask+0x7c0>)
 8008e08:	f7f8 fcfe 	bl	8001808 <HAL_GPIO_ReadPin>
 8008e0c:	b108      	cbz	r0, 8008e12 <StartMonitorTask+0x63a>
 8008e0e:	f045 0510 	orr.w	r5, r5, #16
      if (HAL_GPIO_ReadPin(MAIN_SENSE_GPIO_Port, MAIN_SENSE_Pin)) l |= (1 << 5);
 8008e12:	2110      	movs	r1, #16
 8008e14:	4860      	ldr	r0, [pc, #384]	; (8008f98 <StartMonitorTask+0x7c0>)
 8008e16:	f7f8 fcf7 	bl	8001808 <HAL_GPIO_ReadPin>
 8008e1a:	b108      	cbz	r0, 8008e20 <StartMonitorTask+0x648>
 8008e1c:	f045 0520 	orr.w	r5, r5, #32
      msg.data[msg.len++] = l;
 8008e20:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
      msg.data[msg.len++] = (baro_s.p >> 24) & 0xff;
      msg.data[msg.len++] = baro_s.temp & 0xff;
      msg.data[msg.len++] = (baro_s.temp >> 8) & 0xff;
      msg.data[msg.len++] = (baro_s.temp >> 16) & 0xff;
      msg.data[msg.len++] = (baro_s.temp >> 24) & 0xff;
      l = imu_accel * 100;
 8008e24:	eddf 7a66 	vldr	s15, [pc, #408]	; 8008fc0 <StartMonitorTask+0x7e8>
      msg.data[msg.len++] = l;
 8008e28:	aa32      	add	r2, sp, #200	; 0xc8
 8008e2a:	441a      	add	r2, r3
      msg.data[msg.len++] = baro_s.p & 0xff;
 8008e2c:	a832      	add	r0, sp, #200	; 0xc8
      msg.data[msg.len++] = l;
 8008e2e:	1c59      	adds	r1, r3, #1
      msg.data[msg.len++] = baro_s.p & 0xff;
 8008e30:	fa10 f181 	uxtah	r1, r0, r1
      msg.data[msg.len++] = l;
 8008e34:	f802 5c40 	strb.w	r5, [r2, #-64]
      msg.data[msg.len++] = baro_s.p & 0xff;
 8008e38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e3a:	f801 2c40 	strb.w	r2, [r1, #-64]
 8008e3e:	1c99      	adds	r1, r3, #2
      msg.data[msg.len++] = (baro_s.p >> 8) & 0xff;
 8008e40:	fa10 f181 	uxtah	r1, r0, r1
 8008e44:	1210      	asrs	r0, r2, #8
 8008e46:	f801 0c40 	strb.w	r0, [r1, #-64]
 8008e4a:	1cd9      	adds	r1, r3, #3
      msg.data[msg.len++] = (baro_s.p >> 16) & 0xff;
 8008e4c:	a832      	add	r0, sp, #200	; 0xc8
 8008e4e:	fa10 f181 	uxtah	r1, r0, r1
 8008e52:	1410      	asrs	r0, r2, #16
 8008e54:	f801 0c40 	strb.w	r0, [r1, #-64]
      msg.data[msg.len++] = (baro_s.p >> 24) & 0xff;
 8008e58:	a832      	add	r0, sp, #200	; 0xc8
      msg.data[msg.len++] = (baro_s.p >> 16) & 0xff;
 8008e5a:	1d19      	adds	r1, r3, #4
      msg.data[msg.len++] = (baro_s.p >> 24) & 0xff;
 8008e5c:	fa10 f181 	uxtah	r1, r0, r1
 8008e60:	0e12      	lsrs	r2, r2, #24
 8008e62:	f801 2c40 	strb.w	r2, [r1, #-64]
 8008e66:	1d59      	adds	r1, r3, #5
      msg.data[msg.len++] = baro_s.temp & 0xff;
 8008e68:	fa10 f181 	uxtah	r1, r0, r1
 8008e6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008e6e:	f801 2c40 	strb.w	r2, [r1, #-64]
 8008e72:	1d99      	adds	r1, r3, #6
      msg.data[msg.len++] = (baro_s.temp >> 8) & 0xff;
 8008e74:	fa10 f181 	uxtah	r1, r0, r1
 8008e78:	1210      	asrs	r0, r2, #8
 8008e7a:	f801 0c40 	strb.w	r0, [r1, #-64]
 8008e7e:	1dd9      	adds	r1, r3, #7
      msg.data[msg.len++] = (baro_s.temp >> 16) & 0xff;
 8008e80:	a832      	add	r0, sp, #200	; 0xc8
 8008e82:	fa10 f181 	uxtah	r1, r0, r1
 8008e86:	1410      	asrs	r0, r2, #16
 8008e88:	f801 0c40 	strb.w	r0, [r1, #-64]
      l = imu_accel * 100;
 8008e8c:	ee2c 7a27 	vmul.f32	s14, s24, s15
      msg.data[msg.len++] = (baro_s.temp >> 24) & 0xff;
 8008e90:	a832      	add	r0, sp, #200	; 0xc8
      msg.data[msg.len++] = (baro_s.temp >> 16) & 0xff;
 8008e92:	f103 0108 	add.w	r1, r3, #8
      msg.data[msg.len++] = (baro_s.temp >> 24) & 0xff;
 8008e96:	fa10 f181 	uxtah	r1, r0, r1
 8008e9a:	0e12      	lsrs	r2, r2, #24
      l = imu_accel * 100;
 8008e9c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
      msg.data[msg.len++] = (baro_s.temp >> 24) & 0xff;
 8008ea0:	f801 2c40 	strb.w	r2, [r1, #-64]
 8008ea4:	f103 0109 	add.w	r1, r3, #9
      l = imu_accel * 100;
 8008ea8:	ee17 2a10 	vmov	r2, s14
      msg.data[msg.len++] = l & 0xff;
 8008eac:	fa10 f181 	uxtah	r1, r0, r1
      msg.data[msg.len++] = (l >> 8) & 0xff;
      msg.data[msg.len++] = (l >> 16) & 0xff;
      msg.data[msg.len++] = (l >> 24) & 0xff;
      l = baro_raw_alt * 100;
 8008eb0:	ee2a 7aa7 	vmul.f32	s14, s21, s15
      msg.data[msg.len++] = l & 0xff;
 8008eb4:	f801 2c40 	strb.w	r2, [r1, #-64]
 8008eb8:	f103 010a 	add.w	r1, r3, #10
      msg.data[msg.len++] = (l >> 8) & 0xff;
 8008ebc:	fa10 f181 	uxtah	r1, r0, r1
 8008ec0:	1210      	asrs	r0, r2, #8
 8008ec2:	f801 0c40 	strb.w	r0, [r1, #-64]
 8008ec6:	f103 010b 	add.w	r1, r3, #11
      msg.data[msg.len++] = (l >> 16) & 0xff;
 8008eca:	a832      	add	r0, sp, #200	; 0xc8
 8008ecc:	fa10 f181 	uxtah	r1, r0, r1
 8008ed0:	1410      	asrs	r0, r2, #16
 8008ed2:	f801 0c40 	strb.w	r0, [r1, #-64]
      msg.data[msg.len++] = (l >> 24) & 0xff;
 8008ed6:	a832      	add	r0, sp, #200	; 0xc8
      msg.data[msg.len++] = (l >> 16) & 0xff;
 8008ed8:	f103 010c 	add.w	r1, r3, #12
      msg.data[msg.len++] = (l >> 24) & 0xff;
 8008edc:	fa10 f181 	uxtah	r1, r0, r1
 8008ee0:	0e12      	lsrs	r2, r2, #24
      l = baro_raw_alt * 100;
 8008ee2:	eebd 7ac7 	vcvt.s32.f32	s14, s14
      msg.data[msg.len++] = (l >> 24) & 0xff;
 8008ee6:	f801 2c40 	strb.w	r2, [r1, #-64]
 8008eea:	f103 010d 	add.w	r1, r3, #13
      l = baro_raw_alt * 100;
 8008eee:	ee17 2a10 	vmov	r2, s14
      msg.data[msg.len++] = l & 0xff;
 8008ef2:	fa10 f181 	uxtah	r1, r0, r1
      msg.data[msg.len++] = (l >> 8) & 0xff;
      msg.data[msg.len++] = (l >> 16) & 0xff;
      msg.data[msg.len++] = (l >> 24) & 0xff;
      l = baro_alt * 100;
 8008ef6:	ee29 7aa7 	vmul.f32	s14, s19, s15
      msg.data[msg.len++] = l & 0xff;
 8008efa:	f801 2c40 	strb.w	r2, [r1, #-64]
 8008efe:	f103 010e 	add.w	r1, r3, #14
      msg.data[msg.len++] = (l >> 8) & 0xff;
 8008f02:	fa10 f181 	uxtah	r1, r0, r1
 8008f06:	1210      	asrs	r0, r2, #8
 8008f08:	f801 0c40 	strb.w	r0, [r1, #-64]
 8008f0c:	f103 010f 	add.w	r1, r3, #15
      msg.data[msg.len++] = (l >> 16) & 0xff;
 8008f10:	a832      	add	r0, sp, #200	; 0xc8
 8008f12:	fa10 f181 	uxtah	r1, r0, r1
 8008f16:	1410      	asrs	r0, r2, #16
 8008f18:	f801 0c40 	strb.w	r0, [r1, #-64]
      msg.data[msg.len++] = (l >> 24) & 0xff;
 8008f1c:	a832      	add	r0, sp, #200	; 0xc8
      msg.data[msg.len++] = (l >> 16) & 0xff;
 8008f1e:	f103 0110 	add.w	r1, r3, #16
      msg.data[msg.len++] = (l >> 24) & 0xff;
 8008f22:	fa10 f181 	uxtah	r1, r0, r1
 8008f26:	0e12      	lsrs	r2, r2, #24
      l = baro_alt * 100;
 8008f28:	eebd 7ac7 	vcvt.s32.f32	s14, s14
      msg.data[msg.len++] = (l >> 24) & 0xff;
 8008f2c:	f801 2c40 	strb.w	r2, [r1, #-64]
 8008f30:	f103 0111 	add.w	r1, r3, #17
      l = baro_alt * 100;
 8008f34:	ee17 2a10 	vmov	r2, s14
      msg.data[msg.len++] = l & 0xff;
 8008f38:	fa10 f181 	uxtah	r1, r0, r1
      msg.data[msg.len++] = (l >> 8) & 0xff;
      msg.data[msg.len++] = (l >> 16) & 0xff;
      msg.data[msg.len++] = (l >> 24) & 0xff;
      l = baro_pad_alt * 100;
 8008f3c:	ee2a 7a27 	vmul.f32	s14, s20, s15
      msg.data[msg.len++] = l & 0xff;
 8008f40:	f801 2c40 	strb.w	r2, [r1, #-64]
 8008f44:	f103 0112 	add.w	r1, r3, #18
      msg.data[msg.len++] = (l >> 8) & 0xff;
 8008f48:	fa10 f181 	uxtah	r1, r0, r1
 8008f4c:	1210      	asrs	r0, r2, #8
 8008f4e:	f801 0c40 	strb.w	r0, [r1, #-64]
 8008f52:	f103 0113 	add.w	r1, r3, #19
      msg.data[msg.len++] = (l >> 16) & 0xff;
 8008f56:	a832      	add	r0, sp, #200	; 0xc8
 8008f58:	fa10 f181 	uxtah	r1, r0, r1
 8008f5c:	1410      	asrs	r0, r2, #16
 8008f5e:	f801 0c40 	strb.w	r0, [r1, #-64]
      msg.data[msg.len++] = (l >> 24) & 0xff;
 8008f62:	a832      	add	r0, sp, #200	; 0xc8
      msg.data[msg.len++] = (l >> 16) & 0xff;
 8008f64:	f103 0114 	add.w	r1, r3, #20
      msg.data[msg.len++] = (l >> 24) & 0xff;
 8008f68:	fa10 f181 	uxtah	r1, r0, r1
 8008f6c:	0e12      	lsrs	r2, r2, #24
      l = baro_pad_alt * 100;
 8008f6e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
      msg.data[msg.len++] = (l >> 24) & 0xff;
 8008f72:	f801 2c40 	strb.w	r2, [r1, #-64]
 8008f76:	f103 0115 	add.w	r1, r3, #21
      l = baro_pad_alt * 100;
 8008f7a:	ee17 2a10 	vmov	r2, s14
      msg.data[msg.len++] = l & 0xff;
 8008f7e:	fa10 f181 	uxtah	r1, r0, r1
      msg.data[msg.len++] = (l >> 8) & 0xff;
      msg.data[msg.len++] = (l >> 16) & 0xff;
      msg.data[msg.len++] = (l >> 24) & 0xff;
      l = baro_vel * 100;
 8008f82:	ee28 7aa7 	vmul.f32	s14, s17, s15
      msg.data[msg.len++] = l & 0xff;
 8008f86:	f801 2c40 	strb.w	r2, [r1, #-64]
 8008f8a:	e01b      	b.n	8008fc4 <StartMonitorTask+0x7ec>
 8008f8c:	0800cc4d 	.word	0x0800cc4d
 8008f90:	20009624 	.word	0x20009624
 8008f94:	0800cc3c 	.word	0x0800cc3c
 8008f98:	40020000 	.word	0x40020000
 8008f9c:	0800ccb0 	.word	0x0800ccb0
 8008fa0:	0800cccb 	.word	0x0800cccb
 8008fa4:	0800ccd5 	.word	0x0800ccd5
 8008fa8:	0800ccea 	.word	0x0800ccea
 8008fac:	0800cd06 	.word	0x0800cd06
 8008fb0:	0800cd2a 	.word	0x0800cd2a
 8008fb4:	2000000c 	.word	0x2000000c
 8008fb8:	200040cc 	.word	0x200040cc
 8008fbc:	200040d1 	.word	0x200040d1
 8008fc0:	42c80000 	.word	0x42c80000
 8008fc4:	f103 0116 	add.w	r1, r3, #22
      msg.data[msg.len++] = (l >> 8) & 0xff;
 8008fc8:	fa10 f181 	uxtah	r1, r0, r1
 8008fcc:	1210      	asrs	r0, r2, #8
 8008fce:	f801 0c40 	strb.w	r0, [r1, #-64]
 8008fd2:	f103 0117 	add.w	r1, r3, #23
      msg.data[msg.len++] = (l >> 16) & 0xff;
 8008fd6:	a832      	add	r0, sp, #200	; 0xc8
 8008fd8:	fa10 f181 	uxtah	r1, r0, r1
 8008fdc:	1410      	asrs	r0, r2, #16
 8008fde:	f801 0c40 	strb.w	r0, [r1, #-64]
      msg.data[msg.len++] = (l >> 24) & 0xff;
 8008fe2:	a832      	add	r0, sp, #200	; 0xc8
      msg.data[msg.len++] = (l >> 16) & 0xff;
 8008fe4:	f103 0118 	add.w	r1, r3, #24
      msg.data[msg.len++] = (l >> 24) & 0xff;
 8008fe8:	fa10 f181 	uxtah	r1, r0, r1
 8008fec:	0e12      	lsrs	r2, r2, #24
      l = baro_vel * 100;
 8008fee:	eebd 7ac7 	vcvt.s32.f32	s14, s14
      msg.data[msg.len++] = (l >> 24) & 0xff;
 8008ff2:	f801 2c40 	strb.w	r2, [r1, #-64]
 8008ff6:	f103 0119 	add.w	r1, r3, #25
      l = baro_vel * 100;
 8008ffa:	ee17 2a10 	vmov	r2, s14
      msg.data[msg.len++] = l & 0xff;
 8008ffe:	fa10 f181 	uxtah	r1, r0, r1
      msg.data[msg.len++] = (l >> 8) & 0xff;
      msg.data[msg.len++] = (l >> 16) & 0xff;
      msg.data[msg.len++] = (l >> 24) & 0xff;
      l = imu_vel * 100;
 8009002:	ee29 7a27 	vmul.f32	s14, s18, s15
      msg.data[msg.len++] = l & 0xff;
 8009006:	f801 2c40 	strb.w	r2, [r1, #-64]
 800900a:	f103 011a 	add.w	r1, r3, #26
      msg.data[msg.len++] = (l >> 8) & 0xff;
 800900e:	fa10 f181 	uxtah	r1, r0, r1
 8009012:	1210      	asrs	r0, r2, #8
 8009014:	f801 0c40 	strb.w	r0, [r1, #-64]
 8009018:	f103 011b 	add.w	r1, r3, #27
      msg.data[msg.len++] = (l >> 16) & 0xff;
 800901c:	a832      	add	r0, sp, #200	; 0xc8
 800901e:	fa10 f181 	uxtah	r1, r0, r1
 8009022:	1410      	asrs	r0, r2, #16
 8009024:	f801 0c40 	strb.w	r0, [r1, #-64]
      msg.data[msg.len++] = (l >> 24) & 0xff;
 8009028:	a832      	add	r0, sp, #200	; 0xc8
      msg.data[msg.len++] = (l >> 16) & 0xff;
 800902a:	f103 011c 	add.w	r1, r3, #28
      msg.data[msg.len++] = (l >> 24) & 0xff;
 800902e:	fa10 f181 	uxtah	r1, r0, r1
 8009032:	0e12      	lsrs	r2, r2, #24
      l = imu_vel * 100;
 8009034:	eebd 7ac7 	vcvt.s32.f32	s14, s14
      msg.data[msg.len++] = (l >> 24) & 0xff;
 8009038:	f801 2c40 	strb.w	r2, [r1, #-64]
 800903c:	f103 011d 	add.w	r1, r3, #29
      l = imu_vel * 100;
 8009040:	ee17 2a10 	vmov	r2, s14
      msg.data[msg.len++] = l & 0xff;
 8009044:	fa10 f181 	uxtah	r1, r0, r1
      msg.data[msg.len++] = (l >> 8) & 0xff;
      msg.data[msg.len++] = (l >> 16) & 0xff;
      msg.data[msg.len++] = (l >> 24) & 0xff;
      l = imu_alt * 100;
 8009048:	ee68 7a27 	vmul.f32	s15, s16, s15
      msg.data[msg.len++] = l & 0xff;
 800904c:	f801 2c40 	strb.w	r2, [r1, #-64]
 8009050:	f103 011e 	add.w	r1, r3, #30
      msg.data[msg.len++] = (l >> 8) & 0xff;
 8009054:	fa10 f181 	uxtah	r1, r0, r1
 8009058:	1210      	asrs	r0, r2, #8
 800905a:	f801 0c40 	strb.w	r0, [r1, #-64]
 800905e:	f103 011f 	add.w	r1, r3, #31
      msg.data[msg.len++] = (l >> 16) & 0xff;
 8009062:	a832      	add	r0, sp, #200	; 0xc8
 8009064:	fa10 f181 	uxtah	r1, r0, r1
 8009068:	1410      	asrs	r0, r2, #16
 800906a:	f801 0c40 	strb.w	r0, [r1, #-64]
      msg.data[msg.len++] = (l >> 24) & 0xff;
 800906e:	a832      	add	r0, sp, #200	; 0xc8
      msg.data[msg.len++] = (l >> 16) & 0xff;
 8009070:	f103 0120 	add.w	r1, r3, #32
      msg.data[msg.len++] = (l >> 24) & 0xff;
 8009074:	fa10 f181 	uxtah	r1, r0, r1
 8009078:	0e12      	lsrs	r2, r2, #24
      l = imu_alt * 100;
 800907a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
      msg.data[msg.len++] = (l >> 24) & 0xff;
 800907e:	f801 2c40 	strb.w	r2, [r1, #-64]
 8009082:	f103 0121 	add.w	r1, r3, #33	; 0x21
      l = imu_alt * 100;
 8009086:	ee17 2a90 	vmov	r2, s15
      msg.data[msg.len++] = l & 0xff;
 800908a:	fa10 f181 	uxtah	r1, r0, r1
 800908e:	f801 2c40 	strb.w	r2, [r1, #-64]
 8009092:	f103 0122 	add.w	r1, r3, #34	; 0x22
      msg.data[msg.len++] = (l >> 8) & 0xff;
 8009096:	fa10 f181 	uxtah	r1, r0, r1
 800909a:	1210      	asrs	r0, r2, #8
 800909c:	f801 0c40 	strb.w	r0, [r1, #-64]
 80090a0:	f103 0123 	add.w	r1, r3, #35	; 0x23
      msg.data[msg.len++] = (l >> 16) & 0xff;
 80090a4:	a832      	add	r0, sp, #200	; 0xc8
 80090a6:	fa10 f181 	uxtah	r1, r0, r1
 80090aa:	1410      	asrs	r0, r2, #16
 80090ac:	f801 0c40 	strb.w	r0, [r1, #-64]
      msg.data[msg.len++] = (l >> 24) & 0xff;
 80090b0:	f103 0125 	add.w	r1, r3, #37	; 0x25
 80090b4:	f8ad 1084 	strh.w	r1, [sp, #132]	; 0x84
      msg.data[msg.len++] = (l >> 16) & 0xff;
 80090b8:	3324      	adds	r3, #36	; 0x24
      msg.data[msg.len++] = (l >> 24) & 0xff;
 80090ba:	a932      	add	r1, sp, #200	; 0xc8
 80090bc:	fa11 f383 	uxtah	r3, r1, r3
 80090c0:	0e12      	lsrs	r2, r2, #24
      xQueueSend(tx_msg_queue_handle, &msg, 0);
 80090c2:	489b      	ldr	r0, [pc, #620]	; (8009330 <StartMonitorTask+0xb58>)
      msg.data[msg.len++] = (l >> 24) & 0xff;
 80090c4:	f803 2c40 	strb.w	r2, [r3, #-64]
      xQueueSend(tx_msg_queue_handle, &msg, 0);
 80090c8:	2300      	movs	r3, #0
 80090ca:	461a      	mov	r2, r3
 80090cc:	a920      	add	r1, sp, #128	; 0x80
 80090ce:	6800      	ldr	r0, [r0, #0]
 80090d0:	f7fd fcf0 	bl	8006ab4 <xQueueGenericSend>
    }

    osDelay(ts_ms);
 80090d4:	200a      	movs	r0, #10
 80090d6:	f7fc ffcd 	bl	8006074 <osDelay>
    while (uxQueueMessagesWaiting(imu_mon_queue_handle))
 80090da:	f7ff bb9b 	b.w	8008814 <StartMonitorTask+0x3c>
              xQueueSend(mon_log_queue_handle, ptr, 0);
 80090de:	2300      	movs	r3, #0
 80090e0:	461a      	mov	r2, r3
 80090e2:	6838      	ldr	r0, [r7, #0]
 80090e4:	f7fd fce6 	bl	8006ab4 <xQueueGenericSend>
 80090e8:	e5b4      	b.n	8008c54 <StartMonitorTask+0x47c>
            fm_state = FM_STATE_PAD;
 80090ea:	2300      	movs	r3, #0
 80090ec:	702b      	strb	r3, [r5, #0]
            sprintf(buffer, "%ld pad\n", osKernelSysTick());
 80090ee:	f7fc ff92 	bl	8006016 <osKernelSysTick>
 80090f2:	4990      	ldr	r1, [pc, #576]	; (8009334 <StartMonitorTask+0xb5c>)
              xQueueSend(mon_log_queue_handle, ptr, 0);
 80090f4:	4f90      	ldr	r7, [pc, #576]	; (8009338 <StartMonitorTask+0xb60>)
            sprintf(buffer, "%ld pad\n", osKernelSysTick());
 80090f6:	4602      	mov	r2, r0
 80090f8:	a810      	add	r0, sp, #64	; 0x40
 80090fa:	f001 fbeb 	bl	800a8d4 <siprintf>
            swo_printf("%s", buffer);
 80090fe:	a910      	add	r1, sp, #64	; 0x40
 8009100:	488e      	ldr	r0, [pc, #568]	; (800933c <StartMonitorTask+0xb64>)
 8009102:	f7fe fde7 	bl	8007cd4 <swo_printf>
 8009106:	ae10      	add	r6, sp, #64	; 0x40
 8009108:	4631      	mov	r1, r6
 800910a:	3601      	adds	r6, #1
            for (char *ptr = buffer; *ptr; ptr++)
 800910c:	780b      	ldrb	r3, [r1, #0]
 800910e:	2b00      	cmp	r3, #0
 8009110:	f43f ada6 	beq.w	8008c60 <StartMonitorTask+0x488>
              xQueueSend(mon_log_queue_handle, ptr, 0);
 8009114:	2300      	movs	r3, #0
 8009116:	461a      	mov	r2, r3
 8009118:	6838      	ldr	r0, [r7, #0]
 800911a:	f7fd fccb 	bl	8006ab4 <xQueueGenericSend>
 800911e:	e7f3      	b.n	8009108 <StartMonitorTask+0x930>
        if (imu_vel < 50) // TODO parameter
 8009120:	eddf 7a87 	vldr	s15, [pc, #540]	; 8009340 <StartMonitorTask+0xb68>
 8009124:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8009128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800912c:	f57f ad98 	bpl.w	8008c60 <StartMonitorTask+0x488>
          fm_state = FM_STATE_ASCENT_3;
 8009130:	2303      	movs	r3, #3
 8009132:	702b      	strb	r3, [r5, #0]
          sprintf(buffer, "%ld ascent 3\n", osKernelSysTick());
 8009134:	f7fc ff6f 	bl	8006016 <osKernelSysTick>
 8009138:	4982      	ldr	r1, [pc, #520]	; (8009344 <StartMonitorTask+0xb6c>)
            xQueueSend(mon_log_queue_handle, ptr, 0);
 800913a:	4f7f      	ldr	r7, [pc, #508]	; (8009338 <StartMonitorTask+0xb60>)
          sprintf(buffer, "%ld ascent 3\n", osKernelSysTick());
 800913c:	4602      	mov	r2, r0
 800913e:	a810      	add	r0, sp, #64	; 0x40
 8009140:	f001 fbc8 	bl	800a8d4 <siprintf>
          swo_printf("%s", buffer);
 8009144:	a910      	add	r1, sp, #64	; 0x40
 8009146:	487d      	ldr	r0, [pc, #500]	; (800933c <StartMonitorTask+0xb64>)
 8009148:	f7fe fdc4 	bl	8007cd4 <swo_printf>
 800914c:	ae10      	add	r6, sp, #64	; 0x40
 800914e:	4631      	mov	r1, r6
 8009150:	3601      	adds	r6, #1
          for (char *ptr = buffer; *ptr; ptr++)
 8009152:	780b      	ldrb	r3, [r1, #0]
 8009154:	2b00      	cmp	r3, #0
 8009156:	f43f ad83 	beq.w	8008c60 <StartMonitorTask+0x488>
            xQueueSend(mon_log_queue_handle, ptr, 0);
 800915a:	2300      	movs	r3, #0
 800915c:	461a      	mov	r2, r3
 800915e:	6838      	ldr	r0, [r7, #0]
 8009160:	f7fd fca8 	bl	8006ab4 <xQueueGenericSend>
 8009164:	e7f3      	b.n	800914e <StartMonitorTask+0x976>
        if (baro_vel < 1) // TODO parameter
 8009166:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800916a:	eef4 8ae7 	vcmpe.f32	s17, s15
 800916e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009172:	f57f ad75 	bpl.w	8008c60 <StartMonitorTask+0x488>
          if (fm_armed && baro_alt > 100) // TODO parameter
 8009176:	4b74      	ldr	r3, [pc, #464]	; (8009348 <StartMonitorTask+0xb70>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	b30b      	cbz	r3, 80091c0 <StartMonitorTask+0x9e8>
 800917c:	eddf 7a73 	vldr	s15, [pc, #460]	; 800934c <StartMonitorTask+0xb74>
 8009180:	eef4 9ae7 	vcmpe.f32	s19, s15
 8009184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009188:	dd1a      	ble.n	80091c0 <StartMonitorTask+0x9e8>
            HAL_GPIO_WritePin(BACKUP_GO_GPIO_Port, BACKUP_GO_Pin, GPIO_PIN_SET);
 800918a:	2201      	movs	r2, #1
 800918c:	2120      	movs	r1, #32
 800918e:	4870      	ldr	r0, [pc, #448]	; (8009350 <StartMonitorTask+0xb78>)
              xQueueSend(mon_log_queue_handle, ptr, 0);
 8009190:	4f69      	ldr	r7, [pc, #420]	; (8009338 <StartMonitorTask+0xb60>)
            HAL_GPIO_WritePin(BACKUP_GO_GPIO_Port, BACKUP_GO_Pin, GPIO_PIN_SET);
 8009192:	f7f8 fb3f 	bl	8001814 <HAL_GPIO_WritePin>
            actuation_clear_time = osKernelSysTick() + 10000;
 8009196:	f7fc ff3e 	bl	8006016 <osKernelSysTick>
 800919a:	f500 541c 	add.w	r4, r0, #9984	; 0x2700
            sprintf(buffer, "%ld fire drogue\n", osKernelSysTick());
 800919e:	f7fc ff3a 	bl	8006016 <osKernelSysTick>
 80091a2:	496c      	ldr	r1, [pc, #432]	; (8009354 <StartMonitorTask+0xb7c>)
 80091a4:	4602      	mov	r2, r0
 80091a6:	a810      	add	r0, sp, #64	; 0x40
 80091a8:	f001 fb94 	bl	800a8d4 <siprintf>
            swo_printf("%s", buffer);
 80091ac:	a910      	add	r1, sp, #64	; 0x40
 80091ae:	4863      	ldr	r0, [pc, #396]	; (800933c <StartMonitorTask+0xb64>)
 80091b0:	f7fe fd90 	bl	8007cd4 <swo_printf>
            actuation_clear_time = osKernelSysTick() + 10000;
 80091b4:	3410      	adds	r4, #16
 80091b6:	ae10      	add	r6, sp, #64	; 0x40
 80091b8:	4631      	mov	r1, r6
 80091ba:	3601      	adds	r6, #1
            for (char *ptr = buffer; *ptr; ptr++)
 80091bc:	780b      	ldrb	r3, [r1, #0]
 80091be:	b9d3      	cbnz	r3, 80091f6 <StartMonitorTask+0xa1e>
          fm_state = FM_STATE_DESCENT_1;
 80091c0:	2304      	movs	r3, #4
 80091c2:	702b      	strb	r3, [r5, #0]
          sprintf(buffer, "%ld descent 1\n", osKernelSysTick());
 80091c4:	f7fc ff27 	bl	8006016 <osKernelSysTick>
 80091c8:	4963      	ldr	r1, [pc, #396]	; (8009358 <StartMonitorTask+0xb80>)
            xQueueSend(mon_log_queue_handle, ptr, 0);
 80091ca:	4f5b      	ldr	r7, [pc, #364]	; (8009338 <StartMonitorTask+0xb60>)
          sprintf(buffer, "%ld descent 1\n", osKernelSysTick());
 80091cc:	4602      	mov	r2, r0
 80091ce:	a810      	add	r0, sp, #64	; 0x40
 80091d0:	f001 fb80 	bl	800a8d4 <siprintf>
          swo_printf("%s", buffer);
 80091d4:	a910      	add	r1, sp, #64	; 0x40
 80091d6:	4859      	ldr	r0, [pc, #356]	; (800933c <StartMonitorTask+0xb64>)
 80091d8:	f7fe fd7c 	bl	8007cd4 <swo_printf>
 80091dc:	ae10      	add	r6, sp, #64	; 0x40
 80091de:	4631      	mov	r1, r6
 80091e0:	3601      	adds	r6, #1
          for (char *ptr = buffer; *ptr; ptr++)
 80091e2:	780b      	ldrb	r3, [r1, #0]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	f43f ad3b 	beq.w	8008c60 <StartMonitorTask+0x488>
            xQueueSend(mon_log_queue_handle, ptr, 0);
 80091ea:	2300      	movs	r3, #0
 80091ec:	461a      	mov	r2, r3
 80091ee:	6838      	ldr	r0, [r7, #0]
 80091f0:	f7fd fc60 	bl	8006ab4 <xQueueGenericSend>
 80091f4:	e7f3      	b.n	80091de <StartMonitorTask+0xa06>
              xQueueSend(mon_log_queue_handle, ptr, 0);
 80091f6:	2300      	movs	r3, #0
 80091f8:	461a      	mov	r2, r3
 80091fa:	6838      	ldr	r0, [r7, #0]
 80091fc:	f7fd fc5a 	bl	8006ab4 <xQueueGenericSend>
 8009200:	e7da      	b.n	80091b8 <StartMonitorTask+0x9e0>
        if (baro_alt < 308) // TODO parameter
 8009202:	eddf 7a56 	vldr	s15, [pc, #344]	; 800935c <StartMonitorTask+0xb84>
 8009206:	eef4 9ae7 	vcmpe.f32	s19, s15
 800920a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800920e:	f57f ad27 	bpl.w	8008c60 <StartMonitorTask+0x488>
          if (fm_armed && baro_alt > 100) // TODO parameter
 8009212:	4b4d      	ldr	r3, [pc, #308]	; (8009348 <StartMonitorTask+0xb70>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	b30b      	cbz	r3, 800925c <StartMonitorTask+0xa84>
 8009218:	eddf 7a4c 	vldr	s15, [pc, #304]	; 800934c <StartMonitorTask+0xb74>
 800921c:	eef4 9ae7 	vcmpe.f32	s19, s15
 8009220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009224:	dd1a      	ble.n	800925c <StartMonitorTask+0xa84>
            HAL_GPIO_WritePin(MAIN_GO_GPIO_Port, MAIN_GO_Pin, GPIO_PIN_SET);
 8009226:	2201      	movs	r2, #1
 8009228:	2140      	movs	r1, #64	; 0x40
 800922a:	4849      	ldr	r0, [pc, #292]	; (8009350 <StartMonitorTask+0xb78>)
              xQueueSend(mon_log_queue_handle, ptr, 0);
 800922c:	4f42      	ldr	r7, [pc, #264]	; (8009338 <StartMonitorTask+0xb60>)
            HAL_GPIO_WritePin(MAIN_GO_GPIO_Port, MAIN_GO_Pin, GPIO_PIN_SET);
 800922e:	f7f8 faf1 	bl	8001814 <HAL_GPIO_WritePin>
            actuation_clear_time = osKernelSysTick() + 10000;
 8009232:	f7fc fef0 	bl	8006016 <osKernelSysTick>
 8009236:	f500 541c 	add.w	r4, r0, #9984	; 0x2700
            sprintf(buffer, "%ld fire main\n", osKernelSysTick());
 800923a:	f7fc feec 	bl	8006016 <osKernelSysTick>
 800923e:	4948      	ldr	r1, [pc, #288]	; (8009360 <StartMonitorTask+0xb88>)
 8009240:	4602      	mov	r2, r0
 8009242:	a810      	add	r0, sp, #64	; 0x40
 8009244:	f001 fb46 	bl	800a8d4 <siprintf>
            swo_printf("%s", buffer);
 8009248:	a910      	add	r1, sp, #64	; 0x40
 800924a:	483c      	ldr	r0, [pc, #240]	; (800933c <StartMonitorTask+0xb64>)
 800924c:	f7fe fd42 	bl	8007cd4 <swo_printf>
            actuation_clear_time = osKernelSysTick() + 10000;
 8009250:	3410      	adds	r4, #16
 8009252:	ae10      	add	r6, sp, #64	; 0x40
 8009254:	4631      	mov	r1, r6
 8009256:	3601      	adds	r6, #1
            for (char *ptr = buffer; *ptr; ptr++)
 8009258:	780b      	ldrb	r3, [r1, #0]
 800925a:	b9d3      	cbnz	r3, 8009292 <StartMonitorTask+0xaba>
          fm_state = FM_STATE_DESCENT_2;
 800925c:	2305      	movs	r3, #5
 800925e:	702b      	strb	r3, [r5, #0]
          sprintf(buffer, "%ld descent 2\n", osKernelSysTick());
 8009260:	f7fc fed9 	bl	8006016 <osKernelSysTick>
 8009264:	493f      	ldr	r1, [pc, #252]	; (8009364 <StartMonitorTask+0xb8c>)
            xQueueSend(mon_log_queue_handle, ptr, 0);
 8009266:	4f34      	ldr	r7, [pc, #208]	; (8009338 <StartMonitorTask+0xb60>)
          sprintf(buffer, "%ld descent 2\n", osKernelSysTick());
 8009268:	4602      	mov	r2, r0
 800926a:	a810      	add	r0, sp, #64	; 0x40
 800926c:	f001 fb32 	bl	800a8d4 <siprintf>
          swo_printf("%s", buffer);
 8009270:	a910      	add	r1, sp, #64	; 0x40
 8009272:	4832      	ldr	r0, [pc, #200]	; (800933c <StartMonitorTask+0xb64>)
 8009274:	f7fe fd2e 	bl	8007cd4 <swo_printf>
 8009278:	ae10      	add	r6, sp, #64	; 0x40
 800927a:	4631      	mov	r1, r6
 800927c:	3601      	adds	r6, #1
          for (char *ptr = buffer; *ptr; ptr++)
 800927e:	780b      	ldrb	r3, [r1, #0]
 8009280:	2b00      	cmp	r3, #0
 8009282:	f43f aced 	beq.w	8008c60 <StartMonitorTask+0x488>
            xQueueSend(mon_log_queue_handle, ptr, 0);
 8009286:	2300      	movs	r3, #0
 8009288:	461a      	mov	r2, r3
 800928a:	6838      	ldr	r0, [r7, #0]
 800928c:	f7fd fc12 	bl	8006ab4 <xQueueGenericSend>
 8009290:	e7f3      	b.n	800927a <StartMonitorTask+0xaa2>
              xQueueSend(mon_log_queue_handle, ptr, 0);
 8009292:	2300      	movs	r3, #0
 8009294:	461a      	mov	r2, r3
 8009296:	6838      	ldr	r0, [r7, #0]
 8009298:	f7fd fc0c 	bl	8006ab4 <xQueueGenericSend>
 800929c:	e7da      	b.n	8009254 <StartMonitorTask+0xa7c>
        if (!fm_armed)
 800929e:	4b2a      	ldr	r3, [pc, #168]	; (8009348 <StartMonitorTask+0xb70>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	f47f acdc 	bne.w	8008c60 <StartMonitorTask+0x488>
          fm_state = FM_STATE_PAD;
 80092a8:	702b      	strb	r3, [r5, #0]
          sprintf(buffer, "%ld pad\n", osKernelSysTick());
 80092aa:	f7fc feb4 	bl	8006016 <osKernelSysTick>
 80092ae:	4921      	ldr	r1, [pc, #132]	; (8009334 <StartMonitorTask+0xb5c>)
            xQueueSend(mon_log_queue_handle, ptr, 0);
 80092b0:	4f21      	ldr	r7, [pc, #132]	; (8009338 <StartMonitorTask+0xb60>)
          sprintf(buffer, "%ld pad\n", osKernelSysTick());
 80092b2:	4602      	mov	r2, r0
 80092b4:	a810      	add	r0, sp, #64	; 0x40
 80092b6:	f001 fb0d 	bl	800a8d4 <siprintf>
          swo_printf("%s", buffer);
 80092ba:	a910      	add	r1, sp, #64	; 0x40
 80092bc:	481f      	ldr	r0, [pc, #124]	; (800933c <StartMonitorTask+0xb64>)
 80092be:	f7fe fd09 	bl	8007cd4 <swo_printf>
 80092c2:	ae10      	add	r6, sp, #64	; 0x40
 80092c4:	4631      	mov	r1, r6
 80092c6:	3601      	adds	r6, #1
          for (char *ptr = buffer; *ptr; ptr++)
 80092c8:	780b      	ldrb	r3, [r1, #0]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	f43f acc8 	beq.w	8008c60 <StartMonitorTask+0x488>
            xQueueSend(mon_log_queue_handle, ptr, 0);
 80092d0:	2300      	movs	r3, #0
 80092d2:	461a      	mov	r2, r3
 80092d4:	6838      	ldr	r0, [r7, #0]
 80092d6:	f7fd fbed 	bl	8006ab4 <xQueueGenericSend>
 80092da:	e7f3      	b.n	80092c4 <StartMonitorTask+0xaec>
        xQueueSend(mon_log_queue_handle, ptr, 0);
 80092dc:	2300      	movs	r3, #0
 80092de:	461a      	mov	r2, r3
 80092e0:	f8d8 0000 	ldr.w	r0, [r8]
 80092e4:	f7fd fbe6 	bl	8006ab4 <xQueueGenericSend>
 80092e8:	e4da      	b.n	8008ca0 <StartMonitorTask+0x4c8>
        xQueueSend(mon_log_queue_handle, ptr, 0);
 80092ea:	2300      	movs	r3, #0
 80092ec:	461a      	mov	r2, r3
 80092ee:	f8d8 0000 	ldr.w	r0, [r8]
 80092f2:	f7fd fbdf 	bl	8006ab4 <xQueueGenericSend>
 80092f6:	e4e1      	b.n	8008cbc <StartMonitorTask+0x4e4>
        xQueueSend(mon_log_queue_handle, ptr, 0);
 80092f8:	2300      	movs	r3, #0
 80092fa:	461a      	mov	r2, r3
 80092fc:	f8d8 0000 	ldr.w	r0, [r8]
 8009300:	f7fd fbd8 	bl	8006ab4 <xQueueGenericSend>
 8009304:	e4ec      	b.n	8008ce0 <StartMonitorTask+0x508>
        xQueueSend(mon_log_queue_handle, ptr, 0);
 8009306:	2300      	movs	r3, #0
 8009308:	461a      	mov	r2, r3
 800930a:	f8d8 0000 	ldr.w	r0, [r8]
 800930e:	f7fd fbd1 	bl	8006ab4 <xQueueGenericSend>
 8009312:	e4fe      	b.n	8008d12 <StartMonitorTask+0x53a>
        xQueueSend(mon_log_queue_handle, ptr, 0);
 8009314:	2300      	movs	r3, #0
 8009316:	461a      	mov	r2, r3
 8009318:	f8d8 0000 	ldr.w	r0, [r8]
 800931c:	f7fd fbca 	bl	8006ab4 <xQueueGenericSend>
 8009320:	e50d      	b.n	8008d3e <StartMonitorTask+0x566>
        xQueueSend(mon_log_queue_handle, ptr, 0);
 8009322:	2300      	movs	r3, #0
 8009324:	461a      	mov	r2, r3
 8009326:	6830      	ldr	r0, [r6, #0]
 8009328:	f7fd fbc4 	bl	8006ab4 <xQueueGenericSend>
 800932c:	e51a      	b.n	8008d64 <StartMonitorTask+0x58c>
 800932e:	bf00      	nop
 8009330:	2000722c 	.word	0x2000722c
 8009334:	0800cc5b 	.word	0x0800cc5b
 8009338:	20009624 	.word	0x20009624
 800933c:	0800cc3c 	.word	0x0800cc3c
 8009340:	42480000 	.word	0x42480000
 8009344:	0800cc64 	.word	0x0800cc64
 8009348:	200040cc 	.word	0x200040cc
 800934c:	42c80000 	.word	0x42c80000
 8009350:	40020000 	.word	0x40020000
 8009354:	0800cc72 	.word	0x0800cc72
 8009358:	0800cc83 	.word	0x0800cc83
 800935c:	439a0000 	.word	0x439a0000
 8009360:	0800cc92 	.word	0x0800cc92
 8009364:	0800cca1 	.word	0x0800cca1

08009368 <startMessageHandler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startMessageHandler */
void startMessageHandler(void const * argument)
{
 8009368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  while(1)
  {
    // receive new messages

    HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 800936c:	f8df 825c 	ldr.w	r8, [pc, #604]	; 80095cc <startMessageHandler+0x264>
            msg.ptype   = pkt_buffer[3];
            msg.rx_int  = MSG_RX_UART4;
            msg.tx_mask = MSG_TX_NONE;
            msg.len     = len-6;
            memcpy(&msg.data, &pkt_buffer[4], msg.len);
            xQueueSend(rx_msg_queue_handle, &msg, 0);
 8009370:	4d8b      	ldr	r5, [pc, #556]	; (80095a0 <startMessageHandler+0x238>)
          msg.dest = msg.src;
          msg.src = dev_id;
          msg.ptype = MSG_TYPE_PING_RESP;
          msg.tx_mask = MSG_TX_MASK(msg.rx_int); // loop it back

          xQueueSend(tx_msg_queue_handle, &msg, 0);
 8009372:	4e8c      	ldr	r6, [pc, #560]	; (80095a4 <startMessageHandler+0x23c>)
{
 8009374:	b0d7      	sub	sp, #348	; 0x15c
    HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8009376:	2201      	movs	r2, #1
 8009378:	2120      	movs	r1, #32
 800937a:	4640      	mov	r0, r8
 800937c:	f7f8 fa4a 	bl	8001814 <HAL_GPIO_WritePin>
    while (uxQueueMessagesWaiting(usart4_rx_queue_handle))
 8009380:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80095d0 <startMessageHandler+0x268>
 8009384:	4f88      	ldr	r7, [pc, #544]	; (80095a8 <startMessageHandler+0x240>)
        usart4_pkt_buffer[usart4_pkt_buffer_ptr++] = ch;
 8009386:	f8df a24c 	ldr.w	sl, [pc, #588]	; 80095d4 <startMessageHandler+0x26c>
    while (uxQueueMessagesWaiting(usart4_rx_queue_handle))
 800938a:	f8d9 0000 	ldr.w	r0, [r9]
 800938e:	f7fd feb1 	bl	80070f4 <uxQueueMessagesWaiting>
 8009392:	b9b8      	cbnz	r0, 80093c4 <startMessageHandler+0x5c>
          cmd = msg.data[0];
          cmd |= msg.data[1] << 8;
          cmd |= msg.data[2] << 16;
          cmd |= msg.data[3] << 24;

          switch (cmd)
 8009394:	4c85      	ldr	r4, [pc, #532]	; (80095ac <startMessageHandler+0x244>)
          {
            case 0x000801F0:
              // set flight monitor state
              fm_state = msg.data[4];
 8009396:	4f86      	ldr	r7, [pc, #536]	; (80095b0 <startMessageHandler+0x248>)
    while (uxQueueMessagesWaiting(rx_msg_queue_handle))
 8009398:	6828      	ldr	r0, [r5, #0]
 800939a:	f7fd feab 	bl	80070f4 <uxQueueMessagesWaiting>
 800939e:	2800      	cmp	r0, #0
 80093a0:	d15e      	bne.n	8009460 <startMessageHandler+0xf8>
      {
        for (int i = 0; i < len; i++)
        {
          ch = pkt_buffer_2[i];
          xQueueSend(usart4_tx_queue_handle, &ch, 10);
          if (!usart4_active)
 80093a2:	f8df 9234 	ldr.w	r9, [pc, #564]	; 80095d8 <startMessageHandler+0x270>
    while (uxQueueMessagesWaiting(tx_msg_queue_handle))
 80093a6:	6830      	ldr	r0, [r6, #0]
 80093a8:	f7fd fea4 	bl	80070f4 <uxQueueMessagesWaiting>
 80093ac:	4602      	mov	r2, r0
 80093ae:	2800      	cmp	r0, #0
 80093b0:	f040 8092 	bne.w	80094d8 <startMessageHandler+0x170>
        ch = 0;
        xQueueSend(usart4_tx_queue_handle, &ch, 10);
      }
    }

    HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80093b4:	4640      	mov	r0, r8
 80093b6:	2120      	movs	r1, #32
 80093b8:	f7f8 fa2c 	bl	8001814 <HAL_GPIO_WritePin>

    osDelay(1);
 80093bc:	2001      	movs	r0, #1
 80093be:	f7fc fe59 	bl	8006074 <osDelay>
    HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80093c2:	e7d8      	b.n	8009376 <startMessageHandler+0xe>
      xQueueReceive(usart4_rx_queue_handle, &ch, 0);
 80093c4:	2200      	movs	r2, #0
 80093c6:	f10d 010f 	add.w	r1, sp, #15
 80093ca:	f8d9 0000 	ldr.w	r0, [r9]
 80093ce:	f7fd fcdd 	bl	8006d8c <xQueueReceive>
      if (ch == 0)
 80093d2:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80093d6:	2a00      	cmp	r2, #0
 80093d8:	d137      	bne.n	800944a <startMessageHandler+0xe2>
        len = cobs_decode(usart4_pkt_buffer, usart4_pkt_buffer_ptr, pkt_buffer);
 80093da:	aa16      	add	r2, sp, #88	; 0x58
 80093dc:	6839      	ldr	r1, [r7, #0]
 80093de:	4650      	mov	r0, sl
 80093e0:	f001 f91c 	bl	800a61c <cobs_decode>
        if (len > 6)
 80093e4:	2806      	cmp	r0, #6
        len = cobs_decode(usart4_pkt_buffer, usart4_pkt_buffer_ptr, pkt_buffer);
 80093e6:	4604      	mov	r4, r0
        if (len > 6)
 80093e8:	d928      	bls.n	800943c <startMessageHandler+0xd4>
          if (crc16_block(pkt_buffer, len) == 0)
 80093ea:	4601      	mov	r1, r0
 80093ec:	a816      	add	r0, sp, #88	; 0x58
 80093ee:	f001 f93e 	bl	800a66e <crc16_block>
 80093f2:	4683      	mov	fp, r0
 80093f4:	bb28      	cbnz	r0, 8009442 <startMessageHandler+0xda>
            msg.dest    = pkt_buffer[0];
 80093f6:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80093fa:	f88d 3010 	strb.w	r3, [sp, #16]
            msg.src     = pkt_buffer[1];
 80093fe:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
 8009402:	f88d 3011 	strb.w	r3, [sp, #17]
            msg.flags   = pkt_buffer[2];
 8009406:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
 800940a:	f88d 3012 	strb.w	r3, [sp, #18]
            msg.len     = len-6;
 800940e:	1fa2      	subs	r2, r4, #6
            msg.ptype   = pkt_buffer[3];
 8009410:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 8009414:	f88d 3013 	strb.w	r3, [sp, #19]
            msg.len     = len-6;
 8009418:	b292      	uxth	r2, r2
            msg.rx_int  = MSG_RX_UART4;
 800941a:	2303      	movs	r3, #3
            msg.tx_mask = MSG_TX_NONE;
 800941c:	f88d 0017 	strb.w	r0, [sp, #23]
            memcpy(&msg.data, &pkt_buffer[4], msg.len);
 8009420:	a917      	add	r1, sp, #92	; 0x5c
 8009422:	a806      	add	r0, sp, #24
            msg.rx_int  = MSG_RX_UART4;
 8009424:	f88d 3016 	strb.w	r3, [sp, #22]
            msg.len     = len-6;
 8009428:	f8ad 2014 	strh.w	r2, [sp, #20]
            memcpy(&msg.data, &pkt_buffer[4], msg.len);
 800942c:	f001 fa3e 	bl	800a8ac <memcpy>
            xQueueSend(rx_msg_queue_handle, &msg, 0);
 8009430:	465b      	mov	r3, fp
 8009432:	465a      	mov	r2, fp
 8009434:	a904      	add	r1, sp, #16
 8009436:	6828      	ldr	r0, [r5, #0]
 8009438:	f7fd fb3c 	bl	8006ab4 <xQueueGenericSend>
        usart4_pkt_buffer_ptr = 0;
 800943c:	2300      	movs	r3, #0
 800943e:	603b      	str	r3, [r7, #0]
 8009440:	e7a3      	b.n	800938a <startMessageHandler+0x22>
            swo_printf("Bad CRC\n");
 8009442:	485c      	ldr	r0, [pc, #368]	; (80095b4 <startMessageHandler+0x24c>)
 8009444:	f7fe fc46 	bl	8007cd4 <swo_printf>
 8009448:	e7f8      	b.n	800943c <startMessageHandler+0xd4>
        if (usart4_pkt_buffer_ptr == sizeof(usart4_pkt_buffer))
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	2b80      	cmp	r3, #128	; 0x80
          usart4_pkt_buffer_ptr = 0;
 800944e:	bf04      	itt	eq
 8009450:	2300      	moveq	r3, #0
 8009452:	603b      	streq	r3, [r7, #0]
        usart4_pkt_buffer[usart4_pkt_buffer_ptr++] = ch;
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	1c59      	adds	r1, r3, #1
 8009458:	6039      	str	r1, [r7, #0]
 800945a:	f80a 2003 	strb.w	r2, [sl, r3]
 800945e:	e794      	b.n	800938a <startMessageHandler+0x22>
      xQueueReceive(rx_msg_queue_handle, &msg, 0);
 8009460:	2200      	movs	r2, #0
 8009462:	a904      	add	r1, sp, #16
 8009464:	6828      	ldr	r0, [r5, #0]
 8009466:	f7fd fc91 	bl	8006d8c <xQueueReceive>
      if (msg.dest == MSG_DEST_BCAST || msg.dest == dev_id)
 800946a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800946e:	2bff      	cmp	r3, #255	; 0xff
 8009470:	d003      	beq.n	800947a <startMessageHandler+0x112>
 8009472:	4a51      	ldr	r2, [pc, #324]	; (80095b8 <startMessageHandler+0x250>)
 8009474:	7812      	ldrb	r2, [r2, #0]
 8009476:	429a      	cmp	r2, r3
 8009478:	d18e      	bne.n	8009398 <startMessageHandler+0x30>
        if (msg.ptype == MSG_TYPE_PING_REQ)
 800947a:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800947e:	2bfe      	cmp	r3, #254	; 0xfe
 8009480:	d117      	bne.n	80094b2 <startMessageHandler+0x14a>
          msg.dest = msg.src;
 8009482:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8009486:	f88d 3010 	strb.w	r3, [sp, #16]
          msg.src = dev_id;
 800948a:	4b4b      	ldr	r3, [pc, #300]	; (80095b8 <startMessageHandler+0x250>)
          msg.tx_mask = MSG_TX_MASK(msg.rx_int); // loop it back
 800948c:	f89d 2016 	ldrb.w	r2, [sp, #22]
          msg.src = dev_id;
 8009490:	781b      	ldrb	r3, [r3, #0]
 8009492:	f88d 3011 	strb.w	r3, [sp, #17]
          msg.ptype = MSG_TYPE_PING_RESP;
 8009496:	23ff      	movs	r3, #255	; 0xff
 8009498:	f88d 3013 	strb.w	r3, [sp, #19]
          msg.tx_mask = MSG_TX_MASK(msg.rx_int); // loop it back
 800949c:	2301      	movs	r3, #1
 800949e:	4093      	lsls	r3, r2
 80094a0:	f88d 3017 	strb.w	r3, [sp, #23]
          xQueueSend(tx_msg_queue_handle, &msg, 0);
 80094a4:	2300      	movs	r3, #0
 80094a6:	461a      	mov	r2, r3
 80094a8:	a904      	add	r1, sp, #16
 80094aa:	6830      	ldr	r0, [r6, #0]
 80094ac:	f7fd fb02 	bl	8006ab4 <xQueueGenericSend>
 80094b0:	e772      	b.n	8009398 <startMessageHandler+0x30>
        else if (msg.ptype == MSG_TYPE_COMMAND)
 80094b2:	2b08      	cmp	r3, #8
 80094b4:	f47f af70 	bne.w	8009398 <startMessageHandler+0x30>
          switch (cmd)
 80094b8:	9b06      	ldr	r3, [sp, #24]
 80094ba:	42a3      	cmp	r3, r4
 80094bc:	d008      	beq.n	80094d0 <startMessageHandler+0x168>
 80094be:	4a3f      	ldr	r2, [pc, #252]	; (80095bc <startMessageHandler+0x254>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	f47f af69 	bne.w	8009398 <startMessageHandler+0x30>
              fm_armed = msg.data[4];
 80094c6:	4b3e      	ldr	r3, [pc, #248]	; (80095c0 <startMessageHandler+0x258>)
 80094c8:	f89d 201c 	ldrb.w	r2, [sp, #28]
 80094cc:	601a      	str	r2, [r3, #0]
              break;
 80094ce:	e763      	b.n	8009398 <startMessageHandler+0x30>
              fm_state = msg.data[4];
 80094d0:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80094d4:	703b      	strb	r3, [r7, #0]
              break;
 80094d6:	e75f      	b.n	8009398 <startMessageHandler+0x30>
      xQueueReceive(tx_msg_queue_handle, &msg, 0);
 80094d8:	2200      	movs	r2, #0
 80094da:	a904      	add	r1, sp, #16
 80094dc:	6830      	ldr	r0, [r6, #0]
 80094de:	f7fd fc55 	bl	8006d8c <xQueueReceive>
      pkt_buffer[0] = msg.dest;
 80094e2:	f89d 3010 	ldrb.w	r3, [sp, #16]
      memcpy(&pkt_buffer[4], &msg.data, msg.len);
 80094e6:	f8bd 4014 	ldrh.w	r4, [sp, #20]
      pkt_buffer[0] = msg.dest;
 80094ea:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
      pkt_buffer[1] = msg.src;
 80094ee:	f89d 3011 	ldrb.w	r3, [sp, #17]
 80094f2:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
      pkt_buffer[2] = msg.flags;
 80094f6:	f89d 3012 	ldrb.w	r3, [sp, #18]
 80094fa:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
      memcpy(&pkt_buffer[4], &msg.data, msg.len);
 80094fe:	4622      	mov	r2, r4
      pkt_buffer[3] = msg.ptype;
 8009500:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8009504:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
      memcpy(&pkt_buffer[4], &msg.data, msg.len);
 8009508:	a906      	add	r1, sp, #24
 800950a:	a817      	add	r0, sp, #92	; 0x5c
 800950c:	f001 f9ce 	bl	800a8ac <memcpy>
      crc = crc16_block(pkt_buffer, msg.len+4);
 8009510:	1d21      	adds	r1, r4, #4
 8009512:	a816      	add	r0, sp, #88	; 0x58
 8009514:	f001 f8ab 	bl	800a66e <crc16_block>
      pkt_buffer[msg.len+4] = crc & 0xff;
 8009518:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 800951c:	ab16      	add	r3, sp, #88	; 0x58
 800951e:	440b      	add	r3, r1
      len = cobs_encode(pkt_buffer, msg.len+6, pkt_buffer_2);
 8009520:	f10d 0ad8 	add.w	sl, sp, #216	; 0xd8
      pkt_buffer[msg.len+4] = crc & 0xff;
 8009524:	7118      	strb	r0, [r3, #4]
      pkt_buffer[msg.len+5] = crc >> 8;
 8009526:	0a00      	lsrs	r0, r0, #8
 8009528:	7158      	strb	r0, [r3, #5]
      len = cobs_encode(pkt_buffer, msg.len+6, pkt_buffer_2);
 800952a:	4652      	mov	r2, sl
 800952c:	3106      	adds	r1, #6
 800952e:	a816      	add	r0, sp, #88	; 0x58
 8009530:	f001 f856 	bl	800a5e0 <cobs_encode>
      if (msg.tx_mask & MSG_TX_UART4)
 8009534:	f89d 3017 	ldrb.w	r3, [sp, #23]
      len = cobs_encode(pkt_buffer, msg.len+6, pkt_buffer_2);
 8009538:	9000      	str	r0, [sp, #0]
      if (msg.tx_mask & MSG_TX_UART4)
 800953a:	071b      	lsls	r3, r3, #28
 800953c:	f57f af33 	bpl.w	80093a6 <startMessageHandler+0x3e>
 8009540:	4f20      	ldr	r7, [pc, #128]	; (80095c4 <startMessageHandler+0x25c>)
            xQueueReceive(usart4_tx_queue_handle, usart4_tx_hw_buffer, 0);
 8009542:	f8df b098 	ldr.w	fp, [pc, #152]	; 80095dc <startMessageHandler+0x274>
      if (msg.tx_mask & MSG_TX_UART4)
 8009546:	2400      	movs	r4, #0
        for (int i = 0; i < len; i++)
 8009548:	9b00      	ldr	r3, [sp, #0]
 800954a:	429c      	cmp	r4, r3
 800954c:	d109      	bne.n	8009562 <startMessageHandler+0x1fa>
        ch = 0;
 800954e:	2300      	movs	r3, #0
        xQueueSend(usart4_tx_queue_handle, &ch, 10);
 8009550:	220a      	movs	r2, #10
 8009552:	f10d 010f 	add.w	r1, sp, #15
 8009556:	6838      	ldr	r0, [r7, #0]
        ch = 0;
 8009558:	f88d 300f 	strb.w	r3, [sp, #15]
        xQueueSend(usart4_tx_queue_handle, &ch, 10);
 800955c:	f7fd faaa 	bl	8006ab4 <xQueueGenericSend>
 8009560:	e721      	b.n	80093a6 <startMessageHandler+0x3e>
          ch = pkt_buffer_2[i];
 8009562:	f81a 3004 	ldrb.w	r3, [sl, r4]
 8009566:	f88d 300f 	strb.w	r3, [sp, #15]
          xQueueSend(usart4_tx_queue_handle, &ch, 10);
 800956a:	220a      	movs	r2, #10
 800956c:	2300      	movs	r3, #0
 800956e:	f10d 010f 	add.w	r1, sp, #15
 8009572:	6838      	ldr	r0, [r7, #0]
 8009574:	f7fd fa9e 	bl	8006ab4 <xQueueGenericSend>
          if (!usart4_active)
 8009578:	f899 2000 	ldrb.w	r2, [r9]
 800957c:	b96a      	cbnz	r2, 800959a <startMessageHandler+0x232>
            usart4_active = 1;
 800957e:	2301      	movs	r3, #1
            xQueueReceive(usart4_tx_queue_handle, usart4_tx_hw_buffer, 0);
 8009580:	4659      	mov	r1, fp
 8009582:	6838      	ldr	r0, [r7, #0]
            usart4_active = 1;
 8009584:	f889 3000 	strb.w	r3, [r9]
 8009588:	9301      	str	r3, [sp, #4]
            xQueueReceive(usart4_tx_queue_handle, usart4_tx_hw_buffer, 0);
 800958a:	f7fd fbff 	bl	8006d8c <xQueueReceive>
            HAL_UART_Transmit_IT(&huart4, usart4_tx_hw_buffer, 1);
 800958e:	9b01      	ldr	r3, [sp, #4]
 8009590:	480d      	ldr	r0, [pc, #52]	; (80095c8 <startMessageHandler+0x260>)
 8009592:	461a      	mov	r2, r3
 8009594:	4659      	mov	r1, fp
 8009596:	f7fa fcb9 	bl	8003f0c <HAL_UART_Transmit_IT>
        for (int i = 0; i < len; i++)
 800959a:	3401      	adds	r4, #1
 800959c:	e7d4      	b.n	8009548 <startMessageHandler+0x1e0>
 800959e:	bf00      	nop
 80095a0:	20004c48 	.word	0x20004c48
 80095a4:	2000722c 	.word	0x2000722c
 80095a8:	200040d4 	.word	0x200040d4
 80095ac:	000801f0 	.word	0x000801f0
 80095b0:	200040d0 	.word	0x200040d0
 80095b4:	0800cdda 	.word	0x0800cdda
 80095b8:	2000000c 	.word	0x2000000c
 80095bc:	000801ff 	.word	0x000801ff
 80095c0:	200040cc 	.word	0x200040cc
 80095c4:	200095e0 	.word	0x200095e0
 80095c8:	200095e4 	.word	0x200095e4
 80095cc:	40021000 	.word	0x40021000
 80095d0:	20006d80 	.word	0x20006d80
 80095d4:	20009a6c 	.word	0x20009a6c
 80095d8:	200048a0 	.word	0x200048a0
 80095dc:	2000a0ec 	.word	0x2000a0ec

080095e0 <HAL_UART_TxCpltCallback>:
  if (huart == &huart4)
 80095e0:	4b18      	ldr	r3, [pc, #96]	; (8009644 <HAL_UART_TxCpltCallback+0x64>)
 80095e2:	4298      	cmp	r0, r3
{
 80095e4:	b570      	push	{r4, r5, r6, lr}
 80095e6:	4604      	mov	r4, r0
  if (huart == &huart4)
 80095e8:	d111      	bne.n	800960e <HAL_UART_TxCpltCallback+0x2e>
    if (uxQueueMessagesWaitingFromISR(usart4_tx_queue_handle))
 80095ea:	4e17      	ldr	r6, [pc, #92]	; (8009648 <HAL_UART_TxCpltCallback+0x68>)
 80095ec:	6830      	ldr	r0, [r6, #0]
 80095ee:	f7fd fd94 	bl	800711a <uxQueueMessagesWaitingFromISR>
 80095f2:	4b16      	ldr	r3, [pc, #88]	; (800964c <HAL_UART_TxCpltCallback+0x6c>)
 80095f4:	b310      	cbz	r0, 800963c <HAL_UART_TxCpltCallback+0x5c>
      usart4_active = 1;
 80095f6:	2501      	movs	r5, #1
      xQueueReceiveFromISR(usart4_tx_queue_handle, usart4_tx_hw_buffer, NULL);
 80095f8:	2200      	movs	r2, #0
 80095fa:	4915      	ldr	r1, [pc, #84]	; (8009650 <HAL_UART_TxCpltCallback+0x70>)
 80095fc:	6830      	ldr	r0, [r6, #0]
      usart4_active = 1;
 80095fe:	701d      	strb	r5, [r3, #0]
      xQueueReceiveFromISR(usart4_tx_queue_handle, usart4_tx_hw_buffer, NULL);
 8009600:	f7fd fd28 	bl	8007054 <xQueueReceiveFromISR>
      HAL_UART_Transmit_IT(&huart4, usart4_tx_hw_buffer, 1);
 8009604:	462a      	mov	r2, r5
 8009606:	4912      	ldr	r1, [pc, #72]	; (8009650 <HAL_UART_TxCpltCallback+0x70>)
 8009608:	4620      	mov	r0, r4
 800960a:	f7fa fc7f 	bl	8003f0c <HAL_UART_Transmit_IT>
  if (huart == &huart6)
 800960e:	4b11      	ldr	r3, [pc, #68]	; (8009654 <HAL_UART_TxCpltCallback+0x74>)
 8009610:	429c      	cmp	r4, r3
 8009612:	d116      	bne.n	8009642 <HAL_UART_TxCpltCallback+0x62>
    if (uxQueueMessagesWaitingFromISR(usart6_tx_queue_handle))
 8009614:	4e10      	ldr	r6, [pc, #64]	; (8009658 <HAL_UART_TxCpltCallback+0x78>)
 8009616:	6830      	ldr	r0, [r6, #0]
 8009618:	f7fd fd7f 	bl	800711a <uxQueueMessagesWaitingFromISR>
 800961c:	4b0f      	ldr	r3, [pc, #60]	; (800965c <HAL_UART_TxCpltCallback+0x7c>)
 800961e:	b178      	cbz	r0, 8009640 <HAL_UART_TxCpltCallback+0x60>
      usart6_active = 1;
 8009620:	2501      	movs	r5, #1
      xQueueReceiveFromISR(usart6_tx_queue_handle, usart6_tx_hw_buffer, NULL);
 8009622:	2200      	movs	r2, #0
 8009624:	490e      	ldr	r1, [pc, #56]	; (8009660 <HAL_UART_TxCpltCallback+0x80>)
 8009626:	6830      	ldr	r0, [r6, #0]
      usart6_active = 1;
 8009628:	701d      	strb	r5, [r3, #0]
      xQueueReceiveFromISR(usart6_tx_queue_handle, usart6_tx_hw_buffer, NULL);
 800962a:	f7fd fd13 	bl	8007054 <xQueueReceiveFromISR>
      HAL_UART_Transmit_IT(&huart6, usart6_tx_hw_buffer, 1);
 800962e:	462a      	mov	r2, r5
 8009630:	4620      	mov	r0, r4
 8009632:	490b      	ldr	r1, [pc, #44]	; (8009660 <HAL_UART_TxCpltCallback+0x80>)
}
 8009634:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_UART_Transmit_IT(&huart6, usart6_tx_hw_buffer, 1);
 8009638:	f7fa bc68 	b.w	8003f0c <HAL_UART_Transmit_IT>
      usart4_active = 0;
 800963c:	7018      	strb	r0, [r3, #0]
 800963e:	e7e6      	b.n	800960e <HAL_UART_TxCpltCallback+0x2e>
      usart6_active = 0;
 8009640:	7018      	strb	r0, [r3, #0]
 8009642:	bd70      	pop	{r4, r5, r6, pc}
 8009644:	200095e4 	.word	0x200095e4
 8009648:	200095e0 	.word	0x200095e0
 800964c:	200048a0 	.word	0x200048a0
 8009650:	2000a0ec 	.word	0x2000a0ec
 8009654:	200095a0 	.word	0x200095a0
 8009658:	200068f4 	.word	0x200068f4
 800965c:	20007231 	.word	0x20007231
 8009660:	20007230 	.word	0x20007230

08009664 <HAL_UART_RxCpltCallback>:
  if (huart == &huart4)
 8009664:	4b10      	ldr	r3, [pc, #64]	; (80096a8 <HAL_UART_RxCpltCallback+0x44>)
 8009666:	4298      	cmp	r0, r3
{
 8009668:	b510      	push	{r4, lr}
 800966a:	4604      	mov	r4, r0
  if (huart == &huart4)
 800966c:	d10d      	bne.n	800968a <HAL_UART_RxCpltCallback+0x26>
    xQueueSendFromISR(usart4_rx_queue_handle, usart4_rx_hw_buffer, NULL);
 800966e:	480f      	ldr	r0, [pc, #60]	; (80096ac <HAL_UART_RxCpltCallback+0x48>)
 8009670:	490f      	ldr	r1, [pc, #60]	; (80096b0 <HAL_UART_RxCpltCallback+0x4c>)
 8009672:	6800      	ldr	r0, [r0, #0]
 8009674:	2300      	movs	r3, #0
 8009676:	461a      	mov	r2, r3
 8009678:	f7fd fad2 	bl	8006c20 <xQueueGenericSendFromISR>
    HAL_UART_Receive_IT(&huart4, usart4_rx_hw_buffer, 1);
 800967c:	490c      	ldr	r1, [pc, #48]	; (80096b0 <HAL_UART_RxCpltCallback+0x4c>)
 800967e:	2201      	movs	r2, #1
    HAL_UART_Receive_IT(&huart6, usart6_rx_hw_buffer, 1);
 8009680:	4620      	mov	r0, r4
}
 8009682:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_UART_Receive_IT(&huart6, usart6_rx_hw_buffer, 1);
 8009686:	f7fa bc60 	b.w	8003f4a <HAL_UART_Receive_IT>
  else if (huart == &huart6)
 800968a:	4b0a      	ldr	r3, [pc, #40]	; (80096b4 <HAL_UART_RxCpltCallback+0x50>)
 800968c:	4298      	cmp	r0, r3
 800968e:	d109      	bne.n	80096a4 <HAL_UART_RxCpltCallback+0x40>
    xQueueSendFromISR(usart6_rx_queue_handle, usart6_rx_hw_buffer, NULL);
 8009690:	4809      	ldr	r0, [pc, #36]	; (80096b8 <HAL_UART_RxCpltCallback+0x54>)
 8009692:	490a      	ldr	r1, [pc, #40]	; (80096bc <HAL_UART_RxCpltCallback+0x58>)
 8009694:	6800      	ldr	r0, [r0, #0]
 8009696:	2300      	movs	r3, #0
 8009698:	461a      	mov	r2, r3
 800969a:	f7fd fac1 	bl	8006c20 <xQueueGenericSendFromISR>
    HAL_UART_Receive_IT(&huart6, usart6_rx_hw_buffer, 1);
 800969e:	2201      	movs	r2, #1
 80096a0:	4906      	ldr	r1, [pc, #24]	; (80096bc <HAL_UART_RxCpltCallback+0x58>)
 80096a2:	e7ed      	b.n	8009680 <HAL_UART_RxCpltCallback+0x1c>
 80096a4:	bd10      	pop	{r4, pc}
 80096a6:	bf00      	nop
 80096a8:	200095e4 	.word	0x200095e4
 80096ac:	20006d80 	.word	0x20006d80
 80096b0:	20006b28 	.word	0x20006b28
 80096b4:	200095a0 	.word	0x200095a0
 80096b8:	20004cec 	.word	0x20004cec
 80096bc:	20008348 	.word	0x20008348

080096c0 <SystemClock_Config>:
{
 80096c0:	b530      	push	{r4, r5, lr}
 80096c2:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80096c4:	2230      	movs	r2, #48	; 0x30
 80096c6:	2100      	movs	r1, #0
 80096c8:	a808      	add	r0, sp, #32
 80096ca:	f001 f8fa 	bl	800a8c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80096ce:	2100      	movs	r1, #0
 80096d0:	2214      	movs	r2, #20
 80096d2:	a803      	add	r0, sp, #12
 80096d4:	f001 f8f5 	bl	800a8c2 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 80096d8:	2400      	movs	r4, #0
 80096da:	4b1d      	ldr	r3, [pc, #116]	; (8009750 <SystemClock_Config+0x90>)
 80096dc:	9401      	str	r4, [sp, #4]
 80096de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80096e0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80096e4:	641a      	str	r2, [r3, #64]	; 0x40
 80096e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80096ec:	9301      	str	r3, [sp, #4]
 80096ee:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80096f0:	4b18      	ldr	r3, [pc, #96]	; (8009754 <SystemClock_Config+0x94>)
 80096f2:	9402      	str	r4, [sp, #8]
 80096f4:	681a      	ldr	r2, [r3, #0]
 80096f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80096fa:	601a      	str	r2, [r3, #0]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009702:	9302      	str	r3, [sp, #8]
 8009704:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009706:	2301      	movs	r3, #1
 8009708:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800970a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800970e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009710:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009714:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8009716:	2304      	movs	r3, #4
 8009718:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800971a:	23a8      	movs	r3, #168	; 0xa8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800971c:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLN = 168;
 800971e:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009720:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8009722:	2307      	movs	r3, #7
 8009724:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009726:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009728:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800972a:	f7f9 fba1 	bl	8002e70 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800972e:	230f      	movs	r3, #15
 8009730:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8009732:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8009736:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8009738:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800973a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800973e:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009740:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009742:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009744:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8009746:	f7f9 fd43 	bl	80031d0 <HAL_RCC_ClockConfig>
}
 800974a:	b015      	add	sp, #84	; 0x54
 800974c:	bd30      	pop	{r4, r5, pc}
 800974e:	bf00      	nop
 8009750:	40023800 	.word	0x40023800
 8009754:	40007000 	.word	0x40007000

08009758 <main>:
{
 8009758:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 800975c:	b0ab      	sub	sp, #172	; 0xac
  HAL_Init();
 800975e:	f7f7 fbeb 	bl	8000f38 <HAL_Init>
  SystemClock_Config();
 8009762:	f7ff ffad 	bl	80096c0 <SystemClock_Config>
  HAL_Delay(100);
 8009766:	2064      	movs	r0, #100	; 0x64
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8009768:	2400      	movs	r4, #0
 800976a:	4dae      	ldr	r5, [pc, #696]	; (8009a24 <main+0x2cc>)
  huart6.Instance = USART6;
 800976c:	4fae      	ldr	r7, [pc, #696]	; (8009a28 <main+0x2d0>)
  huart4.Instance = UART4;
 800976e:	f8df 830c 	ldr.w	r8, [pc, #780]	; 8009a7c <main+0x324>
  HAL_Delay(100);
 8009772:	f7f7 fc0d 	bl	8000f90 <HAL_Delay>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009776:	2214      	movs	r2, #20
 8009778:	2100      	movs	r1, #0
 800977a:	a823      	add	r0, sp, #140	; 0x8c
 800977c:	f001 f8a1 	bl	800a8c2 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8009780:	9406      	str	r4, [sp, #24]
 8009782:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOE, LED4_Pin|LED3_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8009784:	48a9      	ldr	r0, [pc, #676]	; (8009a2c <main+0x2d4>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8009786:	f043 0310 	orr.w	r3, r3, #16
 800978a:	632b      	str	r3, [r5, #48]	; 0x30
 800978c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800978e:	f003 0310 	and.w	r3, r3, #16
 8009792:	9306      	str	r3, [sp, #24]
 8009794:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8009796:	9407      	str	r4, [sp, #28]
 8009798:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800979a:	f043 0320 	orr.w	r3, r3, #32
 800979e:	632b      	str	r3, [r5, #48]	; 0x30
 80097a0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80097a2:	f003 0320 	and.w	r3, r3, #32
 80097a6:	9307      	str	r3, [sp, #28]
 80097a8:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80097aa:	9408      	str	r4, [sp, #32]
 80097ac:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80097ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097b2:	632b      	str	r3, [r5, #48]	; 0x30
 80097b4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80097b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097ba:	9308      	str	r3, [sp, #32]
 80097bc:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80097be:	9409      	str	r4, [sp, #36]	; 0x24
 80097c0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80097c2:	f043 0301 	orr.w	r3, r3, #1
 80097c6:	632b      	str	r3, [r5, #48]	; 0x30
 80097c8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80097ca:	f003 0301 	and.w	r3, r3, #1
 80097ce:	9309      	str	r3, [sp, #36]	; 0x24
 80097d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80097d2:	940a      	str	r4, [sp, #40]	; 0x28
 80097d4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80097d6:	f043 0302 	orr.w	r3, r3, #2
 80097da:	632b      	str	r3, [r5, #48]	; 0x30
 80097dc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80097de:	f003 0302 	and.w	r3, r3, #2
 80097e2:	930a      	str	r3, [sp, #40]	; 0x28
 80097e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80097e6:	940b      	str	r4, [sp, #44]	; 0x2c
 80097e8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80097ea:	f043 0304 	orr.w	r3, r3, #4
 80097ee:	632b      	str	r3, [r5, #48]	; 0x30
 80097f0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80097f2:	f003 0304 	and.w	r3, r3, #4
 80097f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80097f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80097fa:	940c      	str	r4, [sp, #48]	; 0x30
 80097fc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80097fe:	f043 0308 	orr.w	r3, r3, #8
 8009802:	632b      	str	r3, [r5, #48]	; 0x30
 8009804:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8009806:	f003 0308 	and.w	r3, r3, #8
 800980a:	930c      	str	r3, [sp, #48]	; 0x30
 800980c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800980e:	940d      	str	r4, [sp, #52]	; 0x34
 8009810:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8009812:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009816:	632b      	str	r3, [r5, #48]	; 0x30
 8009818:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800981a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800981e:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOE, LED4_Pin|LED3_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8009820:	4622      	mov	r2, r4
 8009822:	2178      	movs	r1, #120	; 0x78
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8009824:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOE, LED4_Pin|LED3_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8009826:	f7f7 fff5 	bl	8001814 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, BACKUP_GO_Pin|MAIN_GO_Pin, GPIO_PIN_RESET);
 800982a:	4622      	mov	r2, r4
 800982c:	2160      	movs	r1, #96	; 0x60
 800982e:	4880      	ldr	r0, [pc, #512]	; (8009a30 <main+0x2d8>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009830:	2601      	movs	r6, #1
  HAL_GPIO_WritePin(GPIOA, BACKUP_GO_Pin|MAIN_GO_Pin, GPIO_PIN_RESET);
 8009832:	f7f7 ffef 	bl	8001814 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED4_Pin|LED3_Pin|LED2_Pin|LED1_Pin;
 8009836:	2378      	movs	r3, #120	; 0x78
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009838:	a923      	add	r1, sp, #140	; 0x8c
 800983a:	487c      	ldr	r0, [pc, #496]	; (8009a2c <main+0x2d4>)
  GPIO_InitStruct.Pin = LED4_Pin|LED3_Pin|LED2_Pin|LED1_Pin;
 800983c:	9323      	str	r3, [sp, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800983e:	9624      	str	r6, [sp, #144]	; 0x90
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009840:	9425      	str	r4, [sp, #148]	; 0x94
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009842:	9426      	str	r4, [sp, #152]	; 0x98
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009844:	f7f7 ff00 	bl	8001648 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MAIN_SENSE_Pin|BACKUP_SENSE_Pin;
 8009848:	2390      	movs	r3, #144	; 0x90
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800984a:	a923      	add	r1, sp, #140	; 0x8c
 800984c:	4878      	ldr	r0, [pc, #480]	; (8009a30 <main+0x2d8>)
  GPIO_InitStruct.Pin = MAIN_SENSE_Pin|BACKUP_SENSE_Pin;
 800984e:	9323      	str	r3, [sp, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009850:	9424      	str	r4, [sp, #144]	; 0x90
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009852:	9425      	str	r4, [sp, #148]	; 0x94
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009854:	f7f7 fef8 	bl	8001648 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BACKUP_GO_Pin|MAIN_GO_Pin;
 8009858:	2360      	movs	r3, #96	; 0x60
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800985a:	a923      	add	r1, sp, #140	; 0x8c
 800985c:	4874      	ldr	r0, [pc, #464]	; (8009a30 <main+0x2d8>)
  GPIO_InitStruct.Pin = BACKUP_GO_Pin|MAIN_GO_Pin;
 800985e:	9323      	str	r3, [sp, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009860:	9624      	str	r6, [sp, #144]	; 0x90
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009862:	9425      	str	r4, [sp, #148]	; 0x94
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009864:	9426      	str	r4, [sp, #152]	; 0x98
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009866:	f7f7 feef 	bl	8001648 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = IMU_DEN_Pin|IMU_INT2_Pin|IMU_INT1_Pin|IMU_INT_M_Pin 
 800986a:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800986e:	a923      	add	r1, sp, #140	; 0x8c
 8009870:	486e      	ldr	r0, [pc, #440]	; (8009a2c <main+0x2d4>)
  GPIO_InitStruct.Pin = IMU_DEN_Pin|IMU_INT2_Pin|IMU_INT1_Pin|IMU_INT_M_Pin 
 8009872:	9323      	str	r3, [sp, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009874:	9424      	str	r4, [sp, #144]	; 0x90
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009876:	9425      	str	r4, [sp, #148]	; 0x94
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009878:	f7f7 fee6 	bl	8001648 <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 800987c:	9405      	str	r4, [sp, #20]
 800987e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8009880:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009884:	632b      	str	r3, [r5, #48]	; 0x30
 8009886:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8009888:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800988c:	4622      	mov	r2, r4
 800988e:	2105      	movs	r1, #5
  __HAL_RCC_DMA2_CLK_ENABLE();
 8009890:	9305      	str	r3, [sp, #20]
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8009892:	203b      	movs	r0, #59	; 0x3b
  __HAL_RCC_DMA2_CLK_ENABLE();
 8009894:	9b05      	ldr	r3, [sp, #20]
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8009896:	f7f7 fcdd 	bl	8001254 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800989a:	203b      	movs	r0, #59	; 0x3b
 800989c:	f7f7 fd0e 	bl	80012bc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80098a0:	2105      	movs	r1, #5
 80098a2:	4622      	mov	r2, r4
 80098a4:	2045      	movs	r0, #69	; 0x45
 80098a6:	f7f7 fcd5 	bl	8001254 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80098aa:	2045      	movs	r0, #69	; 0x45
 80098ac:	f7f7 fd06 	bl	80012bc <HAL_NVIC_EnableIRQ>
  huart1.Instance = USART1;
 80098b0:	4860      	ldr	r0, [pc, #384]	; (8009a34 <main+0x2dc>)
  huart1.Init.BaudRate = 115200;
 80098b2:	4b61      	ldr	r3, [pc, #388]	; (8009a38 <main+0x2e0>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80098b4:	6084      	str	r4, [r0, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80098b6:	f04f 090c 	mov.w	r9, #12
  huart1.Init.BaudRate = 115200;
 80098ba:	f44f 35e1 	mov.w	r5, #115200	; 0x1c200
 80098be:	e880 0028 	stmia.w	r0, {r3, r5}
  huart1.Init.StopBits = UART_STOPBITS_1;
 80098c2:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80098c4:	6104      	str	r4, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80098c6:	f8c0 9014 	str.w	r9, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80098ca:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80098cc:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80098ce:	f7fa faef 	bl	8003eb0 <HAL_UART_Init>
  huart2.Instance = USART2;
 80098d2:	485a      	ldr	r0, [pc, #360]	; (8009a3c <main+0x2e4>)
 80098d4:	4b5a      	ldr	r3, [pc, #360]	; (8009a40 <main+0x2e8>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80098d6:	6084      	str	r4, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80098d8:	f44f 7b40 	mov.w	fp, #768	; 0x300
  huart2.Init.BaudRate = 115200;
 80098dc:	e880 0028 	stmia.w	r0, {r3, r5}
  huart2.Init.StopBits = UART_STOPBITS_1;
 80098e0:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80098e2:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80098e4:	f8c0 9014 	str.w	r9, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80098e8:	f8c0 b018 	str.w	fp, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80098ec:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80098ee:	f7fa fadf 	bl	8003eb0 <HAL_UART_Init>
  huart6.Instance = USART6;
 80098f2:	4a54      	ldr	r2, [pc, #336]	; (8009a44 <main+0x2ec>)
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80098f4:	60bc      	str	r4, [r7, #8]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80098f6:	4638      	mov	r0, r7
  huart6.Init.BaudRate = 115200;
 80098f8:	e887 0024 	stmia.w	r7, {r2, r5}
  huart6.Init.StopBits = UART_STOPBITS_1;
 80098fc:	60fc      	str	r4, [r7, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80098fe:	613c      	str	r4, [r7, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8009900:	f8c7 9014 	str.w	r9, [r7, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8009904:	f8c7 b018 	str.w	fp, [r7, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8009908:	61fc      	str	r4, [r7, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800990a:	f7fa fad1 	bl	8003eb0 <HAL_UART_Init>
  hsd.Instance = SDIO;
 800990e:	4a4e      	ldr	r2, [pc, #312]	; (8009a48 <main+0x2f0>)
 8009910:	494e      	ldr	r1, [pc, #312]	; (8009a4c <main+0x2f4>)
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8009912:	6094      	str	r4, [r2, #8]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8009914:	e882 0012 	stmia.w	r2, {r1, r4}
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_ENABLE;
 8009918:	f44f 7100 	mov.w	r1, #512	; 0x200
 800991c:	60d1      	str	r1, [r2, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800991e:	6114      	str	r4, [r2, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8009920:	6154      	str	r4, [r2, #20]
  hsd.Init.ClockDiv = 0;
 8009922:	6194      	str	r4, [r2, #24]
  huart4.Instance = UART4;
 8009924:	4a4a      	ldr	r2, [pc, #296]	; (8009a50 <main+0x2f8>)
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8009926:	f8c8 4008 	str.w	r4, [r8, #8]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800992a:	4640      	mov	r0, r8
  huart4.Init.BaudRate = 115200;
 800992c:	e888 0024 	stmia.w	r8, {r2, r5}
  huart4.Init.StopBits = UART_STOPBITS_1;
 8009930:	f8c8 400c 	str.w	r4, [r8, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8009934:	f8c8 4010 	str.w	r4, [r8, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8009938:	f8c8 9014 	str.w	r9, [r8, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800993c:	f8c8 4018 	str.w	r4, [r8, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8009940:	f8c8 401c 	str.w	r4, [r8, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8009944:	f7fa fab4 	bl	8003eb0 <HAL_UART_Init>
  hi2c3.Instance = I2C3;
 8009948:	4842      	ldr	r0, [pc, #264]	; (8009a54 <main+0x2fc>)
  hi2c3.Init.ClockSpeed = 400000;
 800994a:	4b43      	ldr	r3, [pc, #268]	; (8009a58 <main+0x300>)
 800994c:	4a43      	ldr	r2, [pc, #268]	; (8009a5c <main+0x304>)
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800994e:	6084      	str	r4, [r0, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009950:	f44f 4a80 	mov.w	sl, #16384	; 0x4000
  hi2c3.Init.ClockSpeed = 400000;
 8009954:	e880 000c 	stmia.w	r0, {r2, r3}
  hi2c3.Init.OwnAddress1 = 0;
 8009958:	60c4      	str	r4, [r0, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800995a:	f8c0 a010 	str.w	sl, [r0, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800995e:	6144      	str	r4, [r0, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8009960:	6184      	str	r4, [r0, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009962:	61c4      	str	r4, [r0, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009964:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8009966:	f7f8 f92b 	bl	8001bc0 <HAL_I2C_Init>
  huart3.Instance = USART3;
 800996a:	483d      	ldr	r0, [pc, #244]	; (8009a60 <main+0x308>)
 800996c:	4a3d      	ldr	r2, [pc, #244]	; (8009a64 <main+0x30c>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800996e:	6084      	str	r4, [r0, #8]
  huart3.Init.BaudRate = 115200;
 8009970:	e880 0024 	stmia.w	r0, {r2, r5}
  huart3.Init.StopBits = UART_STOPBITS_1;
 8009974:	60c4      	str	r4, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8009976:	6104      	str	r4, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8009978:	f8c0 9014 	str.w	r9, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800997c:	f8c0 b018 	str.w	fp, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8009980:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8009982:	f7fa fa95 	bl	8003eb0 <HAL_UART_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 8009986:	4621      	mov	r1, r4
 8009988:	2210      	movs	r2, #16
 800998a:	a823      	add	r0, sp, #140	; 0x8c
 800998c:	f000 ff99 	bl	800a8c2 <memset>
  hadc3.Instance = ADC3;
 8009990:	4d35      	ldr	r5, [pc, #212]	; (8009a68 <main+0x310>)
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8009992:	4a36      	ldr	r2, [pc, #216]	; (8009a6c <main+0x314>)
  hadc3.Init.ScanConvMode = ENABLE;
 8009994:	612e      	str	r6, [r5, #16]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8009996:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800999a:	e885 000c 	stmia.w	r5, {r2, r3}
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800999e:	4b34      	ldr	r3, [pc, #208]	; (8009a70 <main+0x318>)
 80099a0:	62ab      	str	r3, [r5, #40]	; 0x28
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80099a2:	4628      	mov	r0, r5
  hadc3.Init.NbrOfConversion = 4;
 80099a4:	2304      	movs	r3, #4
 80099a6:	61eb      	str	r3, [r5, #28]
 80099a8:	9303      	str	r3, [sp, #12]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80099aa:	f885 6030 	strb.w	r6, [r5, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80099ae:	616e      	str	r6, [r5, #20]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80099b0:	60ac      	str	r4, [r5, #8]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80099b2:	762c      	strb	r4, [r5, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80099b4:	f885 4020 	strb.w	r4, [r5, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80099b8:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80099ba:	60ec      	str	r4, [r5, #12]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80099bc:	f7f7 fafc 	bl	8000fb8 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_9;
 80099c0:	2209      	movs	r2, #9
 80099c2:	9223      	str	r2, [sp, #140]	; 0x8c
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80099c4:	a923      	add	r1, sp, #140	; 0x8c
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80099c6:	2203      	movs	r2, #3
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80099c8:	4628      	mov	r0, r5
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80099ca:	9225      	str	r2, [sp, #148]	; 0x94
 80099cc:	9202      	str	r2, [sp, #8]
  sConfig.Rank = 1;
 80099ce:	9624      	str	r6, [sp, #144]	; 0x90
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80099d0:	f7f7 fb98 	bl	8001104 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_14;
 80099d4:	210e      	movs	r1, #14
 80099d6:	9123      	str	r1, [sp, #140]	; 0x8c
  sConfig.Rank = 2;
 80099d8:	2102      	movs	r1, #2
 80099da:	9124      	str	r1, [sp, #144]	; 0x90
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80099dc:	4628      	mov	r0, r5
 80099de:	a923      	add	r1, sp, #140	; 0x8c
 80099e0:	f7f7 fb90 	bl	8001104 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_15;
 80099e4:	210f      	movs	r1, #15
  sConfig.Rank = 3;
 80099e6:	9a02      	ldr	r2, [sp, #8]
  sConfig.Channel = ADC_CHANNEL_15;
 80099e8:	9123      	str	r1, [sp, #140]	; 0x8c
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80099ea:	4628      	mov	r0, r5
 80099ec:	a923      	add	r1, sp, #140	; 0x8c
  sConfig.Rank = 3;
 80099ee:	9224      	str	r2, [sp, #144]	; 0x90
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80099f0:	f7f7 fb88 	bl	8001104 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_4;
 80099f4:	9b03      	ldr	r3, [sp, #12]
 80099f6:	9323      	str	r3, [sp, #140]	; 0x8c
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80099f8:	a923      	add	r1, sp, #140	; 0x8c
 80099fa:	4628      	mov	r0, r5
  sConfig.Rank = 4;
 80099fc:	9324      	str	r3, [sp, #144]	; 0x90
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80099fe:	f7f7 fb81 	bl	8001104 <HAL_ADC_ConfigChannel>
  hi2c2.Instance = I2C2;
 8009a02:	481c      	ldr	r0, [pc, #112]	; (8009a74 <main+0x31c>)
  hi2c2.Init.ClockSpeed = 400000;
 8009a04:	491c      	ldr	r1, [pc, #112]	; (8009a78 <main+0x320>)
 8009a06:	4b14      	ldr	r3, [pc, #80]	; (8009a58 <main+0x300>)
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8009a08:	6084      	str	r4, [r0, #8]
  hi2c2.Init.ClockSpeed = 400000;
 8009a0a:	e880 000a 	stmia.w	r0, {r1, r3}
  hi2c2.Init.OwnAddress1 = 0;
 8009a0e:	60c4      	str	r4, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009a10:	f8c0 a010 	str.w	sl, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009a14:	6144      	str	r4, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8009a16:	6184      	str	r4, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009a18:	61c4      	str	r4, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009a1a:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8009a1c:	f7f8 f8d0 	bl	8001bc0 <HAL_I2C_Init>
  usart4_rx_queue_handle = xQueueCreateStatic(sizeof(usart4_rx_buffer), 1, usart4_rx_buffer, &usart4_rx_queue);
 8009a20:	4631      	mov	r1, r6
 8009a22:	e02d      	b.n	8009a80 <main+0x328>
 8009a24:	40023800 	.word	0x40023800
 8009a28:	200095a0 	.word	0x200095a0
 8009a2c:	40021000 	.word	0x40021000
 8009a30:	40020000 	.word	0x40020000
 8009a34:	20005dbc 	.word	0x20005dbc
 8009a38:	40011000 	.word	0x40011000
 8009a3c:	20009a2c 	.word	0x20009a2c
 8009a40:	40004400 	.word	0x40004400
 8009a44:	40011400 	.word	0x40011400
 8009a48:	200082c4 	.word	0x200082c4
 8009a4c:	40012c00 	.word	0x40012c00
 8009a50:	40004c00 	.word	0x40004c00
 8009a54:	200048a4 	.word	0x200048a4
 8009a58:	00061a80 	.word	0x00061a80
 8009a5c:	40005c00 	.word	0x40005c00
 8009a60:	2000497c 	.word	0x2000497c
 8009a64:	40004800 	.word	0x40004800
 8009a68:	2000532c 	.word	0x2000532c
 8009a6c:	40012200 	.word	0x40012200
 8009a70:	0f000001 	.word	0x0f000001
 8009a74:	20004c4c 	.word	0x20004c4c
 8009a78:	40005800 	.word	0x40005800
 8009a7c:	200095e4 	.word	0x200095e4
 8009a80:	4b5e      	ldr	r3, [pc, #376]	; (8009bfc <main+0x4a4>)
 8009a82:	4a5f      	ldr	r2, [pc, #380]	; (8009c00 <main+0x4a8>)
 8009a84:	9400      	str	r4, [sp, #0]
 8009a86:	2080      	movs	r0, #128	; 0x80
 8009a88:	f7fc ffa6 	bl	80069d8 <xQueueGenericCreateStatic>
 8009a8c:	4b5d      	ldr	r3, [pc, #372]	; (8009c04 <main+0x4ac>)
  usart4_tx_queue_handle = xQueueCreateStatic(sizeof(usart4_tx_buffer), 1, usart4_tx_buffer, &usart4_tx_queue);
 8009a8e:	4a5e      	ldr	r2, [pc, #376]	; (8009c08 <main+0x4b0>)
  usart4_rx_queue_handle = xQueueCreateStatic(sizeof(usart4_rx_buffer), 1, usart4_rx_buffer, &usart4_rx_queue);
 8009a90:	6018      	str	r0, [r3, #0]
  usart4_tx_queue_handle = xQueueCreateStatic(sizeof(usart4_tx_buffer), 1, usart4_tx_buffer, &usart4_tx_queue);
 8009a92:	4631      	mov	r1, r6
 8009a94:	4b5d      	ldr	r3, [pc, #372]	; (8009c0c <main+0x4b4>)
 8009a96:	9400      	str	r4, [sp, #0]
 8009a98:	2080      	movs	r0, #128	; 0x80
 8009a9a:	f7fc ff9d 	bl	80069d8 <xQueueGenericCreateStatic>
 8009a9e:	4b5c      	ldr	r3, [pc, #368]	; (8009c10 <main+0x4b8>)
  HAL_UART_Receive_IT(&huart4, usart4_rx_hw_buffer, 1);
 8009aa0:	495c      	ldr	r1, [pc, #368]	; (8009c14 <main+0x4bc>)
  usart4_tx_queue_handle = xQueueCreateStatic(sizeof(usart4_tx_buffer), 1, usart4_tx_buffer, &usart4_tx_queue);
 8009aa2:	6018      	str	r0, [r3, #0]
  HAL_UART_Receive_IT(&huart4, usart4_rx_hw_buffer, 1);
 8009aa4:	4632      	mov	r2, r6
 8009aa6:	4640      	mov	r0, r8
 8009aa8:	f7fa fa4f 	bl	8003f4a <HAL_UART_Receive_IT>
  usart6_rx_queue_handle = xQueueCreateStatic(sizeof(usart6_rx_buffer), 1, usart6_rx_buffer, &usart6_rx_queue);
 8009aac:	4631      	mov	r1, r6
 8009aae:	4b5a      	ldr	r3, [pc, #360]	; (8009c18 <main+0x4c0>)
 8009ab0:	4a5a      	ldr	r2, [pc, #360]	; (8009c1c <main+0x4c4>)
 8009ab2:	9400      	str	r4, [sp, #0]
 8009ab4:	2080      	movs	r0, #128	; 0x80
 8009ab6:	f7fc ff8f 	bl	80069d8 <xQueueGenericCreateStatic>
 8009aba:	4b59      	ldr	r3, [pc, #356]	; (8009c20 <main+0x4c8>)
  usart6_tx_queue_handle = xQueueCreateStatic(sizeof(usart6_tx_buffer), 1, usart6_tx_buffer, &usart6_tx_queue);
 8009abc:	4a59      	ldr	r2, [pc, #356]	; (8009c24 <main+0x4cc>)
  usart6_rx_queue_handle = xQueueCreateStatic(sizeof(usart6_rx_buffer), 1, usart6_rx_buffer, &usart6_rx_queue);
 8009abe:	6018      	str	r0, [r3, #0]
  usart6_tx_queue_handle = xQueueCreateStatic(sizeof(usart6_tx_buffer), 1, usart6_tx_buffer, &usart6_tx_queue);
 8009ac0:	4631      	mov	r1, r6
 8009ac2:	4b59      	ldr	r3, [pc, #356]	; (8009c28 <main+0x4d0>)
 8009ac4:	9400      	str	r4, [sp, #0]
 8009ac6:	2080      	movs	r0, #128	; 0x80
 8009ac8:	f7fc ff86 	bl	80069d8 <xQueueGenericCreateStatic>
 8009acc:	4b57      	ldr	r3, [pc, #348]	; (8009c2c <main+0x4d4>)
  HAL_UART_Receive_IT(&huart6, usart6_rx_hw_buffer, 1);
 8009ace:	4958      	ldr	r1, [pc, #352]	; (8009c30 <main+0x4d8>)
  usart6_tx_queue_handle = xQueueCreateStatic(sizeof(usart6_tx_buffer), 1, usart6_tx_buffer, &usart6_tx_queue);
 8009ad0:	6018      	str	r0, [r3, #0]
  HAL_UART_Receive_IT(&huart6, usart6_rx_hw_buffer, 1);
 8009ad2:	4632      	mov	r2, r6
 8009ad4:	4638      	mov	r0, r7
 8009ad6:	f7fa fa38 	bl	8003f4a <HAL_UART_Receive_IT>
  rx_msg_queue_handle = xQueueCreateStatic(RX_MSG_QUEUE_LEN, sizeof(struct message), rx_msg_buffer, &rx_msg_queue);
 8009ada:	4b56      	ldr	r3, [pc, #344]	; (8009c34 <main+0x4dc>)
 8009adc:	4a56      	ldr	r2, [pc, #344]	; (8009c38 <main+0x4e0>)
 8009ade:	9400      	str	r4, [sp, #0]
 8009ae0:	2148      	movs	r1, #72	; 0x48
 8009ae2:	2008      	movs	r0, #8
 8009ae4:	f7fc ff78 	bl	80069d8 <xQueueGenericCreateStatic>
 8009ae8:	4b54      	ldr	r3, [pc, #336]	; (8009c3c <main+0x4e4>)
  tx_msg_queue_handle = xQueueCreateStatic(TX_MSG_QUEUE_LEN, sizeof(struct message), tx_msg_buffer, &tx_msg_queue);
 8009aea:	4a55      	ldr	r2, [pc, #340]	; (8009c40 <main+0x4e8>)
  rx_msg_queue_handle = xQueueCreateStatic(RX_MSG_QUEUE_LEN, sizeof(struct message), rx_msg_buffer, &rx_msg_queue);
 8009aec:	6018      	str	r0, [r3, #0]
  tx_msg_queue_handle = xQueueCreateStatic(TX_MSG_QUEUE_LEN, sizeof(struct message), tx_msg_buffer, &tx_msg_queue);
 8009aee:	2148      	movs	r1, #72	; 0x48
 8009af0:	4b54      	ldr	r3, [pc, #336]	; (8009c44 <main+0x4ec>)
 8009af2:	9400      	str	r4, [sp, #0]
 8009af4:	2008      	movs	r0, #8
 8009af6:	f7fc ff6f 	bl	80069d8 <xQueueGenericCreateStatic>
 8009afa:	4b53      	ldr	r3, [pc, #332]	; (8009c48 <main+0x4f0>)
  imu_log_queue_handle = xQueueCreateStatic(IMU_LOG_BUFFER_SAMPLES, sizeof(struct imu_sample), imu_log_buffer, &imu_log_queue);
 8009afc:	4a53      	ldr	r2, [pc, #332]	; (8009c4c <main+0x4f4>)
  tx_msg_queue_handle = xQueueCreateStatic(TX_MSG_QUEUE_LEN, sizeof(struct message), tx_msg_buffer, &tx_msg_queue);
 8009afe:	6018      	str	r0, [r3, #0]
  imu_log_queue_handle = xQueueCreateStatic(IMU_LOG_BUFFER_SAMPLES, sizeof(struct imu_sample), imu_log_buffer, &imu_log_queue);
 8009b00:	2114      	movs	r1, #20
 8009b02:	4b53      	ldr	r3, [pc, #332]	; (8009c50 <main+0x4f8>)
 8009b04:	9400      	str	r4, [sp, #0]
 8009b06:	2080      	movs	r0, #128	; 0x80
 8009b08:	f7fc ff66 	bl	80069d8 <xQueueGenericCreateStatic>
 8009b0c:	4b51      	ldr	r3, [pc, #324]	; (8009c54 <main+0x4fc>)
  mag_log_queue_handle = xQueueCreateStatic(MAG_LOG_BUFFER_SAMPLES, sizeof(struct mag_sample), mag_log_buffer, &mag_log_queue);
 8009b0e:	4a52      	ldr	r2, [pc, #328]	; (8009c58 <main+0x500>)
  imu_log_queue_handle = xQueueCreateStatic(IMU_LOG_BUFFER_SAMPLES, sizeof(struct imu_sample), imu_log_buffer, &imu_log_queue);
 8009b10:	6018      	str	r0, [r3, #0]
  mag_log_queue_handle = xQueueCreateStatic(MAG_LOG_BUFFER_SAMPLES, sizeof(struct mag_sample), mag_log_buffer, &mag_log_queue);
 8009b12:	4649      	mov	r1, r9
 8009b14:	4b51      	ldr	r3, [pc, #324]	; (8009c5c <main+0x504>)
 8009b16:	9400      	str	r4, [sp, #0]
 8009b18:	2080      	movs	r0, #128	; 0x80
 8009b1a:	f7fc ff5d 	bl	80069d8 <xQueueGenericCreateStatic>
 8009b1e:	4b50      	ldr	r3, [pc, #320]	; (8009c60 <main+0x508>)
  baro_log_queue_handle = xQueueCreateStatic(BARO_LOG_BUFFER_SAMPLES, sizeof(struct baro_sample), baro_log_buffer, &baro_log_queue);
 8009b20:	4a50      	ldr	r2, [pc, #320]	; (8009c64 <main+0x50c>)
  mag_log_queue_handle = xQueueCreateStatic(MAG_LOG_BUFFER_SAMPLES, sizeof(struct mag_sample), mag_log_buffer, &mag_log_queue);
 8009b22:	6018      	str	r0, [r3, #0]
  baro_log_queue_handle = xQueueCreateStatic(BARO_LOG_BUFFER_SAMPLES, sizeof(struct baro_sample), baro_log_buffer, &baro_log_queue);
 8009b24:	2114      	movs	r1, #20
 8009b26:	4b50      	ldr	r3, [pc, #320]	; (8009c68 <main+0x510>)
 8009b28:	9400      	str	r4, [sp, #0]
 8009b2a:	2080      	movs	r0, #128	; 0x80
 8009b2c:	f7fc ff54 	bl	80069d8 <xQueueGenericCreateStatic>
 8009b30:	4b4e      	ldr	r3, [pc, #312]	; (8009c6c <main+0x514>)
  imu_mon_queue_handle = xQueueCreateStatic(IMU_MON_BUFFER_SAMPLES, sizeof(struct imu_sample), imu_mon_buffer, &imu_mon_queue);
 8009b32:	4a4f      	ldr	r2, [pc, #316]	; (8009c70 <main+0x518>)
  baro_log_queue_handle = xQueueCreateStatic(BARO_LOG_BUFFER_SAMPLES, sizeof(struct baro_sample), baro_log_buffer, &baro_log_queue);
 8009b34:	6018      	str	r0, [r3, #0]
  imu_mon_queue_handle = xQueueCreateStatic(IMU_MON_BUFFER_SAMPLES, sizeof(struct imu_sample), imu_mon_buffer, &imu_mon_queue);
 8009b36:	2114      	movs	r1, #20
 8009b38:	4b4e      	ldr	r3, [pc, #312]	; (8009c74 <main+0x51c>)
 8009b3a:	9400      	str	r4, [sp, #0]
 8009b3c:	2010      	movs	r0, #16
 8009b3e:	f7fc ff4b 	bl	80069d8 <xQueueGenericCreateStatic>
 8009b42:	4b4d      	ldr	r3, [pc, #308]	; (8009c78 <main+0x520>)
  baro_mon_queue_handle = xQueueCreateStatic(BARO_MON_BUFFER_SAMPLES, sizeof(struct baro_sample), baro_mon_buffer, &baro_mon_queue);
 8009b44:	4a4d      	ldr	r2, [pc, #308]	; (8009c7c <main+0x524>)
  imu_mon_queue_handle = xQueueCreateStatic(IMU_MON_BUFFER_SAMPLES, sizeof(struct imu_sample), imu_mon_buffer, &imu_mon_queue);
 8009b46:	6018      	str	r0, [r3, #0]
  baro_mon_queue_handle = xQueueCreateStatic(BARO_MON_BUFFER_SAMPLES, sizeof(struct baro_sample), baro_mon_buffer, &baro_mon_queue);
 8009b48:	2114      	movs	r1, #20
 8009b4a:	4b4d      	ldr	r3, [pc, #308]	; (8009c80 <main+0x528>)
 8009b4c:	9400      	str	r4, [sp, #0]
 8009b4e:	2010      	movs	r0, #16
 8009b50:	f7fc ff42 	bl	80069d8 <xQueueGenericCreateStatic>
 8009b54:	4b4b      	ldr	r3, [pc, #300]	; (8009c84 <main+0x52c>)
  gps_log_queue_handle = xQueueCreateStatic(sizeof(gps_log_buffer), 1, gps_log_buffer, &gps_log_queue);
 8009b56:	4a4c      	ldr	r2, [pc, #304]	; (8009c88 <main+0x530>)
  baro_mon_queue_handle = xQueueCreateStatic(BARO_MON_BUFFER_SAMPLES, sizeof(struct baro_sample), baro_mon_buffer, &baro_mon_queue);
 8009b58:	6018      	str	r0, [r3, #0]
  gps_log_queue_handle = xQueueCreateStatic(sizeof(gps_log_buffer), 1, gps_log_buffer, &gps_log_queue);
 8009b5a:	4631      	mov	r1, r6
 8009b5c:	4b4b      	ldr	r3, [pc, #300]	; (8009c8c <main+0x534>)
 8009b5e:	9400      	str	r4, [sp, #0]
 8009b60:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8009b64:	f7fc ff38 	bl	80069d8 <xQueueGenericCreateStatic>
 8009b68:	4b49      	ldr	r3, [pc, #292]	; (8009c90 <main+0x538>)
  mon_log_queue_handle = xQueueCreateStatic(sizeof(mon_log_buffer), 1, mon_log_buffer, &mon_log_queue);
 8009b6a:	4a4a      	ldr	r2, [pc, #296]	; (8009c94 <main+0x53c>)
  gps_log_queue_handle = xQueueCreateStatic(sizeof(gps_log_buffer), 1, gps_log_buffer, &gps_log_queue);
 8009b6c:	6018      	str	r0, [r3, #0]
  mon_log_queue_handle = xQueueCreateStatic(sizeof(mon_log_buffer), 1, mon_log_buffer, &mon_log_queue);
 8009b6e:	4631      	mov	r1, r6
 8009b70:	4b49      	ldr	r3, [pc, #292]	; (8009c98 <main+0x540>)
 8009b72:	9400      	str	r4, [sp, #0]
 8009b74:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8009b78:	f7fc ff2e 	bl	80069d8 <xQueueGenericCreateStatic>
  osThreadStaticDef(loggingTask, StartLoggingTask, osPriorityLow, 0, 512, loggingTaskBuffer, &loggingTaskControlBlock);
 8009b7c:	4d47      	ldr	r5, [pc, #284]	; (8009c9c <main+0x544>)
  mon_log_queue_handle = xQueueCreateStatic(sizeof(mon_log_buffer), 1, mon_log_buffer, &mon_log_queue);
 8009b7e:	4b48      	ldr	r3, [pc, #288]	; (8009ca0 <main+0x548>)
 8009b80:	6018      	str	r0, [r3, #0]
  osThreadStaticDef(loggingTask, StartLoggingTask, osPriorityLow, 0, 512, loggingTaskBuffer, &loggingTaskControlBlock);
 8009b82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009b84:	ae0e      	add	r6, sp, #56	; 0x38
 8009b86:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009b88:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009b8c:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  loggingTaskHandle = osThreadCreate(osThread(loggingTask), NULL);
 8009b90:	4621      	mov	r1, r4
 8009b92:	a80e      	add	r0, sp, #56	; 0x38
 8009b94:	f7fc fa46 	bl	8006024 <osThreadCreate>
 8009b98:	4b42      	ldr	r3, [pc, #264]	; (8009ca4 <main+0x54c>)
  osThreadStaticDef(sensorTask, StartSensorTask, osPriorityNormal, 0, 512, sensorTaskBuffer, &sensorTaskControlBlock);
 8009b9a:	eb05 0709 	add.w	r7, r5, r9
  loggingTaskHandle = osThreadCreate(osThread(loggingTask), NULL);
 8009b9e:	6018      	str	r0, [r3, #0]
  osThreadStaticDef(sensorTask, StartSensorTask, osPriorityNormal, 0, 512, sensorTaskBuffer, &sensorTaskControlBlock);
 8009ba0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8009ba2:	ae15      	add	r6, sp, #84	; 0x54
 8009ba4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009ba6:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8009baa:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  sensorTaskHandle = osThreadCreate(osThread(sensorTask), NULL);
 8009bae:	4621      	mov	r1, r4
 8009bb0:	a815      	add	r0, sp, #84	; 0x54
 8009bb2:	f7fc fa37 	bl	8006024 <osThreadCreate>
 8009bb6:	4b3c      	ldr	r3, [pc, #240]	; (8009ca8 <main+0x550>)
  osThreadStaticDef(monitorTask, StartMonitorTask, osPriorityNormal, 0, 512, monitorTaskBuffer, &monitorTaskControlBlock);
 8009bb8:	f105 0728 	add.w	r7, r5, #40	; 0x28
  sensorTaskHandle = osThreadCreate(osThread(sensorTask), NULL);
 8009bbc:	6018      	str	r0, [r3, #0]
  osThreadStaticDef(monitorTask, StartMonitorTask, osPriorityNormal, 0, 512, monitorTaskBuffer, &monitorTaskControlBlock);
 8009bbe:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8009bc0:	ae1c      	add	r6, sp, #112	; 0x70
 8009bc2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009bc4:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8009bc8:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  monitorTaskHandle = osThreadCreate(osThread(monitorTask), NULL);
 8009bcc:	4621      	mov	r1, r4
 8009bce:	a81c      	add	r0, sp, #112	; 0x70
 8009bd0:	f7fc fa28 	bl	8006024 <osThreadCreate>
 8009bd4:	4b35      	ldr	r3, [pc, #212]	; (8009cac <main+0x554>)
  osThreadStaticDef(messageHandler, startMessageHandler, osPriorityNormal, 0, 512, messageHandlerBuffer, &messageHandlerControlBlock);
 8009bd6:	3544      	adds	r5, #68	; 0x44
  monitorTaskHandle = osThreadCreate(osThread(monitorTask), NULL);
 8009bd8:	6018      	str	r0, [r3, #0]
  osThreadStaticDef(messageHandler, startMessageHandler, osPriorityNormal, 0, 512, messageHandlerBuffer, &messageHandlerControlBlock);
 8009bda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009bdc:	ae23      	add	r6, sp, #140	; 0x8c
 8009bde:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009be0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009be4:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  messageHandlerHandle = osThreadCreate(osThread(messageHandler), NULL);
 8009be8:	4621      	mov	r1, r4
 8009bea:	a823      	add	r0, sp, #140	; 0x8c
 8009bec:	f7fc fa1a 	bl	8006024 <osThreadCreate>
 8009bf0:	4b2f      	ldr	r3, [pc, #188]	; (8009cb0 <main+0x558>)
 8009bf2:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8009bf4:	f7fc fa02 	bl	8005ffc <osKernelStart>
 8009bf8:	e7fe      	b.n	8009bf8 <main+0x4a0>
 8009bfa:	bf00      	nop
 8009bfc:	2000a698 	.word	0x2000a698
 8009c00:	20006c70 	.word	0x20006c70
 8009c04:	20006d80 	.word	0x20006d80
 8009c08:	20006644 	.word	0x20006644
 8009c0c:	20005290 	.word	0x20005290
 8009c10:	200095e0 	.word	0x200095e0
 8009c14:	20006b28 	.word	0x20006b28
 8009c18:	20007234 	.word	0x20007234
 8009c1c:	200048f8 	.word	0x200048f8
 8009c20:	20004cec 	.word	0x20004cec
 8009c24:	20006d00 	.word	0x20006d00
 8009c28:	20006d84 	.word	0x20006d84
 8009c2c:	200068f4 	.word	0x200068f4
 8009c30:	20008348 	.word	0x20008348
 8009c34:	20004ca0 	.word	0x20004ca0
 8009c38:	200049bc 	.word	0x200049bc
 8009c3c:	20004c48 	.word	0x20004c48
 8009c40:	20004f74 	.word	0x20004f74
 8009c44:	200051b4 	.word	0x200051b4
 8009c48:	2000722c 	.word	0x2000722c
 8009c4c:	20005374 	.word	0x20005374
 8009c50:	20004bfc 	.word	0x20004bfc
 8009c54:	2000a460 	.word	0x2000a460
 8009c58:	20009aec 	.word	0x20009aec
 8009c5c:	2000727c 	.word	0x2000727c
 8009c60:	20006c6c 	.word	0x20006c6c
 8009c64:	20008ba0 	.word	0x20008ba0
 8009c68:	20005d74 	.word	0x20005d74
 8009c6c:	20004ce8 	.word	0x20004ce8
 8009c70:	2000a320 	.word	0x2000a320
 8009c74:	20005244 	.word	0x20005244
 8009c78:	20004854 	.word	0x20004854
 8009c7c:	20006b29 	.word	0x20006b29
 8009c80:	200051fc 	.word	0x200051fc
 8009c84:	20004850 	.word	0x20004850
 8009c88:	20006dcc 	.word	0x20006dcc
 8009c8c:	20004858 	.word	0x20004858
 8009c90:	20004978 	.word	0x20004978
 8009c94:	2000962c 	.word	0x2000962c
 8009c98:	20005dfc 	.word	0x20005dfc
 8009c9c:	0800c828 	.word	0x0800c828
 8009ca0:	20009624 	.word	0x20009624
 8009ca4:	20009628 	.word	0x20009628
 8009ca8:	20004c44 	.word	0x20004c44
 8009cac:	2000a694 	.word	0x2000a694
 8009cb0:	2000528c 	.word	0x2000528c

08009cb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009cb4:	4770      	bx	lr
	...

08009cb8 <SD_CheckStatus.isra.0>:
  }

  return -1;
}

static DSTATUS SD_CheckStatus(BYTE lun)
 8009cb8:	b510      	push	{r4, lr}
{
  Stat = STA_NOINIT;
 8009cba:	4c06      	ldr	r4, [pc, #24]	; (8009cd4 <SD_CheckStatus.isra.0+0x1c>)
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009cc0:	f7fd ffce 	bl	8007c60 <BSP_SD_GetCardState>
 8009cc4:	4623      	mov	r3, r4
 8009cc6:	b918      	cbnz	r0, 8009cd0 <SD_CheckStatus.isra.0+0x18>
  {
    Stat &= ~STA_NOINIT;
 8009cc8:	7822      	ldrb	r2, [r4, #0]
 8009cca:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009cce:	7022      	strb	r2, [r4, #0]
  }

  return Stat;
 8009cd0:	7818      	ldrb	r0, [r3, #0]
}
 8009cd2:	bd10      	pop	{r4, pc}
 8009cd4:	2000000e 	.word	0x2000000e

08009cd8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
Stat = STA_NOINIT; 
 8009cda:	4c0f      	ldr	r4, [pc, #60]	; (8009d18 <SD_initialize+0x40>)
{
 8009cdc:	b085      	sub	sp, #20
Stat = STA_NOINIT; 
 8009cde:	2301      	movs	r3, #1
 8009ce0:	7023      	strb	r3, [r4, #0]

  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
  if(osKernelRunning())
 8009ce2:	f7fc f990 	bl	8006006 <osKernelRunning>
 8009ce6:	b1a0      	cbz	r0, 8009d12 <SD_initialize+0x3a>
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8009ce8:	f7fd ff8e 	bl	8007c08 <BSP_SD_Init>
 8009cec:	b910      	cbnz	r0, 8009cf4 <SD_initialize+0x1c>
    {
      Stat = SD_CheckStatus(lun);
 8009cee:	f7ff ffe3 	bl	8009cb8 <SD_CheckStatus.isra.0>
 8009cf2:	7020      	strb	r0, [r4, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if ((Stat != STA_NOINIT) && (SDQueueID == NULL))
 8009cf4:	7823      	ldrb	r3, [r4, #0]
 8009cf6:	2b01      	cmp	r3, #1
 8009cf8:	d00b      	beq.n	8009d12 <SD_initialize+0x3a>
 8009cfa:	4e08      	ldr	r6, [pc, #32]	; (8009d1c <SD_initialize+0x44>)
 8009cfc:	6837      	ldr	r7, [r6, #0]
 8009cfe:	b947      	cbnz	r7, 8009d12 <SD_initialize+0x3a>
    {
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8009d00:	4b07      	ldr	r3, [pc, #28]	; (8009d20 <SD_initialize+0x48>)
 8009d02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009d04:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8009d08:	4639      	mov	r1, r7
 8009d0a:	4668      	mov	r0, sp
 8009d0c:	f7fc fa2a 	bl	8006164 <osMessageCreate>
 8009d10:	6030      	str	r0, [r6, #0]
    }
  }
  return Stat;
 8009d12:	7820      	ldrb	r0, [r4, #0]
}
 8009d14:	b005      	add	sp, #20
 8009d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d18:	2000000e 	.word	0x2000000e
 8009d1c:	200040d8 	.word	0x200040d8
 8009d20:	0800c898 	.word	0x0800c898

08009d24 <SD_status>:
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
  return SD_CheckStatus(lun);
 8009d24:	f7ff bfc8 	b.w	8009cb8 <SD_CheckStatus.isra.0>

08009d28 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009d28:	b510      	push	{r4, lr}
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009d2a:	4b12      	ldr	r3, [pc, #72]	; (8009d74 <SD_ioctl+0x4c>)
 8009d2c:	781b      	ldrb	r3, [r3, #0]
 8009d2e:	07db      	lsls	r3, r3, #31
{
 8009d30:	b088      	sub	sp, #32
 8009d32:	4614      	mov	r4, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009d34:	d41b      	bmi.n	8009d6e <SD_ioctl+0x46>

  switch (cmd)
 8009d36:	2903      	cmp	r1, #3
 8009d38:	d803      	bhi.n	8009d42 <SD_ioctl+0x1a>
 8009d3a:	e8df f001 	tbb	[pc, r1]
 8009d3e:	0510      	.short	0x0510
 8009d40:	120b      	.short	0x120b
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
    res = RES_OK;
    break;

  default:
    res = RES_PARERR;
 8009d42:	2004      	movs	r0, #4
  }

  return res;
}
 8009d44:	b008      	add	sp, #32
 8009d46:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8009d48:	4668      	mov	r0, sp
 8009d4a:	f7fd ff93 	bl	8007c74 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009d4e:	9b06      	ldr	r3, [sp, #24]
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009d50:	6023      	str	r3, [r4, #0]
 8009d52:	e004      	b.n	8009d5e <SD_ioctl+0x36>
    BSP_SD_GetCardInfo(&CardInfo);
 8009d54:	4668      	mov	r0, sp
 8009d56:	f7fd ff8d 	bl	8007c74 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009d5a:	9b07      	ldr	r3, [sp, #28]
 8009d5c:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 8009d5e:	2000      	movs	r0, #0
 8009d60:	e7f0      	b.n	8009d44 <SD_ioctl+0x1c>
    BSP_SD_GetCardInfo(&CardInfo);
 8009d62:	4668      	mov	r0, sp
 8009d64:	f7fd ff86 	bl	8007c74 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009d68:	9b07      	ldr	r3, [sp, #28]
 8009d6a:	0a5b      	lsrs	r3, r3, #9
 8009d6c:	e7f0      	b.n	8009d50 <SD_ioctl+0x28>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009d6e:	2003      	movs	r0, #3
 8009d70:	e7e8      	b.n	8009d44 <SD_ioctl+0x1c>
 8009d72:	bf00      	nop
 8009d74:	2000000e 	.word	0x2000000e

08009d78 <SD_CheckStatusWithTimeout.constprop.2>:
static int SD_CheckStatusWithTimeout(uint32_t timeout)
 8009d78:	b538      	push	{r3, r4, r5, lr}
  uint32_t timer = osKernelSysTick();
 8009d7a:	f7fc f94c 	bl	8006016 <osKernelSysTick>
  while( osKernelSysTick() - timer < timeout)
 8009d7e:	f247 542f 	movw	r4, #29999	; 0x752f
  uint32_t timer = osKernelSysTick();
 8009d82:	4605      	mov	r5, r0
  while( osKernelSysTick() - timer < timeout)
 8009d84:	f7fc f947 	bl	8006016 <osKernelSysTick>
 8009d88:	1b40      	subs	r0, r0, r5
 8009d8a:	42a0      	cmp	r0, r4
 8009d8c:	d902      	bls.n	8009d94 <SD_CheckStatusWithTimeout.constprop.2+0x1c>
  return -1;
 8009d8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d92:	e003      	b.n	8009d9c <SD_CheckStatusWithTimeout.constprop.2+0x24>
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009d94:	f7fd ff64 	bl	8007c60 <BSP_SD_GetCardState>
 8009d98:	2800      	cmp	r0, #0
 8009d9a:	d1f3      	bne.n	8009d84 <SD_CheckStatusWithTimeout.constprop.2+0xc>
}
 8009d9c:	bd38      	pop	{r3, r4, r5, pc}
	...

08009da0 <SD_write>:
{
 8009da0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009da4:	b085      	sub	sp, #20
 8009da6:	460c      	mov	r4, r1
 8009da8:	4617      	mov	r7, r2
 8009daa:	461e      	mov	r6, r3
  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009dac:	f7ff ffe4 	bl	8009d78 <SD_CheckStatusWithTimeout.constprop.2>
 8009db0:	2800      	cmp	r0, #0
 8009db2:	da03      	bge.n	8009dbc <SD_write+0x1c>
    return res;
 8009db4:	2001      	movs	r0, #1
} 
 8009db6:	b005      	add	sp, #20
 8009db8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (!((uint32_t)buff & 0x3))
 8009dbc:	07a3      	lsls	r3, r4, #30
 8009dbe:	d00a      	beq.n	8009dd6 <SD_write+0x36>
      ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8009dc0:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8009e58 <SD_write+0xb8>
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8009dc4:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8009e54 <SD_write+0xb4>
  if (!((uint32_t)buff & 0x3))
 8009dc8:	2500      	movs	r5, #0
    for (i = 0; i < count; i++) {
 8009dca:	42b5      	cmp	r5, r6
 8009dcc:	eb05 0107 	add.w	r1, r5, r7
 8009dd0:	d123      	bne.n	8009e1a <SD_write+0x7a>
    if ((i == count) && (ret == MSD_OK))
 8009dd2:	2000      	movs	r0, #0
 8009dd4:	e7ef      	b.n	8009db6 <SD_write+0x16>
    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8009dd6:	4632      	mov	r2, r6
 8009dd8:	4639      	mov	r1, r7
 8009dda:	4620      	mov	r0, r4
 8009ddc:	f7fd ff32 	bl	8007c44 <BSP_SD_WriteBlocks_DMA>
 8009de0:	2800      	cmp	r0, #0
 8009de2:	d1e7      	bne.n	8009db4 <SD_write+0x14>
      event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8009de4:	4b1b      	ldr	r3, [pc, #108]	; (8009e54 <SD_write+0xb4>)
 8009de6:	f247 5230 	movw	r2, #30000	; 0x7530
 8009dea:	6819      	ldr	r1, [r3, #0]
 8009dec:	a801      	add	r0, sp, #4
 8009dee:	f7fc f9f5 	bl	80061dc <osMessageGet>
      if (event.status == osEventMessage)
 8009df2:	9b01      	ldr	r3, [sp, #4]
 8009df4:	2b10      	cmp	r3, #16
 8009df6:	d1dd      	bne.n	8009db4 <SD_write+0x14>
        if (event.value.v == WRITE_CPLT_MSG)
 8009df8:	9b02      	ldr	r3, [sp, #8]
 8009dfa:	2b02      	cmp	r3, #2
 8009dfc:	d1da      	bne.n	8009db4 <SD_write+0x14>
          timer = osKernelSysTick() + SD_TIMEOUT;
 8009dfe:	f7fc f90a 	bl	8006016 <osKernelSysTick>
 8009e02:	f500 44ea 	add.w	r4, r0, #29952	; 0x7500
 8009e06:	3430      	adds	r4, #48	; 0x30
          while(timer > osKernelSysTick())
 8009e08:	f7fc f905 	bl	8006016 <osKernelSysTick>
 8009e0c:	4284      	cmp	r4, r0
 8009e0e:	d9d1      	bls.n	8009db4 <SD_write+0x14>
            if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009e10:	f7fd ff26 	bl	8007c60 <BSP_SD_GetCardState>
 8009e14:	2800      	cmp	r0, #0
 8009e16:	d1f7      	bne.n	8009e08 <SD_write+0x68>
 8009e18:	e7cd      	b.n	8009db6 <SD_write+0x16>
      ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8009e1a:	2201      	movs	r2, #1
 8009e1c:	480e      	ldr	r0, [pc, #56]	; (8009e58 <SD_write+0xb8>)
 8009e1e:	f7fd ff11 	bl	8007c44 <BSP_SD_WriteBlocks_DMA>
      if (ret == MSD_OK) {
 8009e22:	2800      	cmp	r0, #0
 8009e24:	d1c6      	bne.n	8009db4 <SD_write+0x14>
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8009e26:	f247 5230 	movw	r2, #30000	; 0x7530
 8009e2a:	f8d9 1000 	ldr.w	r1, [r9]
 8009e2e:	a801      	add	r0, sp, #4
 8009e30:	f7fc f9d4 	bl	80061dc <osMessageGet>
        if (event.status == osEventMessage) {
 8009e34:	9b01      	ldr	r3, [sp, #4]
 8009e36:	2b10      	cmp	r3, #16
 8009e38:	d10a      	bne.n	8009e50 <SD_write+0xb0>
          if (event.value.v == WRITE_CPLT_MSG) {
 8009e3a:	9b02      	ldr	r3, [sp, #8]
 8009e3c:	2b02      	cmp	r3, #2
 8009e3e:	d107      	bne.n	8009e50 <SD_write+0xb0>
            memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 8009e40:	4620      	mov	r0, r4
 8009e42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e46:	4641      	mov	r1, r8
 8009e48:	f000 fd30 	bl	800a8ac <memcpy>
            buff += BLOCKSIZE;
 8009e4c:	f504 7400 	add.w	r4, r4, #512	; 0x200
    for (i = 0; i < count; i++) {
 8009e50:	3501      	adds	r5, #1
 8009e52:	e7ba      	b.n	8009dca <SD_write+0x2a>
 8009e54:	200040d8 	.word	0x200040d8
 8009e58:	200040dc 	.word	0x200040dc

08009e5c <SD_read>:
{
 8009e5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009e60:	b085      	sub	sp, #20
 8009e62:	460c      	mov	r4, r1
 8009e64:	4617      	mov	r7, r2
 8009e66:	461e      	mov	r6, r3
  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009e68:	f7ff ff86 	bl	8009d78 <SD_CheckStatusWithTimeout.constprop.2>
 8009e6c:	2800      	cmp	r0, #0
 8009e6e:	da03      	bge.n	8009e78 <SD_read+0x1c>
    return res;
 8009e70:	2001      	movs	r0, #1
} 
 8009e72:	b005      	add	sp, #20
 8009e74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (!((uint32_t)buff & 0x3))
 8009e78:	07a3      	lsls	r3, r4, #30
 8009e7a:	d00a      	beq.n	8009e92 <SD_read+0x36>
      ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8009e7c:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8009f00 <SD_read+0xa4>
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8009e80:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8009efc <SD_read+0xa0>
  if (!((uint32_t)buff & 0x3))
 8009e84:	2500      	movs	r5, #0
    for (i = 0; i < count; i++) {
 8009e86:	42b5      	cmp	r5, r6
 8009e88:	eb05 0107 	add.w	r1, r5, r7
 8009e8c:	d118      	bne.n	8009ec0 <SD_read+0x64>
    if ((i == count) && (ret == MSD_OK))
 8009e8e:	2000      	movs	r0, #0
 8009e90:	e7ef      	b.n	8009e72 <SD_read+0x16>
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8009e92:	4632      	mov	r2, r6
 8009e94:	4639      	mov	r1, r7
 8009e96:	4620      	mov	r0, r4
 8009e98:	f7fd fec6 	bl	8007c28 <BSP_SD_ReadBlocks_DMA>
    if (ret == MSD_OK) {
 8009e9c:	2800      	cmp	r0, #0
 8009e9e:	d1e7      	bne.n	8009e70 <SD_read+0x14>
      event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8009ea0:	4b16      	ldr	r3, [pc, #88]	; (8009efc <SD_read+0xa0>)
 8009ea2:	f247 5230 	movw	r2, #30000	; 0x7530
 8009ea6:	6819      	ldr	r1, [r3, #0]
 8009ea8:	a801      	add	r0, sp, #4
 8009eaa:	f7fc f997 	bl	80061dc <osMessageGet>
      if (event.status == osEventMessage) {
 8009eae:	9b01      	ldr	r3, [sp, #4]
 8009eb0:	2b10      	cmp	r3, #16
 8009eb2:	d1dd      	bne.n	8009e70 <SD_read+0x14>
    return res;
 8009eb4:	9802      	ldr	r0, [sp, #8]
 8009eb6:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
 8009eba:	bf18      	it	ne
 8009ebc:	2001      	movne	r0, #1
 8009ebe:	e7d8      	b.n	8009e72 <SD_read+0x16>
      ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	480f      	ldr	r0, [pc, #60]	; (8009f00 <SD_read+0xa4>)
 8009ec4:	f7fd feb0 	bl	8007c28 <BSP_SD_ReadBlocks_DMA>
      if (ret == MSD_OK) {
 8009ec8:	2800      	cmp	r0, #0
 8009eca:	d1d1      	bne.n	8009e70 <SD_read+0x14>
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8009ecc:	f247 5230 	movw	r2, #30000	; 0x7530
 8009ed0:	f8d9 1000 	ldr.w	r1, [r9]
 8009ed4:	a801      	add	r0, sp, #4
 8009ed6:	f7fc f981 	bl	80061dc <osMessageGet>
        if (event.status == osEventMessage) {
 8009eda:	9b01      	ldr	r3, [sp, #4]
 8009edc:	2b10      	cmp	r3, #16
 8009ede:	d10a      	bne.n	8009ef6 <SD_read+0x9a>
          if (event.value.v == READ_CPLT_MSG) {
 8009ee0:	9b02      	ldr	r3, [sp, #8]
 8009ee2:	2b01      	cmp	r3, #1
 8009ee4:	d107      	bne.n	8009ef6 <SD_read+0x9a>
            memcpy(buff, scratch, BLOCKSIZE);
 8009ee6:	4620      	mov	r0, r4
 8009ee8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009eec:	4641      	mov	r1, r8
 8009eee:	f000 fcdd 	bl	800a8ac <memcpy>
            buff += BLOCKSIZE;
 8009ef2:	f504 7400 	add.w	r4, r4, #512	; 0x200
    for (i = 0; i < count; i++) {
 8009ef6:	3501      	adds	r5, #1
 8009ef8:	e7c5      	b.n	8009e86 <SD_read+0x2a>
 8009efa:	bf00      	nop
 8009efc:	200040d8 	.word	0x200040d8
 8009f00:	200040dc 	.word	0x200040dc

08009f04 <BSP_SD_WriteCpltCallback>:
  
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
  osMessagePut(SDQueueID, WRITE_CPLT_MSG, osWaitForever);
 8009f04:	4b03      	ldr	r3, [pc, #12]	; (8009f14 <BSP_SD_WriteCpltCallback+0x10>)
 8009f06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f0a:	2102      	movs	r1, #2
 8009f0c:	6818      	ldr	r0, [r3, #0]
 8009f0e:	f7fc b93d 	b.w	800618c <osMessagePut>
 8009f12:	bf00      	nop
 8009f14:	200040d8 	.word	0x200040d8

08009f18 <BSP_SD_ReadCpltCallback>:
{
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
  osMessagePut(SDQueueID, READ_CPLT_MSG, osWaitForever);
 8009f18:	4b03      	ldr	r3, [pc, #12]	; (8009f28 <BSP_SD_ReadCpltCallback+0x10>)
 8009f1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f1e:	2101      	movs	r1, #1
 8009f20:	6818      	ldr	r0, [r3, #0]
 8009f22:	f7fc b933 	b.w	800618c <osMessagePut>
 8009f26:	bf00      	nop
 8009f28:	200040d8 	.word	0x200040d8

08009f2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009f2c:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009f2e:	4b0f      	ldr	r3, [pc, #60]	; (8009f6c <HAL_MspInit+0x40>)
 8009f30:	2200      	movs	r2, #0
 8009f32:	9200      	str	r2, [sp, #0]
 8009f34:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8009f36:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8009f3a:	6459      	str	r1, [r3, #68]	; 0x44
 8009f3c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8009f3e:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8009f42:	9100      	str	r1, [sp, #0]
 8009f44:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009f46:	9201      	str	r2, [sp, #4]
 8009f48:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8009f4a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8009f4e:	6419      	str	r1, [r3, #64]	; 0x40
 8009f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f56:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8009f58:	210f      	movs	r1, #15
 8009f5a:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8009f5e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8009f60:	f7f7 f978 	bl	8001254 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009f64:	b003      	add	sp, #12
 8009f66:	f85d fb04 	ldr.w	pc, [sp], #4
 8009f6a:	bf00      	nop
 8009f6c:	40023800 	.word	0x40023800

08009f70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8009f70:	b510      	push	{r4, lr}
 8009f72:	4604      	mov	r4, r0
 8009f74:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009f76:	2214      	movs	r2, #20
 8009f78:	2100      	movs	r1, #0
 8009f7a:	a803      	add	r0, sp, #12
 8009f7c:	f000 fca1 	bl	800a8c2 <memset>
  if(hadc->Instance==ADC3)
 8009f80:	6822      	ldr	r2, [r4, #0]
 8009f82:	4b12      	ldr	r3, [pc, #72]	; (8009fcc <HAL_ADC_MspInit+0x5c>)
 8009f84:	429a      	cmp	r2, r3
 8009f86:	d11e      	bne.n	8009fc6 <HAL_ADC_MspInit+0x56>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8009f88:	f503 338b 	add.w	r3, r3, #71168	; 0x11600
 8009f8c:	2100      	movs	r1, #0
 8009f8e:	9101      	str	r1, [sp, #4]
 8009f90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PF6     ------> ADC3_IN4 
    */
    GPIO_InitStruct.Pin = VBAT_Pin|V5V_Pin|V3V3_Pin|VGSE_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8009f92:	480f      	ldr	r0, [pc, #60]	; (8009fd0 <HAL_ADC_MspInit+0x60>)
    __HAL_RCC_ADC3_CLK_ENABLE();
 8009f94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009f98:	645a      	str	r2, [r3, #68]	; 0x44
 8009f9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009f9c:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8009fa0:	9201      	str	r2, [sp, #4]
 8009fa2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8009fa4:	9102      	str	r1, [sp, #8]
 8009fa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009fa8:	f042 0220 	orr.w	r2, r2, #32
 8009fac:	631a      	str	r2, [r3, #48]	; 0x30
 8009fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fb0:	f003 0320 	and.w	r3, r3, #32
 8009fb4:	9302      	str	r3, [sp, #8]
 8009fb6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = VBAT_Pin|V5V_Pin|V3V3_Pin|VGSE_Pin;
 8009fb8:	2378      	movs	r3, #120	; 0x78
 8009fba:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8009fbc:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009fbe:	2303      	movs	r3, #3
 8009fc0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8009fc2:	f7f7 fb41 	bl	8001648 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8009fc6:	b008      	add	sp, #32
 8009fc8:	bd10      	pop	{r4, pc}
 8009fca:	bf00      	nop
 8009fcc:	40012200 	.word	0x40012200
 8009fd0:	40021400 	.word	0x40021400

08009fd4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8009fd4:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009fd6:	2214      	movs	r2, #20
{
 8009fd8:	b08b      	sub	sp, #44	; 0x2c
 8009fda:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009fdc:	2100      	movs	r1, #0
 8009fde:	eb0d 0002 	add.w	r0, sp, r2
 8009fe2:	f000 fc6e 	bl	800a8c2 <memset>
  if(hi2c->Instance==I2C2)
 8009fe6:	6823      	ldr	r3, [r4, #0]
 8009fe8:	4a37      	ldr	r2, [pc, #220]	; (800a0c8 <HAL_I2C_MspInit+0xf4>)
 8009fea:	4293      	cmp	r3, r2
 8009fec:	d134      	bne.n	800a058 <HAL_I2C_MspInit+0x84>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8009fee:	4c37      	ldr	r4, [pc, #220]	; (800a0cc <HAL_I2C_MspInit+0xf8>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8009ff0:	4837      	ldr	r0, [pc, #220]	; (800a0d0 <HAL_I2C_MspInit+0xfc>)
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8009ff2:	2500      	movs	r5, #0
 8009ff4:	9501      	str	r5, [sp, #4]
 8009ff6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009ff8:	f043 0320 	orr.w	r3, r3, #32
 8009ffc:	6323      	str	r3, [r4, #48]	; 0x30
 8009ffe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a000:	f003 0320 	and.w	r3, r3, #32
 800a004:	9301      	str	r3, [sp, #4]
 800a006:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a008:	2212      	movs	r2, #18
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800a00a:	2303      	movs	r3, #3
 800a00c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a00e:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a010:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a012:	2201      	movs	r2, #1
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800a014:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800a016:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a018:	9207      	str	r2, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800a01a:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800a01c:	f7f7 fb14 	bl	8001648 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800a020:	9502      	str	r5, [sp, #8]
 800a022:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a024:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a028:	6423      	str	r3, [r4, #64]	; 0x40
 800a02a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a02c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 800a030:	462a      	mov	r2, r5
 800a032:	2105      	movs	r1, #5
    __HAL_RCC_I2C2_CLK_ENABLE();
 800a034:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 800a036:	2021      	movs	r0, #33	; 0x21
    __HAL_RCC_I2C2_CLK_ENABLE();
 800a038:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 800a03a:	f7f7 f90b 	bl	8001254 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800a03e:	2021      	movs	r0, #33	; 0x21
 800a040:	f7f7 f93c 	bl	80012bc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 800a044:	2022      	movs	r0, #34	; 0x22
 800a046:	462a      	mov	r2, r5
 800a048:	2105      	movs	r1, #5
 800a04a:	f7f7 f903 	bl	8001254 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800a04e:	2022      	movs	r0, #34	; 0x22
    __HAL_RCC_I2C3_CLK_ENABLE();
    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 5, 0);
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 5, 0);
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 800a050:	f7f7 f934 	bl	80012bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800a054:	b00b      	add	sp, #44	; 0x2c
 800a056:	bd30      	pop	{r4, r5, pc}
  else if(hi2c->Instance==I2C3)
 800a058:	4a1e      	ldr	r2, [pc, #120]	; (800a0d4 <HAL_I2C_MspInit+0x100>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d1fa      	bne.n	800a054 <HAL_I2C_MspInit+0x80>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800a05e:	4c1b      	ldr	r4, [pc, #108]	; (800a0cc <HAL_I2C_MspInit+0xf8>)
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800a060:	481d      	ldr	r0, [pc, #116]	; (800a0d8 <HAL_I2C_MspInit+0x104>)
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800a062:	2500      	movs	r5, #0
 800a064:	9503      	str	r5, [sp, #12]
 800a066:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a06c:	6323      	str	r3, [r4, #48]	; 0x30
 800a06e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a074:	9303      	str	r3, [sp, #12]
 800a076:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800a078:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800a07c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a07e:	2312      	movs	r3, #18
 800a080:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a082:	2301      	movs	r3, #1
 800a084:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a086:	2303      	movs	r3, #3
 800a088:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800a08a:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800a08c:	2304      	movs	r3, #4
 800a08e:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800a090:	f7f7 fada 	bl	8001648 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800a094:	9504      	str	r5, [sp, #16]
 800a096:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a098:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a09c:	6423      	str	r3, [r4, #64]	; 0x40
 800a09e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a0a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 5, 0);
 800a0a4:	462a      	mov	r2, r5
 800a0a6:	2105      	movs	r1, #5
    __HAL_RCC_I2C3_CLK_ENABLE();
 800a0a8:	9304      	str	r3, [sp, #16]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 5, 0);
 800a0aa:	2048      	movs	r0, #72	; 0x48
    __HAL_RCC_I2C3_CLK_ENABLE();
 800a0ac:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 5, 0);
 800a0ae:	f7f7 f8d1 	bl	8001254 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 800a0b2:	2048      	movs	r0, #72	; 0x48
 800a0b4:	f7f7 f902 	bl	80012bc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 5, 0);
 800a0b8:	2049      	movs	r0, #73	; 0x49
 800a0ba:	462a      	mov	r2, r5
 800a0bc:	2105      	movs	r1, #5
 800a0be:	f7f7 f8c9 	bl	8001254 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 800a0c2:	2049      	movs	r0, #73	; 0x49
 800a0c4:	e7c4      	b.n	800a050 <HAL_I2C_MspInit+0x7c>
 800a0c6:	bf00      	nop
 800a0c8:	40005800 	.word	0x40005800
 800a0cc:	40023800 	.word	0x40023800
 800a0d0:	40021400 	.word	0x40021400
 800a0d4:	40005c00 	.word	0x40005c00
 800a0d8:	40021c00 	.word	0x40021c00

0800a0dc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800a0dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0e0:	4606      	mov	r6, r0
 800a0e2:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a0e4:	2214      	movs	r2, #20
 800a0e6:	2100      	movs	r1, #0
 800a0e8:	a803      	add	r0, sp, #12
 800a0ea:	f000 fbea 	bl	800a8c2 <memset>
  if(hsd->Instance==SDIO)
 800a0ee:	6832      	ldr	r2, [r6, #0]
 800a0f0:	4b55      	ldr	r3, [pc, #340]	; (800a248 <HAL_SD_MspInit+0x16c>)
 800a0f2:	429a      	cmp	r2, r3
 800a0f4:	f040 80a5 	bne.w	800a242 <HAL_SD_MspInit+0x166>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800a0f8:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 800a0fc:	2500      	movs	r5, #0
 800a0fe:	9500      	str	r5, [sp, #0]
 800a100:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a102:	4852      	ldr	r0, [pc, #328]	; (800a24c <HAL_SD_MspInit+0x170>)
    __HAL_RCC_SDIO_CLK_ENABLE();
 800a104:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a108:	645a      	str	r2, [r3, #68]	; 0x44
 800a10a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a10c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800a110:	9200      	str	r2, [sp, #0]
 800a112:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a114:	9501      	str	r5, [sp, #4]
 800a116:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a118:	f042 0204 	orr.w	r2, r2, #4
 800a11c:	631a      	str	r2, [r3, #48]	; 0x30
 800a11e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a120:	f002 0204 	and.w	r2, r2, #4
 800a124:	9201      	str	r2, [sp, #4]
 800a126:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a128:	9502      	str	r5, [sp, #8]
 800a12a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a12c:	f042 0208 	orr.w	r2, r2, #8
 800a130:	631a      	str	r2, [r3, #48]	; 0x30
 800a132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a134:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800a138:	240c      	movs	r4, #12
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a13a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a13c:	2703      	movs	r7, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a13e:	f04f 0802 	mov.w	r8, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a142:	eb0d 0104 	add.w	r1, sp, r4
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a146:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800a148:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800a14a:	f44f 7380 	mov.w	r3, #256	; 0x100
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a14e:	f04f 0b01 	mov.w	fp, #1
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800a152:	9303      	str	r3, [sp, #12]

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800a154:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a158:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a15c:	f8cd b014 	str.w	fp, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a160:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a162:	f7f7 fa71 	bl	8001648 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a166:	eb0d 0104 	add.w	r1, sp, r4
 800a16a:	4838      	ldr	r0, [pc, #224]	; (800a24c <HAL_SD_MspInit+0x170>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800a16c:	9407      	str	r4, [sp, #28]

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800a16e:	f04f 0904 	mov.w	r9, #4
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800a172:	f8cd a00c 	str.w	sl, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a176:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a17a:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a17c:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a17e:	f7f7 fa63 	bl	8001648 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a182:	eb0d 0104 	add.w	r1, sp, r4
 800a186:	4832      	ldr	r0, [pc, #200]	; (800a250 <HAL_SD_MspInit+0x174>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800a188:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800a18a:	f8cd 900c 	str.w	r9, [sp, #12]

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800a18e:	4c31      	ldr	r4, [pc, #196]	; (800a254 <HAL_SD_MspInit+0x178>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a190:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a194:	f8cd b014 	str.w	fp, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a198:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a19a:	f7f7 fa55 	bl	8001648 <HAL_GPIO_Init>
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800a19e:	4b2e      	ldr	r3, [pc, #184]	; (800a258 <HAL_SD_MspInit+0x17c>)
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a1a0:	60a5      	str	r5, [r4, #8]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800a1a2:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
 800a1a6:	e884 4008 	stmia.w	r4, {r3, lr}
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a1aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1ae:	6123      	str	r3, [r4, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800a1b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a1b4:	61a3      	str	r3, [r4, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800a1b6:	2320      	movs	r3, #32
 800a1b8:	61e3      	str	r3, [r4, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800a1ba:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a1be:	62e3      	str	r3, [r4, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800a1c0:	4620      	mov	r0, r4
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800a1c2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a1c6:	60e5      	str	r5, [r4, #12]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800a1c8:	f8c4 a014 	str.w	sl, [r4, #20]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 800a1cc:	6225      	str	r5, [r4, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800a1ce:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800a1d2:	62a7      	str	r7, [r4, #40]	; 0x28
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800a1d4:	6323      	str	r3, [r4, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800a1d6:	f7f7 f8ab 	bl	8001330 <HAL_DMA_Init>
 800a1da:	b108      	cbz	r0, 800a1e0 <HAL_SD_MspInit+0x104>
    {
      Error_Handler();
 800a1dc:	f7ff fd6a 	bl	8009cb4 <Error_Handler>
    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a1e0:	4b1e      	ldr	r3, [pc, #120]	; (800a25c <HAL_SD_MspInit+0x180>)
    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 800a1e2:	63f4      	str	r4, [r6, #60]	; 0x3c
 800a1e4:	63a6      	str	r6, [r4, #56]	; 0x38
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800a1e6:	4c1e      	ldr	r4, [pc, #120]	; (800a260 <HAL_SD_MspInit+0x184>)
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a1e8:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
 800a1ec:	2740      	movs	r7, #64	; 0x40
 800a1ee:	e884 00a8 	stmia.w	r4, {r3, r5, r7}
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a1f2:	2300      	movs	r3, #0
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a1f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a1f8:	60e3      	str	r3, [r4, #12]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 800a1fa:	6223      	str	r3, [r4, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800a1fc:	2304      	movs	r3, #4
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a1fe:	6122      	str	r2, [r4, #16]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800a200:	6263      	str	r3, [r4, #36]	; 0x24
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800a202:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800a206:	2303      	movs	r3, #3
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800a208:	6162      	str	r2, [r4, #20]
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800a20a:	62a3      	str	r3, [r4, #40]	; 0x28
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800a20c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800a210:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800a214:	61a2      	str	r2, [r4, #24]
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800a216:	62e3      	str	r3, [r4, #44]	; 0x2c
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800a218:	2220      	movs	r2, #32
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800a21a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800a21e:	4620      	mov	r0, r4
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800a220:	61e2      	str	r2, [r4, #28]
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800a222:	6323      	str	r3, [r4, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800a224:	f7f7 f884 	bl	8001330 <HAL_DMA_Init>
 800a228:	b108      	cbz	r0, 800a22e <HAL_SD_MspInit+0x152>
    {
      Error_Handler();
 800a22a:	f7ff fd43 	bl	8009cb4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 800a22e:	2031      	movs	r0, #49	; 0x31
    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 800a230:	6434      	str	r4, [r6, #64]	; 0x40
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 800a232:	2200      	movs	r2, #0
 800a234:	2105      	movs	r1, #5
    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 800a236:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 800a238:	f7f7 f80c 	bl	8001254 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800a23c:	2031      	movs	r0, #49	; 0x31
 800a23e:	f7f7 f83d 	bl	80012bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800a242:	b009      	add	sp, #36	; 0x24
 800a244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a248:	40012c00 	.word	0x40012c00
 800a24c:	40020800 	.word	0x40020800
 800a250:	40020c00 	.word	0x40020c00
 800a254:	200047f0 	.word	0x200047f0
 800a258:	40026458 	.word	0x40026458
 800a25c:	400264a0 	.word	0x400264a0
 800a260:	200071cc 	.word	0x200071cc

0800a264 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a264:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a266:	4604      	mov	r4, r0
 800a268:	b091      	sub	sp, #68	; 0x44
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a26a:	2214      	movs	r2, #20
 800a26c:	2100      	movs	r1, #0
 800a26e:	a80b      	add	r0, sp, #44	; 0x2c
 800a270:	f000 fb27 	bl	800a8c2 <memset>
  if(huart->Instance==UART4)
 800a274:	6823      	ldr	r3, [r4, #0]
 800a276:	4a85      	ldr	r2, [pc, #532]	; (800a48c <HAL_UART_MspInit+0x228>)
 800a278:	4293      	cmp	r3, r2
 800a27a:	d12c      	bne.n	800a2d6 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800a27c:	4b84      	ldr	r3, [pc, #528]	; (800a490 <HAL_UART_MspInit+0x22c>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a27e:	4885      	ldr	r0, [pc, #532]	; (800a494 <HAL_UART_MspInit+0x230>)
    __HAL_RCC_UART4_CLK_ENABLE();
 800a280:	2400      	movs	r4, #0
 800a282:	9401      	str	r4, [sp, #4]
 800a284:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a286:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800a28a:	641a      	str	r2, [r3, #64]	; 0x40
 800a28c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a28e:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 800a292:	9201      	str	r2, [sp, #4]
 800a294:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a296:	9402      	str	r4, [sp, #8]
 800a298:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a29a:	f042 0201 	orr.w	r2, r2, #1
 800a29e:	631a      	str	r2, [r3, #48]	; 0x30
 800a2a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2a2:	f003 0301 	and.w	r3, r3, #1
 800a2a6:	9302      	str	r3, [sp, #8]
 800a2a8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2aa:	2202      	movs	r2, #2
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800a2ac:	2303      	movs	r3, #3
 800a2ae:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2b0:	920c      	str	r2, [sp, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a2b2:	930e      	str	r3, [sp, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a2b4:	2201      	movs	r2, #1
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800a2b6:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a2b8:	a90b      	add	r1, sp, #44	; 0x2c
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a2ba:	920d      	str	r2, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800a2bc:	930f      	str	r3, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a2be:	f7f7 f9c3 	bl	8001648 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800a2c2:	2034      	movs	r0, #52	; 0x34
 800a2c4:	4622      	mov	r2, r4
 800a2c6:	2105      	movs	r1, #5
 800a2c8:	f7f6 ffc4 	bl	8001254 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800a2cc:	2034      	movs	r0, #52	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800a2ce:	f7f6 fff5 	bl	80012bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800a2d2:	b011      	add	sp, #68	; 0x44
 800a2d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(huart->Instance==USART1)
 800a2d6:	4a70      	ldr	r2, [pc, #448]	; (800a498 <HAL_UART_MspInit+0x234>)
 800a2d8:	4293      	cmp	r3, r2
 800a2da:	d12b      	bne.n	800a334 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART1_CLK_ENABLE();
 800a2dc:	4b6c      	ldr	r3, [pc, #432]	; (800a490 <HAL_UART_MspInit+0x22c>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a2de:	486d      	ldr	r0, [pc, #436]	; (800a494 <HAL_UART_MspInit+0x230>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800a2e0:	2400      	movs	r4, #0
 800a2e2:	9403      	str	r4, [sp, #12]
 800a2e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a2e6:	f042 0210 	orr.w	r2, r2, #16
 800a2ea:	645a      	str	r2, [r3, #68]	; 0x44
 800a2ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a2ee:	f002 0210 	and.w	r2, r2, #16
 800a2f2:	9203      	str	r2, [sp, #12]
 800a2f4:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a2f6:	9404      	str	r4, [sp, #16]
 800a2f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a2fa:	f042 0201 	orr.w	r2, r2, #1
 800a2fe:	631a      	str	r2, [r3, #48]	; 0x30
 800a300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a302:	f003 0301 	and.w	r3, r3, #1
 800a306:	9304      	str	r3, [sp, #16]
 800a308:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800a30a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800a30e:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a310:	2302      	movs	r3, #2
 800a312:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a314:	2301      	movs	r3, #1
 800a316:	930d      	str	r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a318:	2303      	movs	r3, #3
 800a31a:	930e      	str	r3, [sp, #56]	; 0x38
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a31c:	a90b      	add	r1, sp, #44	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a31e:	2307      	movs	r3, #7
 800a320:	930f      	str	r3, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a322:	f7f7 f991 	bl	8001648 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800a326:	2025      	movs	r0, #37	; 0x25
 800a328:	4622      	mov	r2, r4
 800a32a:	2105      	movs	r1, #5
 800a32c:	f7f6 ff92 	bl	8001254 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800a330:	2025      	movs	r0, #37	; 0x25
 800a332:	e7cc      	b.n	800a2ce <HAL_UART_MspInit+0x6a>
  else if(huart->Instance==USART2)
 800a334:	4a59      	ldr	r2, [pc, #356]	; (800a49c <HAL_UART_MspInit+0x238>)
 800a336:	4293      	cmp	r3, r2
 800a338:	d133      	bne.n	800a3a2 <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART2_CLK_ENABLE();
 800a33a:	4b55      	ldr	r3, [pc, #340]	; (800a490 <HAL_UART_MspInit+0x22c>)
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a33c:	4858      	ldr	r0, [pc, #352]	; (800a4a0 <HAL_UART_MspInit+0x23c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800a33e:	2400      	movs	r4, #0
 800a340:	9405      	str	r4, [sp, #20]
 800a342:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a344:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800a348:	641a      	str	r2, [r3, #64]	; 0x40
 800a34a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a34c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800a350:	9205      	str	r2, [sp, #20]
 800a352:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a354:	9406      	str	r4, [sp, #24]
 800a356:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a358:	f042 0208 	orr.w	r2, r2, #8
 800a35c:	631a      	str	r2, [r3, #48]	; 0x30
 800a35e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a360:	f003 0308 	and.w	r3, r3, #8
 800a364:	9306      	str	r3, [sp, #24]
 800a366:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a368:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800a36a:	2318      	movs	r3, #24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a36c:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800a36e:	2507      	movs	r5, #7
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a370:	a90b      	add	r1, sp, #44	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800a372:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a374:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a376:	960e      	str	r6, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800a378:	950f      	str	r5, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a37a:	f7f7 f965 	bl	8001648 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800a37e:	2360      	movs	r3, #96	; 0x60
 800a380:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a382:	a90b      	add	r1, sp, #44	; 0x2c
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a384:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a386:	4846      	ldr	r0, [pc, #280]	; (800a4a0 <HAL_UART_MspInit+0x23c>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a388:	930d      	str	r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a38a:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a38c:	960e      	str	r6, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800a38e:	950f      	str	r5, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a390:	f7f7 f95a 	bl	8001648 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800a394:	2026      	movs	r0, #38	; 0x26
 800a396:	4622      	mov	r2, r4
 800a398:	2105      	movs	r1, #5
 800a39a:	f7f6 ff5b 	bl	8001254 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800a39e:	2026      	movs	r0, #38	; 0x26
 800a3a0:	e795      	b.n	800a2ce <HAL_UART_MspInit+0x6a>
  else if(huart->Instance==USART3)
 800a3a2:	4a40      	ldr	r2, [pc, #256]	; (800a4a4 <HAL_UART_MspInit+0x240>)
 800a3a4:	4293      	cmp	r3, r2
 800a3a6:	d136      	bne.n	800a416 <HAL_UART_MspInit+0x1b2>
    __HAL_RCC_USART3_CLK_ENABLE();
 800a3a8:	4b39      	ldr	r3, [pc, #228]	; (800a490 <HAL_UART_MspInit+0x22c>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a3aa:	483f      	ldr	r0, [pc, #252]	; (800a4a8 <HAL_UART_MspInit+0x244>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800a3ac:	2400      	movs	r4, #0
 800a3ae:	9407      	str	r4, [sp, #28]
 800a3b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a3b2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800a3b6:	641a      	str	r2, [r3, #64]	; 0x40
 800a3b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a3ba:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800a3be:	9207      	str	r2, [sp, #28]
 800a3c0:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a3c2:	9408      	str	r4, [sp, #32]
 800a3c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a3c6:	f042 0202 	orr.w	r2, r2, #2
 800a3ca:	631a      	str	r2, [r3, #48]	; 0x30
 800a3cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3ce:	f003 0302 	and.w	r3, r3, #2
 800a3d2:	9308      	str	r3, [sp, #32]
 800a3d4:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800a3d6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a3da:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3dc:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a3de:	2301      	movs	r3, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a3e0:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800a3e2:	2507      	movs	r5, #7
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a3e4:	a90b      	add	r1, sp, #44	; 0x2c
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a3e6:	930d      	str	r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3e8:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a3ea:	960e      	str	r6, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800a3ec:	950f      	str	r5, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a3ee:	f7f7 f92b 	bl	8001648 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800a3f2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a3f6:	a90b      	add	r1, sp, #44	; 0x2c
 800a3f8:	482b      	ldr	r0, [pc, #172]	; (800a4a8 <HAL_UART_MspInit+0x244>)
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800a3fa:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3fc:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3fe:	940d      	str	r4, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a400:	960e      	str	r6, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800a402:	950f      	str	r5, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a404:	f7f7 f920 	bl	8001648 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800a408:	2027      	movs	r0, #39	; 0x27
 800a40a:	4622      	mov	r2, r4
 800a40c:	2105      	movs	r1, #5
 800a40e:	f7f6 ff21 	bl	8001254 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800a412:	2027      	movs	r0, #39	; 0x27
 800a414:	e75b      	b.n	800a2ce <HAL_UART_MspInit+0x6a>
  else if(huart->Instance==USART6)
 800a416:	4a25      	ldr	r2, [pc, #148]	; (800a4ac <HAL_UART_MspInit+0x248>)
 800a418:	4293      	cmp	r3, r2
 800a41a:	f47f af5a 	bne.w	800a2d2 <HAL_UART_MspInit+0x6e>
    __HAL_RCC_USART6_CLK_ENABLE();
 800a41e:	4b1c      	ldr	r3, [pc, #112]	; (800a490 <HAL_UART_MspInit+0x22c>)
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a420:	4823      	ldr	r0, [pc, #140]	; (800a4b0 <HAL_UART_MspInit+0x24c>)
    __HAL_RCC_USART6_CLK_ENABLE();
 800a422:	2400      	movs	r4, #0
 800a424:	9409      	str	r4, [sp, #36]	; 0x24
 800a426:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a428:	f042 0220 	orr.w	r2, r2, #32
 800a42c:	645a      	str	r2, [r3, #68]	; 0x44
 800a42e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a430:	f002 0220 	and.w	r2, r2, #32
 800a434:	9209      	str	r2, [sp, #36]	; 0x24
 800a436:	9a09      	ldr	r2, [sp, #36]	; 0x24
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800a438:	940a      	str	r4, [sp, #40]	; 0x28
 800a43a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a43c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a440:	631a      	str	r2, [r3, #48]	; 0x30
 800a442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a448:	930a      	str	r3, [sp, #40]	; 0x28
 800a44a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 800a44c:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 800a450:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a452:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a454:	2301      	movs	r3, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a456:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800a458:	2508      	movs	r5, #8
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a45a:	a90b      	add	r1, sp, #44	; 0x2c
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a45c:	930d      	str	r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a45e:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a460:	960e      	str	r6, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800a462:	950f      	str	r5, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a464:	f7f7 f8f0 	bl	8001648 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800a468:	f44f 5340 	mov.w	r3, #12288	; 0x3000
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a46c:	a90b      	add	r1, sp, #44	; 0x2c
 800a46e:	4810      	ldr	r0, [pc, #64]	; (800a4b0 <HAL_UART_MspInit+0x24c>)
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800a470:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a472:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a474:	940d      	str	r4, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a476:	960e      	str	r6, [sp, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800a478:	950f      	str	r5, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a47a:	f7f7 f8e5 	bl	8001648 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 800a47e:	2047      	movs	r0, #71	; 0x47
 800a480:	4622      	mov	r2, r4
 800a482:	2105      	movs	r1, #5
 800a484:	f7f6 fee6 	bl	8001254 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800a488:	2047      	movs	r0, #71	; 0x47
 800a48a:	e720      	b.n	800a2ce <HAL_UART_MspInit+0x6a>
 800a48c:	40004c00 	.word	0x40004c00
 800a490:	40023800 	.word	0x40023800
 800a494:	40020000 	.word	0x40020000
 800a498:	40011000 	.word	0x40011000
 800a49c:	40004400 	.word	0x40004400
 800a4a0:	40020c00 	.word	0x40020c00
 800a4a4:	40004800 	.word	0x40004800
 800a4a8:	40020400 	.word	0x40020400
 800a4ac:	40011400 	.word	0x40011400
 800a4b0:	40021800 	.word	0x40021800

0800a4b4 <NMI_Handler>:
 800a4b4:	4770      	bx	lr

0800a4b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a4b6:	e7fe      	b.n	800a4b6 <HardFault_Handler>

0800a4b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a4b8:	e7fe      	b.n	800a4b8 <MemManage_Handler>

0800a4ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a4ba:	e7fe      	b.n	800a4ba <BusFault_Handler>

0800a4bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a4bc:	e7fe      	b.n	800a4bc <UsageFault_Handler>

0800a4be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a4be:	4770      	bx	lr

0800a4c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a4c0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a4c2:	f7f6 fd53 	bl	8000f6c <HAL_IncTick>
  osSystickHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a4c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  osSystickHandler();
 800a4ca:	f7fb bec1 	b.w	8006250 <osSystickHandler>
	...

0800a4d0 <I2C2_EV_IRQHandler>:
void I2C2_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800a4d0:	4801      	ldr	r0, [pc, #4]	; (800a4d8 <I2C2_EV_IRQHandler+0x8>)
 800a4d2:	f7f8 b813 	b.w	80024fc <HAL_I2C_EV_IRQHandler>
 800a4d6:	bf00      	nop
 800a4d8:	20004c4c 	.word	0x20004c4c

0800a4dc <I2C2_ER_IRQHandler>:
void I2C2_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 800a4dc:	4801      	ldr	r0, [pc, #4]	; (800a4e4 <I2C2_ER_IRQHandler+0x8>)
 800a4de:	f7f8 bc31 	b.w	8002d44 <HAL_I2C_ER_IRQHandler>
 800a4e2:	bf00      	nop
 800a4e4:	20004c4c 	.word	0x20004c4c

0800a4e8 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800a4e8:	4801      	ldr	r0, [pc, #4]	; (800a4f0 <USART1_IRQHandler+0x8>)
 800a4ea:	f7f9 bd95 	b.w	8004018 <HAL_UART_IRQHandler>
 800a4ee:	bf00      	nop
 800a4f0:	20005dbc 	.word	0x20005dbc

0800a4f4 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800a4f4:	4801      	ldr	r0, [pc, #4]	; (800a4fc <USART2_IRQHandler+0x8>)
 800a4f6:	f7f9 bd8f 	b.w	8004018 <HAL_UART_IRQHandler>
 800a4fa:	bf00      	nop
 800a4fc:	20009a2c 	.word	0x20009a2c

0800a500 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800a500:	4801      	ldr	r0, [pc, #4]	; (800a508 <USART3_IRQHandler+0x8>)
 800a502:	f7f9 bd89 	b.w	8004018 <HAL_UART_IRQHandler>
 800a506:	bf00      	nop
 800a508:	2000497c 	.word	0x2000497c

0800a50c <SDIO_IRQHandler>:
void SDIO_IRQHandler(void)
{
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800a50c:	4801      	ldr	r0, [pc, #4]	; (800a514 <SDIO_IRQHandler+0x8>)
 800a50e:	f7f9 bac7 	b.w	8003aa0 <HAL_SD_IRQHandler>
 800a512:	bf00      	nop
 800a514:	200082c4 	.word	0x200082c4

0800a518 <UART4_IRQHandler>:
void UART4_IRQHandler(void)
{
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800a518:	4801      	ldr	r0, [pc, #4]	; (800a520 <UART4_IRQHandler+0x8>)
 800a51a:	f7f9 bd7d 	b.w	8004018 <HAL_UART_IRQHandler>
 800a51e:	bf00      	nop
 800a520:	200095e4 	.word	0x200095e4

0800a524 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800a524:	4801      	ldr	r0, [pc, #4]	; (800a52c <DMA2_Stream3_IRQHandler+0x8>)
 800a526:	f7f6 bfd1 	b.w	80014cc <HAL_DMA_IRQHandler>
 800a52a:	bf00      	nop
 800a52c:	200047f0 	.word	0x200047f0

0800a530 <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 800a530:	4801      	ldr	r0, [pc, #4]	; (800a538 <DMA2_Stream6_IRQHandler+0x8>)
 800a532:	f7f6 bfcb 	b.w	80014cc <HAL_DMA_IRQHandler>
 800a536:	bf00      	nop
 800a538:	200071cc 	.word	0x200071cc

0800a53c <USART6_IRQHandler>:
void USART6_IRQHandler(void)
{
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800a53c:	4801      	ldr	r0, [pc, #4]	; (800a544 <USART6_IRQHandler+0x8>)
 800a53e:	f7f9 bd6b 	b.w	8004018 <HAL_UART_IRQHandler>
 800a542:	bf00      	nop
 800a544:	200095a0 	.word	0x200095a0

0800a548 <I2C3_EV_IRQHandler>:
void I2C3_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 800a548:	4801      	ldr	r0, [pc, #4]	; (800a550 <I2C3_EV_IRQHandler+0x8>)
 800a54a:	f7f7 bfd7 	b.w	80024fc <HAL_I2C_EV_IRQHandler>
 800a54e:	bf00      	nop
 800a550:	200048a4 	.word	0x200048a4

0800a554 <I2C3_ER_IRQHandler>:
void I2C3_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 800a554:	4801      	ldr	r0, [pc, #4]	; (800a55c <I2C3_ER_IRQHandler+0x8>)
 800a556:	f7f8 bbf5 	b.w	8002d44 <HAL_I2C_ER_IRQHandler>
 800a55a:	bf00      	nop
 800a55c:	200048a4 	.word	0x200048a4

0800a560 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 800a560:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800a562:	4b0a      	ldr	r3, [pc, #40]	; (800a58c <_sbrk+0x2c>)
 800a564:	6819      	ldr	r1, [r3, #0]
{
 800a566:	4602      	mov	r2, r0
	if (heap_end == 0)
 800a568:	b909      	cbnz	r1, 800a56e <_sbrk+0xe>
		heap_end = &end;
 800a56a:	4909      	ldr	r1, [pc, #36]	; (800a590 <_sbrk+0x30>)
 800a56c:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800a56e:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800a570:	4669      	mov	r1, sp
 800a572:	4402      	add	r2, r0
 800a574:	428a      	cmp	r2, r1
 800a576:	d906      	bls.n	800a586 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800a578:	f000 f96e 	bl	800a858 <__errno>
 800a57c:	230c      	movs	r3, #12
 800a57e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800a580:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a584:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 800a586:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 800a588:	bd08      	pop	{r3, pc}
 800a58a:	bf00      	nop
 800a58c:	200042dc 	.word	0x200042dc
 800a590:	2000a6e4 	.word	0x2000a6e4

0800a594 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a594:	490f      	ldr	r1, [pc, #60]	; (800a5d4 <SystemInit+0x40>)
 800a596:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800a59a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a59e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800a5a2:	4b0d      	ldr	r3, [pc, #52]	; (800a5d8 <SystemInit+0x44>)
 800a5a4:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800a5a6:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 800a5a8:	f042 0201 	orr.w	r2, r2, #1
 800a5ac:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800a5ae:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800a5b0:	681a      	ldr	r2, [r3, #0]
 800a5b2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800a5b6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a5ba:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800a5bc:	4a07      	ldr	r2, [pc, #28]	; (800a5dc <SystemInit+0x48>)
 800a5be:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800a5c0:	681a      	ldr	r2, [r3, #0]
 800a5c2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a5c6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800a5c8:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a5ca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a5ce:	608b      	str	r3, [r1, #8]
 800a5d0:	4770      	bx	lr
 800a5d2:	bf00      	nop
 800a5d4:	e000ed00 	.word	0xe000ed00
 800a5d8:	40023800 	.word	0x40023800
 800a5dc:	24003010 	.word	0x24003010

0800a5e0 <cobs_encode>:
 */

#include "cobs.h"

size_t cobs_encode(const uint8_t *ptr, size_t len, uint8_t *dst)
{
 800a5e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  const uint8_t *start = dst;
  const uint8_t *end = ptr + len;
 800a5e2:	4401      	add	r1, r0
 800a5e4:	1c94      	adds	r4, r2, #2
  uint8_t code = 1;
  uint8_t *code_ptr = dst++;
 800a5e6:	4615      	mov	r5, r2
  uint8_t code = 1;
 800a5e8:	2301      	movs	r3, #1

  while (ptr < end)
 800a5ea:	4288      	cmp	r0, r1
 800a5ec:	f104 37ff 	add.w	r7, r4, #4294967295	; 0xffffffff
 800a5f0:	d302      	bcc.n	800a5f8 <cobs_encode+0x18>
    *code_ptr = code;
    code_ptr = dst++;
    code = 1;
  }

  *code_ptr = code;
 800a5f2:	702b      	strb	r3, [r5, #0]
  return dst - start;
}
 800a5f4:	1ab8      	subs	r0, r7, r2
 800a5f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (code != 0xff)
 800a5f8:	2bff      	cmp	r3, #255	; 0xff
 800a5fa:	d00a      	beq.n	800a612 <cobs_encode+0x32>
      uint8_t c = *ptr++;
 800a5fc:	1c46      	adds	r6, r0, #1
 800a5fe:	7800      	ldrb	r0, [r0, #0]
      if (c != 0)
 800a600:	b130      	cbz	r0, 800a610 <cobs_encode+0x30>
        code++;
 800a602:	3301      	adds	r3, #1
        *dst++ = c;
 800a604:	f804 0c01 	strb.w	r0, [r4, #-1]
        code++;
 800a608:	b2db      	uxtb	r3, r3
 800a60a:	3401      	adds	r4, #1
    code = 1;
 800a60c:	4630      	mov	r0, r6
 800a60e:	e7ec      	b.n	800a5ea <cobs_encode+0xa>
      uint8_t c = *ptr++;
 800a610:	4630      	mov	r0, r6
    *code_ptr = code;
 800a612:	702b      	strb	r3, [r5, #0]
 800a614:	4606      	mov	r6, r0
 800a616:	463d      	mov	r5, r7
    code = 1;
 800a618:	2301      	movs	r3, #1
 800a61a:	e7f6      	b.n	800a60a <cobs_encode+0x2a>

0800a61c <cobs_decode>:

size_t cobs_decode(const uint8_t *ptr, size_t len, uint8_t *dst)
{
 800a61c:	b570      	push	{r4, r5, r6, lr}
  const uint8_t *start = dst;
  const uint8_t *end = ptr + len;
 800a61e:	4401      	add	r1, r0
  uint8_t code = 0xff;
  uint8_t copy = 0;

  for (; ptr < end; copy--)
 800a620:	4614      	mov	r4, r2
  uint8_t copy = 0;
 800a622:	2300      	movs	r3, #0
  uint8_t code = 0xff;
 800a624:	25ff      	movs	r5, #255	; 0xff
  for (; ptr < end; copy--)
 800a626:	4281      	cmp	r1, r0
 800a628:	d801      	bhi.n	800a62e <cobs_decode+0x12>
        break;
      }
    }
  }
  return dst - start;
}
 800a62a:	1aa0      	subs	r0, r4, r2
 800a62c:	bd70      	pop	{r4, r5, r6, pc}
    if (copy != 0)
 800a62e:	b133      	cbz	r3, 800a63e <cobs_decode+0x22>
      *dst++ = *ptr++;
 800a630:	7806      	ldrb	r6, [r0, #0]
 800a632:	7026      	strb	r6, [r4, #0]
 800a634:	3401      	adds	r4, #1
  for (; ptr < end; copy--)
 800a636:	3b01      	subs	r3, #1
 800a638:	b2db      	uxtb	r3, r3
 800a63a:	3001      	adds	r0, #1
 800a63c:	e7f3      	b.n	800a626 <cobs_decode+0xa>
      if (code != 0xff)
 800a63e:	2dff      	cmp	r5, #255	; 0xff
        *dst++ = 0;
 800a640:	bf18      	it	ne
 800a642:	7023      	strbne	r3, [r4, #0]
      copy = code = *ptr++;
 800a644:	7803      	ldrb	r3, [r0, #0]
        *dst++ = 0;
 800a646:	bf18      	it	ne
 800a648:	3401      	addne	r4, #1
      if (code == 0)
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d0ed      	beq.n	800a62a <cobs_decode+0xe>
 800a64e:	461d      	mov	r5, r3
 800a650:	e7f1      	b.n	800a636 <cobs_decode+0x1a>

0800a652 <crc16_update>:

uint16_t crc16_update(uint16_t crc, uint8_t a)
{
  int i;

  crc ^= a;
 800a652:	4048      	eors	r0, r1
 800a654:	2308      	movs	r3, #8
  for (i = 0; i < 8; ++i)
  {
    if (crc & 1)
      crc = (crc >> 1) ^ 0xA001;
 800a656:	f24a 0201 	movw	r2, #40961	; 0xa001
    if (crc & 1)
 800a65a:	f010 0f01 	tst.w	r0, #1
 800a65e:	ea4f 0050 	mov.w	r0, r0, lsr #1
      crc = (crc >> 1) ^ 0xA001;
 800a662:	bf14      	ite	ne
 800a664:	4050      	eorne	r0, r2
    else
      crc = (crc >> 1);
 800a666:	b280      	uxtheq	r0, r0
  for (i = 0; i < 8; ++i)
 800a668:	3b01      	subs	r3, #1
 800a66a:	d1f6      	bne.n	800a65a <crc16_update+0x8>
  }
  return crc;
}
 800a66c:	4770      	bx	lr

0800a66e <crc16_block>:

uint16_t crc16_block(const uint8_t *block, size_t len)
{
 800a66e:	b538      	push	{r3, r4, r5, lr}
 800a670:	4604      	mov	r4, r0
 800a672:	1845      	adds	r5, r0, r1
  uint16_t crc = 0xffff;
 800a674:	f64f 70ff 	movw	r0, #65535	; 0xffff

  for (size_t i = 0; i < len; i++)
 800a678:	42ac      	cmp	r4, r5
 800a67a:	d100      	bne.n	800a67e <crc16_block+0x10>
  {
    crc = crc16_update(crc, block[i]);
  }

  return crc;
}
 800a67c:	bd38      	pop	{r3, r4, r5, pc}
    crc = crc16_update(crc, block[i]);
 800a67e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a682:	f7ff ffe6 	bl	800a652 <crc16_update>
 800a686:	e7f7      	b.n	800a678 <crc16_block+0xa>

0800a688 <ms56xx_prom_crc>:
 */

#include "ms56xx.h"

uint8_t ms56xx_prom_crc(struct ms56xx *m)
{
 800a688:	b510      	push	{r4, lr}
 800a68a:	2200      	movs	r2, #0
  uint32_t n_rem = 0x00000000;
  for (uint8_t cnt = 0; cnt < 8; cnt++)
  {
    n_rem ^= m->c[cnt];
    if (cnt == 7)
      n_rem &= 0x00ffff00; // mask off CRC
 800a68c:	4c0d      	ldr	r4, [pc, #52]	; (800a6c4 <ms56xx_prom_crc+0x3c>)
  uint32_t n_rem = 0x00000000;
 800a68e:	4613      	mov	r3, r2
    n_rem ^= m->c[cnt];
 800a690:	f830 1012 	ldrh.w	r1, [r0, r2, lsl #1]
    if (cnt == 7)
 800a694:	2a07      	cmp	r2, #7
    n_rem ^= m->c[cnt];
 800a696:	ea83 0301 	eor.w	r3, r3, r1
      n_rem &= 0x00ffff00; // mask off CRC
 800a69a:	bf08      	it	eq
 800a69c:	4023      	andeq	r3, r4
  uint32_t n_rem = 0x00000000;
 800a69e:	2110      	movs	r1, #16
    for (uint8_t n_bit = 0; n_bit < 16; n_bit++)
    {
      if (n_rem & 0x800000)
 800a6a0:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800a6a4:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
 800a6a8:	ea4f 0343 	mov.w	r3, r3, lsl #1
        n_rem = (n_rem << 1) ^ 0x300000;
 800a6ac:	bf18      	it	ne
 800a6ae:	f483 1340 	eorne.w	r3, r3, #3145728	; 0x300000
    for (uint8_t n_bit = 0; n_bit < 16; n_bit++)
 800a6b2:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 800a6b6:	d1f3      	bne.n	800a6a0 <ms56xx_prom_crc+0x18>
 800a6b8:	3201      	adds	r2, #1
  for (uint8_t cnt = 0; cnt < 8; cnt++)
 800a6ba:	2a08      	cmp	r2, #8
 800a6bc:	d1e8      	bne.n	800a690 <ms56xx_prom_crc+0x8>
      else
        n_rem = n_rem << 1;
    }
  }
  return (n_rem >> 20) & 0x000f;
}
 800a6be:	f3c3 5003 	ubfx	r0, r3, #20, #4
 800a6c2:	bd10      	pop	{r4, pc}
 800a6c4:	00ffff00 	.word	0x00ffff00

0800a6c8 <ms56xx_check_prom_crc>:

int ms56xx_check_prom_crc(struct ms56xx *m)
{
 800a6c8:	b510      	push	{r4, lr}
 800a6ca:	4604      	mov	r4, r0
  return ms56xx_prom_crc(m) == (m->c[7] & 0x000f);
 800a6cc:	f7ff ffdc 	bl	800a688 <ms56xx_prom_crc>
 800a6d0:	89e3      	ldrh	r3, [r4, #14]
 800a6d2:	f003 030f 	and.w	r3, r3, #15
}
 800a6d6:	1a1b      	subs	r3, r3, r0
 800a6d8:	4258      	negs	r0, r3
 800a6da:	4158      	adcs	r0, r3
 800a6dc:	bd10      	pop	{r4, pc}

0800a6de <ms56xx_convert_2>:
  *p = (((*p * sens) >> 21) - off) >> 15;
}

void ms56xx_convert_2(struct ms56xx *m, int32_t *p, int32_t *temp)
{
  int32_t dt = *temp - ((int32_t)m->c[5] << 8);
 800a6de:	8943      	ldrh	r3, [r0, #10]
{
 800a6e0:	468c      	mov	ip, r1
  int32_t dt = *temp - ((int32_t)m->c[5] << 8);
 800a6e2:	6811      	ldr	r1, [r2, #0]
{
 800a6e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  *temp = 2000 + (((int64_t)dt * (int64_t)m->c[6]) >> 23);
 800a6e8:	8984      	ldrh	r4, [r0, #12]
  int64_t off = ((int64_t)m->c[2] << 17) + (((int64_t)m->c[4] * (int64_t)dt) >> 6);
 800a6ea:	8906      	ldrh	r6, [r0, #8]
 800a6ec:	f8b0 8004 	ldrh.w	r8, [r0, #4]
  int32_t dt = *temp - ((int32_t)m->c[5] << 8);
 800a6f0:	eba1 2303 	sub.w	r3, r1, r3, lsl #8
  int64_t off = ((int64_t)m->c[2] << 17) + (((int64_t)m->c[4] * (int64_t)dt) >> 6);
 800a6f4:	fb86 6703 	smull	r6, r7, r6, r3
  *temp = 2000 + (((int64_t)dt * (int64_t)m->c[6]) >> 23);
 800a6f8:	fb84 4503 	smull	r4, r5, r4, r3
 800a6fc:	0de1      	lsrs	r1, r4, #23
  int64_t off = ((int64_t)m->c[2] << 17) + (((int64_t)m->c[4] * (int64_t)dt) >> 6);
 800a6fe:	09b4      	lsrs	r4, r6, #6
 800a700:	ea44 6487 	orr.w	r4, r4, r7, lsl #26
 800a704:	ea4f 4648 	mov.w	r6, r8, lsl #17
  *temp = 2000 + (((int64_t)dt * (int64_t)m->c[6]) >> 23);
 800a708:	ea41 2145 	orr.w	r1, r1, r5, lsl #9
  int64_t off = ((int64_t)m->c[2] << 17) + (((int64_t)m->c[4] * (int64_t)dt) >> 6);
 800a70c:	11bd      	asrs	r5, r7, #6
 800a70e:	ea4f 37d8 	mov.w	r7, r8, lsr #15
 800a712:	eb14 0806 	adds.w	r8, r4, r6
  int64_t sens = ((int64_t)m->c[1] << 16) + (((int64_t)m->c[3] * (int64_t)dt) >> 7);
 800a716:	88c6      	ldrh	r6, [r0, #6]
  int64_t off = ((int64_t)m->c[2] << 17) + (((int64_t)m->c[4] * (int64_t)dt) >> 6);
 800a718:	eb45 0907 	adc.w	r9, r5, r7
{
 800a71c:	b085      	sub	sp, #20
  int64_t sens = ((int64_t)m->c[1] << 16) + (((int64_t)m->c[3] * (int64_t)dt) >> 7);
 800a71e:	fb86 6703 	smull	r6, r7, r6, r3
  int64_t off = ((int64_t)m->c[2] << 17) + (((int64_t)m->c[4] * (int64_t)dt) >> 6);
 800a722:	e9cd 8900 	strd	r8, r9, [sp]
  int64_t sens = ((int64_t)m->c[1] << 16) + (((int64_t)m->c[3] * (int64_t)dt) >> 7);
 800a726:	f8b0 8002 	ldrh.w	r8, [r0, #2]
 800a72a:	09f4      	lsrs	r4, r6, #7
 800a72c:	ea44 6447 	orr.w	r4, r4, r7, lsl #25
 800a730:	ea4f 4a08 	mov.w	sl, r8, lsl #16
  *temp = 2000 + (((int64_t)dt * (int64_t)m->c[6]) >> 23);
 800a734:	f501 6efa 	add.w	lr, r1, #2000	; 0x7d0
  int64_t sens = ((int64_t)m->c[1] << 16) + (((int64_t)m->c[3] * (int64_t)dt) >> 7);
 800a738:	eb1a 0a04 	adds.w	sl, sl, r4
 800a73c:	ea4f 15e7 	mov.w	r5, r7, asr #7
 800a740:	f04f 0b00 	mov.w	fp, #0
 800a744:	eb4b 0b05 	adc.w	fp, fp, r5
  
  if (*temp < 2000)
 800a748:	f5be 6ffa 	cmp.w	lr, #2000	; 0x7d0
  *temp = 2000 + (((int64_t)dt * (int64_t)m->c[6]) >> 23);
 800a74c:	f8c2 e000 	str.w	lr, [r2]
  if (*temp < 2000)
 800a750:	da3c      	bge.n	800a7cc <ms56xx_convert_2+0xee>
  {
    int32_t t2 = ((int64_t) dt * (int64_t) dt) >> 31;
 800a752:	fb83 4503 	smull	r4, r5, r3, r3
 800a756:	0fe3      	lsrs	r3, r4, #31
    int64_t temp2 = *temp - 2000;
    temp2 = temp2 * temp2;
 800a758:	fb81 6701 	smull	r6, r7, r1, r1
    int32_t t2 = ((int64_t) dt * (int64_t) dt) >> 31;
 800a75c:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
    int64_t off2 = (61 * temp2) >> 4;
 800a760:	203d      	movs	r0, #61	; 0x3d
 800a762:	fba6 4500 	umull	r4, r5, r6, r0
    int32_t t2 = ((int64_t) dt * (int64_t) dt) >> 31;
 800a766:	9303      	str	r3, [sp, #12]
    int64_t sens2 = temp2 << 1;

    if (*temp < -1500)
 800a768:	f46f 63c3 	mvn.w	r3, #1560	; 0x618
    int64_t off2 = (61 * temp2) >> 4;
 800a76c:	fb00 5507 	mla	r5, r0, r7, r5
    int64_t sens2 = temp2 << 1;
 800a770:	19b6      	adds	r6, r6, r6
    if (*temp < -1500)
 800a772:	4418      	add	r0, r3
    int64_t off2 = (61 * temp2) >> 4;
 800a774:	ea4f 1814 	mov.w	r8, r4, lsr #4
    int64_t sens2 = temp2 << 1;
 800a778:	417f      	adcs	r7, r7
    if (*temp < -1500)
 800a77a:	4586      	cmp	lr, r0
    int64_t off2 = (61 * temp2) >> 4;
 800a77c:	ea48 7805 	orr.w	r8, r8, r5, lsl #28
 800a780:	ea4f 1925 	mov.w	r9, r5, asr #4
    if (*temp < -1500)
 800a784:	da12      	bge.n	800a7ac <ms56xx_convert_2+0xce>
    {
      temp2 = *temp + 1500;
 800a786:	f601 54ac 	addw	r4, r1, #3500	; 0xdac
      temp2 = temp2 * temp2;
 800a78a:	fb84 4504 	smull	r4, r5, r4, r4
      off2 += 15 * temp2;
 800a78e:	230f      	movs	r3, #15
 800a790:	fba4 0103 	umull	r0, r1, r4, r3
 800a794:	eb18 0800 	adds.w	r8, r8, r0
 800a798:	fb03 1105 	mla	r1, r3, r5, r1
 800a79c:	eb49 0901 	adc.w	r9, r9, r1
      sens2 += temp2 << 3;
 800a7a0:	00e0      	lsls	r0, r4, #3
 800a7a2:	00e9      	lsls	r1, r5, #3
 800a7a4:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
 800a7a8:	1836      	adds	r6, r6, r0
 800a7aa:	414f      	adcs	r7, r1
    }

    *temp -= t2;
 800a7ac:	9b03      	ldr	r3, [sp, #12]
 800a7ae:	ebae 0303 	sub.w	r3, lr, r3
 800a7b2:	6013      	str	r3, [r2, #0]
    off -= off2;
 800a7b4:	e89d 0018 	ldmia.w	sp, {r3, r4}
 800a7b8:	ebb3 0308 	subs.w	r3, r3, r8
 800a7bc:	eb64 0409 	sbc.w	r4, r4, r9
 800a7c0:	e88d 0018 	stmia.w	sp, {r3, r4}
    sens -= sens2;
 800a7c4:	ebba 0a06 	subs.w	sl, sl, r6
 800a7c8:	eb6b 0b07 	sbc.w	fp, fp, r7
  }

  *p = (((*p * sens) >> 21) - off) >> 15;
 800a7cc:	f8dc 4000 	ldr.w	r4, [ip]
 800a7d0:	17e1      	asrs	r1, r4, #31
 800a7d2:	fb04 f30b 	mul.w	r3, r4, fp
 800a7d6:	fb0a 3301 	mla	r3, sl, r1, r3
 800a7da:	fba4 450a 	umull	r4, r5, r4, sl
 800a7de:	441d      	add	r5, r3
 800a7e0:	0d66      	lsrs	r6, r4, #21
 800a7e2:	e89d 0018 	ldmia.w	sp, {r3, r4}
 800a7e6:	ea46 26c5 	orr.w	r6, r6, r5, lsl #11
 800a7ea:	1af3      	subs	r3, r6, r3
 800a7ec:	ea4f 5765 	mov.w	r7, r5, asr #21
 800a7f0:	eb67 0404 	sbc.w	r4, r7, r4
 800a7f4:	0bdb      	lsrs	r3, r3, #15
 800a7f6:	ea43 4344 	orr.w	r3, r3, r4, lsl #17
 800a7fa:	f8cc 3000 	str.w	r3, [ip]
}
 800a7fe:	b005      	add	sp, #20
 800a800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a804 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800a804:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a83c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800a808:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800a80a:	e003      	b.n	800a814 <LoopCopyDataInit>

0800a80c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800a80c:	4b0c      	ldr	r3, [pc, #48]	; (800a840 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800a80e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800a810:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800a812:	3104      	adds	r1, #4

0800a814 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800a814:	480b      	ldr	r0, [pc, #44]	; (800a844 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800a816:	4b0c      	ldr	r3, [pc, #48]	; (800a848 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800a818:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800a81a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800a81c:	d3f6      	bcc.n	800a80c <CopyDataInit>
  ldr  r2, =_sbss
 800a81e:	4a0b      	ldr	r2, [pc, #44]	; (800a84c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800a820:	e002      	b.n	800a828 <LoopFillZerobss>

0800a822 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800a822:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800a824:	f842 3b04 	str.w	r3, [r2], #4

0800a828 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800a828:	4b09      	ldr	r3, [pc, #36]	; (800a850 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800a82a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800a82c:	d3f9      	bcc.n	800a822 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800a82e:	f7ff feb1 	bl	800a594 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a832:	f000 f817 	bl	800a864 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a836:	f7fe ff8f 	bl	8009758 <main>
  bx  lr    
 800a83a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800a83c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800a840:	0800ced8 	.word	0x0800ced8
  ldr  r0, =_sdata
 800a844:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800a848:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 800a84c:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 800a850:	2000a6e4 	.word	0x2000a6e4

0800a854 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a854:	e7fe      	b.n	800a854 <ADC_IRQHandler>
	...

0800a858 <__errno>:
 800a858:	4b01      	ldr	r3, [pc, #4]	; (800a860 <__errno+0x8>)
 800a85a:	6818      	ldr	r0, [r3, #0]
 800a85c:	4770      	bx	lr
 800a85e:	bf00      	nop
 800a860:	20000014 	.word	0x20000014

0800a864 <__libc_init_array>:
 800a864:	b570      	push	{r4, r5, r6, lr}
 800a866:	4e0d      	ldr	r6, [pc, #52]	; (800a89c <__libc_init_array+0x38>)
 800a868:	4c0d      	ldr	r4, [pc, #52]	; (800a8a0 <__libc_init_array+0x3c>)
 800a86a:	1ba4      	subs	r4, r4, r6
 800a86c:	10a4      	asrs	r4, r4, #2
 800a86e:	2500      	movs	r5, #0
 800a870:	42a5      	cmp	r5, r4
 800a872:	d109      	bne.n	800a888 <__libc_init_array+0x24>
 800a874:	4e0b      	ldr	r6, [pc, #44]	; (800a8a4 <__libc_init_array+0x40>)
 800a876:	4c0c      	ldr	r4, [pc, #48]	; (800a8a8 <__libc_init_array+0x44>)
 800a878:	f001 ffc8 	bl	800c80c <_init>
 800a87c:	1ba4      	subs	r4, r4, r6
 800a87e:	10a4      	asrs	r4, r4, #2
 800a880:	2500      	movs	r5, #0
 800a882:	42a5      	cmp	r5, r4
 800a884:	d105      	bne.n	800a892 <__libc_init_array+0x2e>
 800a886:	bd70      	pop	{r4, r5, r6, pc}
 800a888:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a88c:	4798      	blx	r3
 800a88e:	3501      	adds	r5, #1
 800a890:	e7ee      	b.n	800a870 <__libc_init_array+0xc>
 800a892:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a896:	4798      	blx	r3
 800a898:	3501      	adds	r5, #1
 800a89a:	e7f2      	b.n	800a882 <__libc_init_array+0x1e>
 800a89c:	0800ced0 	.word	0x0800ced0
 800a8a0:	0800ced0 	.word	0x0800ced0
 800a8a4:	0800ced0 	.word	0x0800ced0
 800a8a8:	0800ced4 	.word	0x0800ced4

0800a8ac <memcpy>:
 800a8ac:	b510      	push	{r4, lr}
 800a8ae:	1e43      	subs	r3, r0, #1
 800a8b0:	440a      	add	r2, r1
 800a8b2:	4291      	cmp	r1, r2
 800a8b4:	d100      	bne.n	800a8b8 <memcpy+0xc>
 800a8b6:	bd10      	pop	{r4, pc}
 800a8b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a8c0:	e7f7      	b.n	800a8b2 <memcpy+0x6>

0800a8c2 <memset>:
 800a8c2:	4402      	add	r2, r0
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	4293      	cmp	r3, r2
 800a8c8:	d100      	bne.n	800a8cc <memset+0xa>
 800a8ca:	4770      	bx	lr
 800a8cc:	f803 1b01 	strb.w	r1, [r3], #1
 800a8d0:	e7f9      	b.n	800a8c6 <memset+0x4>
	...

0800a8d4 <siprintf>:
 800a8d4:	b40e      	push	{r1, r2, r3}
 800a8d6:	b500      	push	{lr}
 800a8d8:	b09c      	sub	sp, #112	; 0x70
 800a8da:	f44f 7102 	mov.w	r1, #520	; 0x208
 800a8de:	ab1d      	add	r3, sp, #116	; 0x74
 800a8e0:	f8ad 1014 	strh.w	r1, [sp, #20]
 800a8e4:	9002      	str	r0, [sp, #8]
 800a8e6:	9006      	str	r0, [sp, #24]
 800a8e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a8ec:	480a      	ldr	r0, [pc, #40]	; (800a918 <siprintf+0x44>)
 800a8ee:	9104      	str	r1, [sp, #16]
 800a8f0:	9107      	str	r1, [sp, #28]
 800a8f2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a8f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8fa:	f8ad 1016 	strh.w	r1, [sp, #22]
 800a8fe:	6800      	ldr	r0, [r0, #0]
 800a900:	9301      	str	r3, [sp, #4]
 800a902:	a902      	add	r1, sp, #8
 800a904:	f000 f8a0 	bl	800aa48 <_svfiprintf_r>
 800a908:	9b02      	ldr	r3, [sp, #8]
 800a90a:	2200      	movs	r2, #0
 800a90c:	701a      	strb	r2, [r3, #0]
 800a90e:	b01c      	add	sp, #112	; 0x70
 800a910:	f85d eb04 	ldr.w	lr, [sp], #4
 800a914:	b003      	add	sp, #12
 800a916:	4770      	bx	lr
 800a918:	20000014 	.word	0x20000014

0800a91c <_vsniprintf_r>:
 800a91c:	b530      	push	{r4, r5, lr}
 800a91e:	1e14      	subs	r4, r2, #0
 800a920:	4605      	mov	r5, r0
 800a922:	b09b      	sub	sp, #108	; 0x6c
 800a924:	4618      	mov	r0, r3
 800a926:	da05      	bge.n	800a934 <_vsniprintf_r+0x18>
 800a928:	238b      	movs	r3, #139	; 0x8b
 800a92a:	602b      	str	r3, [r5, #0]
 800a92c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a930:	b01b      	add	sp, #108	; 0x6c
 800a932:	bd30      	pop	{r4, r5, pc}
 800a934:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a938:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a93c:	bf14      	ite	ne
 800a93e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800a942:	4623      	moveq	r3, r4
 800a944:	9302      	str	r3, [sp, #8]
 800a946:	9305      	str	r3, [sp, #20]
 800a948:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a94c:	9100      	str	r1, [sp, #0]
 800a94e:	9104      	str	r1, [sp, #16]
 800a950:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a954:	4602      	mov	r2, r0
 800a956:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a958:	4669      	mov	r1, sp
 800a95a:	4628      	mov	r0, r5
 800a95c:	f000 f874 	bl	800aa48 <_svfiprintf_r>
 800a960:	1c43      	adds	r3, r0, #1
 800a962:	bfbc      	itt	lt
 800a964:	238b      	movlt	r3, #139	; 0x8b
 800a966:	602b      	strlt	r3, [r5, #0]
 800a968:	2c00      	cmp	r4, #0
 800a96a:	d0e1      	beq.n	800a930 <_vsniprintf_r+0x14>
 800a96c:	9b00      	ldr	r3, [sp, #0]
 800a96e:	2200      	movs	r2, #0
 800a970:	701a      	strb	r2, [r3, #0]
 800a972:	e7dd      	b.n	800a930 <_vsniprintf_r+0x14>

0800a974 <vsniprintf>:
 800a974:	b507      	push	{r0, r1, r2, lr}
 800a976:	9300      	str	r3, [sp, #0]
 800a978:	4613      	mov	r3, r2
 800a97a:	460a      	mov	r2, r1
 800a97c:	4601      	mov	r1, r0
 800a97e:	4803      	ldr	r0, [pc, #12]	; (800a98c <vsniprintf+0x18>)
 800a980:	6800      	ldr	r0, [r0, #0]
 800a982:	f7ff ffcb 	bl	800a91c <_vsniprintf_r>
 800a986:	b003      	add	sp, #12
 800a988:	f85d fb04 	ldr.w	pc, [sp], #4
 800a98c:	20000014 	.word	0x20000014

0800a990 <__ssputs_r>:
 800a990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a994:	688e      	ldr	r6, [r1, #8]
 800a996:	429e      	cmp	r6, r3
 800a998:	4682      	mov	sl, r0
 800a99a:	460c      	mov	r4, r1
 800a99c:	4691      	mov	r9, r2
 800a99e:	4698      	mov	r8, r3
 800a9a0:	d835      	bhi.n	800aa0e <__ssputs_r+0x7e>
 800a9a2:	898a      	ldrh	r2, [r1, #12]
 800a9a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a9a8:	d031      	beq.n	800aa0e <__ssputs_r+0x7e>
 800a9aa:	6825      	ldr	r5, [r4, #0]
 800a9ac:	6909      	ldr	r1, [r1, #16]
 800a9ae:	1a6f      	subs	r7, r5, r1
 800a9b0:	6965      	ldr	r5, [r4, #20]
 800a9b2:	2302      	movs	r3, #2
 800a9b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a9b8:	fb95 f5f3 	sdiv	r5, r5, r3
 800a9bc:	f108 0301 	add.w	r3, r8, #1
 800a9c0:	443b      	add	r3, r7
 800a9c2:	429d      	cmp	r5, r3
 800a9c4:	bf38      	it	cc
 800a9c6:	461d      	movcc	r5, r3
 800a9c8:	0553      	lsls	r3, r2, #21
 800a9ca:	d531      	bpl.n	800aa30 <__ssputs_r+0xa0>
 800a9cc:	4629      	mov	r1, r5
 800a9ce:	f000 fb2d 	bl	800b02c <_malloc_r>
 800a9d2:	4606      	mov	r6, r0
 800a9d4:	b950      	cbnz	r0, 800a9ec <__ssputs_r+0x5c>
 800a9d6:	230c      	movs	r3, #12
 800a9d8:	f8ca 3000 	str.w	r3, [sl]
 800a9dc:	89a3      	ldrh	r3, [r4, #12]
 800a9de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9e2:	81a3      	strh	r3, [r4, #12]
 800a9e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a9e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9ec:	463a      	mov	r2, r7
 800a9ee:	6921      	ldr	r1, [r4, #16]
 800a9f0:	f7ff ff5c 	bl	800a8ac <memcpy>
 800a9f4:	89a3      	ldrh	r3, [r4, #12]
 800a9f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a9fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9fe:	81a3      	strh	r3, [r4, #12]
 800aa00:	6126      	str	r6, [r4, #16]
 800aa02:	6165      	str	r5, [r4, #20]
 800aa04:	443e      	add	r6, r7
 800aa06:	1bed      	subs	r5, r5, r7
 800aa08:	6026      	str	r6, [r4, #0]
 800aa0a:	60a5      	str	r5, [r4, #8]
 800aa0c:	4646      	mov	r6, r8
 800aa0e:	4546      	cmp	r6, r8
 800aa10:	bf28      	it	cs
 800aa12:	4646      	movcs	r6, r8
 800aa14:	4632      	mov	r2, r6
 800aa16:	4649      	mov	r1, r9
 800aa18:	6820      	ldr	r0, [r4, #0]
 800aa1a:	f000 fa9f 	bl	800af5c <memmove>
 800aa1e:	68a3      	ldr	r3, [r4, #8]
 800aa20:	1b9b      	subs	r3, r3, r6
 800aa22:	60a3      	str	r3, [r4, #8]
 800aa24:	6823      	ldr	r3, [r4, #0]
 800aa26:	441e      	add	r6, r3
 800aa28:	6026      	str	r6, [r4, #0]
 800aa2a:	2000      	movs	r0, #0
 800aa2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa30:	462a      	mov	r2, r5
 800aa32:	f000 fb59 	bl	800b0e8 <_realloc_r>
 800aa36:	4606      	mov	r6, r0
 800aa38:	2800      	cmp	r0, #0
 800aa3a:	d1e1      	bne.n	800aa00 <__ssputs_r+0x70>
 800aa3c:	6921      	ldr	r1, [r4, #16]
 800aa3e:	4650      	mov	r0, sl
 800aa40:	f000 faa6 	bl	800af90 <_free_r>
 800aa44:	e7c7      	b.n	800a9d6 <__ssputs_r+0x46>
	...

0800aa48 <_svfiprintf_r>:
 800aa48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa4c:	b09d      	sub	sp, #116	; 0x74
 800aa4e:	4680      	mov	r8, r0
 800aa50:	9303      	str	r3, [sp, #12]
 800aa52:	898b      	ldrh	r3, [r1, #12]
 800aa54:	061c      	lsls	r4, r3, #24
 800aa56:	460d      	mov	r5, r1
 800aa58:	4616      	mov	r6, r2
 800aa5a:	d50f      	bpl.n	800aa7c <_svfiprintf_r+0x34>
 800aa5c:	690b      	ldr	r3, [r1, #16]
 800aa5e:	b96b      	cbnz	r3, 800aa7c <_svfiprintf_r+0x34>
 800aa60:	2140      	movs	r1, #64	; 0x40
 800aa62:	f000 fae3 	bl	800b02c <_malloc_r>
 800aa66:	6028      	str	r0, [r5, #0]
 800aa68:	6128      	str	r0, [r5, #16]
 800aa6a:	b928      	cbnz	r0, 800aa78 <_svfiprintf_r+0x30>
 800aa6c:	230c      	movs	r3, #12
 800aa6e:	f8c8 3000 	str.w	r3, [r8]
 800aa72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa76:	e0c5      	b.n	800ac04 <_svfiprintf_r+0x1bc>
 800aa78:	2340      	movs	r3, #64	; 0x40
 800aa7a:	616b      	str	r3, [r5, #20]
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	9309      	str	r3, [sp, #36]	; 0x24
 800aa80:	2320      	movs	r3, #32
 800aa82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa86:	2330      	movs	r3, #48	; 0x30
 800aa88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa8c:	f04f 0b01 	mov.w	fp, #1
 800aa90:	4637      	mov	r7, r6
 800aa92:	463c      	mov	r4, r7
 800aa94:	f814 3b01 	ldrb.w	r3, [r4], #1
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d13c      	bne.n	800ab16 <_svfiprintf_r+0xce>
 800aa9c:	ebb7 0a06 	subs.w	sl, r7, r6
 800aaa0:	d00b      	beq.n	800aaba <_svfiprintf_r+0x72>
 800aaa2:	4653      	mov	r3, sl
 800aaa4:	4632      	mov	r2, r6
 800aaa6:	4629      	mov	r1, r5
 800aaa8:	4640      	mov	r0, r8
 800aaaa:	f7ff ff71 	bl	800a990 <__ssputs_r>
 800aaae:	3001      	adds	r0, #1
 800aab0:	f000 80a3 	beq.w	800abfa <_svfiprintf_r+0x1b2>
 800aab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aab6:	4453      	add	r3, sl
 800aab8:	9309      	str	r3, [sp, #36]	; 0x24
 800aaba:	783b      	ldrb	r3, [r7, #0]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	f000 809c 	beq.w	800abfa <_svfiprintf_r+0x1b2>
 800aac2:	2300      	movs	r3, #0
 800aac4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aac8:	9304      	str	r3, [sp, #16]
 800aaca:	9307      	str	r3, [sp, #28]
 800aacc:	9205      	str	r2, [sp, #20]
 800aace:	9306      	str	r3, [sp, #24]
 800aad0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aad4:	931a      	str	r3, [sp, #104]	; 0x68
 800aad6:	2205      	movs	r2, #5
 800aad8:	7821      	ldrb	r1, [r4, #0]
 800aada:	4850      	ldr	r0, [pc, #320]	; (800ac1c <_svfiprintf_r+0x1d4>)
 800aadc:	f7f5 fb78 	bl	80001d0 <memchr>
 800aae0:	1c67      	adds	r7, r4, #1
 800aae2:	9b04      	ldr	r3, [sp, #16]
 800aae4:	b9d8      	cbnz	r0, 800ab1e <_svfiprintf_r+0xd6>
 800aae6:	06d9      	lsls	r1, r3, #27
 800aae8:	bf44      	itt	mi
 800aaea:	2220      	movmi	r2, #32
 800aaec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800aaf0:	071a      	lsls	r2, r3, #28
 800aaf2:	bf44      	itt	mi
 800aaf4:	222b      	movmi	r2, #43	; 0x2b
 800aaf6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800aafa:	7822      	ldrb	r2, [r4, #0]
 800aafc:	2a2a      	cmp	r2, #42	; 0x2a
 800aafe:	d016      	beq.n	800ab2e <_svfiprintf_r+0xe6>
 800ab00:	9a07      	ldr	r2, [sp, #28]
 800ab02:	2100      	movs	r1, #0
 800ab04:	200a      	movs	r0, #10
 800ab06:	4627      	mov	r7, r4
 800ab08:	3401      	adds	r4, #1
 800ab0a:	783b      	ldrb	r3, [r7, #0]
 800ab0c:	3b30      	subs	r3, #48	; 0x30
 800ab0e:	2b09      	cmp	r3, #9
 800ab10:	d951      	bls.n	800abb6 <_svfiprintf_r+0x16e>
 800ab12:	b1c9      	cbz	r1, 800ab48 <_svfiprintf_r+0x100>
 800ab14:	e011      	b.n	800ab3a <_svfiprintf_r+0xf2>
 800ab16:	2b25      	cmp	r3, #37	; 0x25
 800ab18:	d0c0      	beq.n	800aa9c <_svfiprintf_r+0x54>
 800ab1a:	4627      	mov	r7, r4
 800ab1c:	e7b9      	b.n	800aa92 <_svfiprintf_r+0x4a>
 800ab1e:	4a3f      	ldr	r2, [pc, #252]	; (800ac1c <_svfiprintf_r+0x1d4>)
 800ab20:	1a80      	subs	r0, r0, r2
 800ab22:	fa0b f000 	lsl.w	r0, fp, r0
 800ab26:	4318      	orrs	r0, r3
 800ab28:	9004      	str	r0, [sp, #16]
 800ab2a:	463c      	mov	r4, r7
 800ab2c:	e7d3      	b.n	800aad6 <_svfiprintf_r+0x8e>
 800ab2e:	9a03      	ldr	r2, [sp, #12]
 800ab30:	1d11      	adds	r1, r2, #4
 800ab32:	6812      	ldr	r2, [r2, #0]
 800ab34:	9103      	str	r1, [sp, #12]
 800ab36:	2a00      	cmp	r2, #0
 800ab38:	db01      	blt.n	800ab3e <_svfiprintf_r+0xf6>
 800ab3a:	9207      	str	r2, [sp, #28]
 800ab3c:	e004      	b.n	800ab48 <_svfiprintf_r+0x100>
 800ab3e:	4252      	negs	r2, r2
 800ab40:	f043 0302 	orr.w	r3, r3, #2
 800ab44:	9207      	str	r2, [sp, #28]
 800ab46:	9304      	str	r3, [sp, #16]
 800ab48:	783b      	ldrb	r3, [r7, #0]
 800ab4a:	2b2e      	cmp	r3, #46	; 0x2e
 800ab4c:	d10e      	bne.n	800ab6c <_svfiprintf_r+0x124>
 800ab4e:	787b      	ldrb	r3, [r7, #1]
 800ab50:	2b2a      	cmp	r3, #42	; 0x2a
 800ab52:	f107 0101 	add.w	r1, r7, #1
 800ab56:	d132      	bne.n	800abbe <_svfiprintf_r+0x176>
 800ab58:	9b03      	ldr	r3, [sp, #12]
 800ab5a:	1d1a      	adds	r2, r3, #4
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	9203      	str	r2, [sp, #12]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	bfb8      	it	lt
 800ab64:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ab68:	3702      	adds	r7, #2
 800ab6a:	9305      	str	r3, [sp, #20]
 800ab6c:	4c2c      	ldr	r4, [pc, #176]	; (800ac20 <_svfiprintf_r+0x1d8>)
 800ab6e:	7839      	ldrb	r1, [r7, #0]
 800ab70:	2203      	movs	r2, #3
 800ab72:	4620      	mov	r0, r4
 800ab74:	f7f5 fb2c 	bl	80001d0 <memchr>
 800ab78:	b138      	cbz	r0, 800ab8a <_svfiprintf_r+0x142>
 800ab7a:	2340      	movs	r3, #64	; 0x40
 800ab7c:	1b00      	subs	r0, r0, r4
 800ab7e:	fa03 f000 	lsl.w	r0, r3, r0
 800ab82:	9b04      	ldr	r3, [sp, #16]
 800ab84:	4303      	orrs	r3, r0
 800ab86:	9304      	str	r3, [sp, #16]
 800ab88:	3701      	adds	r7, #1
 800ab8a:	7839      	ldrb	r1, [r7, #0]
 800ab8c:	4825      	ldr	r0, [pc, #148]	; (800ac24 <_svfiprintf_r+0x1dc>)
 800ab8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab92:	2206      	movs	r2, #6
 800ab94:	1c7e      	adds	r6, r7, #1
 800ab96:	f7f5 fb1b 	bl	80001d0 <memchr>
 800ab9a:	2800      	cmp	r0, #0
 800ab9c:	d035      	beq.n	800ac0a <_svfiprintf_r+0x1c2>
 800ab9e:	4b22      	ldr	r3, [pc, #136]	; (800ac28 <_svfiprintf_r+0x1e0>)
 800aba0:	b9fb      	cbnz	r3, 800abe2 <_svfiprintf_r+0x19a>
 800aba2:	9b03      	ldr	r3, [sp, #12]
 800aba4:	3307      	adds	r3, #7
 800aba6:	f023 0307 	bic.w	r3, r3, #7
 800abaa:	3308      	adds	r3, #8
 800abac:	9303      	str	r3, [sp, #12]
 800abae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abb0:	444b      	add	r3, r9
 800abb2:	9309      	str	r3, [sp, #36]	; 0x24
 800abb4:	e76c      	b.n	800aa90 <_svfiprintf_r+0x48>
 800abb6:	fb00 3202 	mla	r2, r0, r2, r3
 800abba:	2101      	movs	r1, #1
 800abbc:	e7a3      	b.n	800ab06 <_svfiprintf_r+0xbe>
 800abbe:	2300      	movs	r3, #0
 800abc0:	9305      	str	r3, [sp, #20]
 800abc2:	4618      	mov	r0, r3
 800abc4:	240a      	movs	r4, #10
 800abc6:	460f      	mov	r7, r1
 800abc8:	3101      	adds	r1, #1
 800abca:	783a      	ldrb	r2, [r7, #0]
 800abcc:	3a30      	subs	r2, #48	; 0x30
 800abce:	2a09      	cmp	r2, #9
 800abd0:	d903      	bls.n	800abda <_svfiprintf_r+0x192>
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d0ca      	beq.n	800ab6c <_svfiprintf_r+0x124>
 800abd6:	9005      	str	r0, [sp, #20]
 800abd8:	e7c8      	b.n	800ab6c <_svfiprintf_r+0x124>
 800abda:	fb04 2000 	mla	r0, r4, r0, r2
 800abde:	2301      	movs	r3, #1
 800abe0:	e7f1      	b.n	800abc6 <_svfiprintf_r+0x17e>
 800abe2:	ab03      	add	r3, sp, #12
 800abe4:	9300      	str	r3, [sp, #0]
 800abe6:	462a      	mov	r2, r5
 800abe8:	4b10      	ldr	r3, [pc, #64]	; (800ac2c <_svfiprintf_r+0x1e4>)
 800abea:	a904      	add	r1, sp, #16
 800abec:	4640      	mov	r0, r8
 800abee:	f3af 8000 	nop.w
 800abf2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800abf6:	4681      	mov	r9, r0
 800abf8:	d1d9      	bne.n	800abae <_svfiprintf_r+0x166>
 800abfa:	89ab      	ldrh	r3, [r5, #12]
 800abfc:	065b      	lsls	r3, r3, #25
 800abfe:	f53f af38 	bmi.w	800aa72 <_svfiprintf_r+0x2a>
 800ac02:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac04:	b01d      	add	sp, #116	; 0x74
 800ac06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac0a:	ab03      	add	r3, sp, #12
 800ac0c:	9300      	str	r3, [sp, #0]
 800ac0e:	462a      	mov	r2, r5
 800ac10:	4b06      	ldr	r3, [pc, #24]	; (800ac2c <_svfiprintf_r+0x1e4>)
 800ac12:	a904      	add	r1, sp, #16
 800ac14:	4640      	mov	r0, r8
 800ac16:	f000 f881 	bl	800ad1c <_printf_i>
 800ac1a:	e7ea      	b.n	800abf2 <_svfiprintf_r+0x1aa>
 800ac1c:	0800ce44 	.word	0x0800ce44
 800ac20:	0800ce4a 	.word	0x0800ce4a
 800ac24:	0800ce4e 	.word	0x0800ce4e
 800ac28:	00000000 	.word	0x00000000
 800ac2c:	0800a991 	.word	0x0800a991

0800ac30 <_printf_common>:
 800ac30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac34:	4691      	mov	r9, r2
 800ac36:	461f      	mov	r7, r3
 800ac38:	688a      	ldr	r2, [r1, #8]
 800ac3a:	690b      	ldr	r3, [r1, #16]
 800ac3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ac40:	4293      	cmp	r3, r2
 800ac42:	bfb8      	it	lt
 800ac44:	4613      	movlt	r3, r2
 800ac46:	f8c9 3000 	str.w	r3, [r9]
 800ac4a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ac4e:	4606      	mov	r6, r0
 800ac50:	460c      	mov	r4, r1
 800ac52:	b112      	cbz	r2, 800ac5a <_printf_common+0x2a>
 800ac54:	3301      	adds	r3, #1
 800ac56:	f8c9 3000 	str.w	r3, [r9]
 800ac5a:	6823      	ldr	r3, [r4, #0]
 800ac5c:	0699      	lsls	r1, r3, #26
 800ac5e:	bf42      	ittt	mi
 800ac60:	f8d9 3000 	ldrmi.w	r3, [r9]
 800ac64:	3302      	addmi	r3, #2
 800ac66:	f8c9 3000 	strmi.w	r3, [r9]
 800ac6a:	6825      	ldr	r5, [r4, #0]
 800ac6c:	f015 0506 	ands.w	r5, r5, #6
 800ac70:	d107      	bne.n	800ac82 <_printf_common+0x52>
 800ac72:	f104 0a19 	add.w	sl, r4, #25
 800ac76:	68e3      	ldr	r3, [r4, #12]
 800ac78:	f8d9 2000 	ldr.w	r2, [r9]
 800ac7c:	1a9b      	subs	r3, r3, r2
 800ac7e:	429d      	cmp	r5, r3
 800ac80:	db29      	blt.n	800acd6 <_printf_common+0xa6>
 800ac82:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800ac86:	6822      	ldr	r2, [r4, #0]
 800ac88:	3300      	adds	r3, #0
 800ac8a:	bf18      	it	ne
 800ac8c:	2301      	movne	r3, #1
 800ac8e:	0692      	lsls	r2, r2, #26
 800ac90:	d42e      	bmi.n	800acf0 <_printf_common+0xc0>
 800ac92:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ac96:	4639      	mov	r1, r7
 800ac98:	4630      	mov	r0, r6
 800ac9a:	47c0      	blx	r8
 800ac9c:	3001      	adds	r0, #1
 800ac9e:	d021      	beq.n	800ace4 <_printf_common+0xb4>
 800aca0:	6823      	ldr	r3, [r4, #0]
 800aca2:	68e5      	ldr	r5, [r4, #12]
 800aca4:	f8d9 2000 	ldr.w	r2, [r9]
 800aca8:	f003 0306 	and.w	r3, r3, #6
 800acac:	2b04      	cmp	r3, #4
 800acae:	bf08      	it	eq
 800acb0:	1aad      	subeq	r5, r5, r2
 800acb2:	68a3      	ldr	r3, [r4, #8]
 800acb4:	6922      	ldr	r2, [r4, #16]
 800acb6:	bf0c      	ite	eq
 800acb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800acbc:	2500      	movne	r5, #0
 800acbe:	4293      	cmp	r3, r2
 800acc0:	bfc4      	itt	gt
 800acc2:	1a9b      	subgt	r3, r3, r2
 800acc4:	18ed      	addgt	r5, r5, r3
 800acc6:	f04f 0900 	mov.w	r9, #0
 800acca:	341a      	adds	r4, #26
 800accc:	454d      	cmp	r5, r9
 800acce:	d11b      	bne.n	800ad08 <_printf_common+0xd8>
 800acd0:	2000      	movs	r0, #0
 800acd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acd6:	2301      	movs	r3, #1
 800acd8:	4652      	mov	r2, sl
 800acda:	4639      	mov	r1, r7
 800acdc:	4630      	mov	r0, r6
 800acde:	47c0      	blx	r8
 800ace0:	3001      	adds	r0, #1
 800ace2:	d103      	bne.n	800acec <_printf_common+0xbc>
 800ace4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ace8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acec:	3501      	adds	r5, #1
 800acee:	e7c2      	b.n	800ac76 <_printf_common+0x46>
 800acf0:	18e1      	adds	r1, r4, r3
 800acf2:	1c5a      	adds	r2, r3, #1
 800acf4:	2030      	movs	r0, #48	; 0x30
 800acf6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800acfa:	4422      	add	r2, r4
 800acfc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ad00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ad04:	3302      	adds	r3, #2
 800ad06:	e7c4      	b.n	800ac92 <_printf_common+0x62>
 800ad08:	2301      	movs	r3, #1
 800ad0a:	4622      	mov	r2, r4
 800ad0c:	4639      	mov	r1, r7
 800ad0e:	4630      	mov	r0, r6
 800ad10:	47c0      	blx	r8
 800ad12:	3001      	adds	r0, #1
 800ad14:	d0e6      	beq.n	800ace4 <_printf_common+0xb4>
 800ad16:	f109 0901 	add.w	r9, r9, #1
 800ad1a:	e7d7      	b.n	800accc <_printf_common+0x9c>

0800ad1c <_printf_i>:
 800ad1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ad20:	4617      	mov	r7, r2
 800ad22:	7e0a      	ldrb	r2, [r1, #24]
 800ad24:	b085      	sub	sp, #20
 800ad26:	2a6e      	cmp	r2, #110	; 0x6e
 800ad28:	4698      	mov	r8, r3
 800ad2a:	4606      	mov	r6, r0
 800ad2c:	460c      	mov	r4, r1
 800ad2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ad30:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800ad34:	f000 80bc 	beq.w	800aeb0 <_printf_i+0x194>
 800ad38:	d81a      	bhi.n	800ad70 <_printf_i+0x54>
 800ad3a:	2a63      	cmp	r2, #99	; 0x63
 800ad3c:	d02e      	beq.n	800ad9c <_printf_i+0x80>
 800ad3e:	d80a      	bhi.n	800ad56 <_printf_i+0x3a>
 800ad40:	2a00      	cmp	r2, #0
 800ad42:	f000 80c8 	beq.w	800aed6 <_printf_i+0x1ba>
 800ad46:	2a58      	cmp	r2, #88	; 0x58
 800ad48:	f000 808a 	beq.w	800ae60 <_printf_i+0x144>
 800ad4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad50:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800ad54:	e02a      	b.n	800adac <_printf_i+0x90>
 800ad56:	2a64      	cmp	r2, #100	; 0x64
 800ad58:	d001      	beq.n	800ad5e <_printf_i+0x42>
 800ad5a:	2a69      	cmp	r2, #105	; 0x69
 800ad5c:	d1f6      	bne.n	800ad4c <_printf_i+0x30>
 800ad5e:	6821      	ldr	r1, [r4, #0]
 800ad60:	681a      	ldr	r2, [r3, #0]
 800ad62:	f011 0f80 	tst.w	r1, #128	; 0x80
 800ad66:	d023      	beq.n	800adb0 <_printf_i+0x94>
 800ad68:	1d11      	adds	r1, r2, #4
 800ad6a:	6019      	str	r1, [r3, #0]
 800ad6c:	6813      	ldr	r3, [r2, #0]
 800ad6e:	e027      	b.n	800adc0 <_printf_i+0xa4>
 800ad70:	2a73      	cmp	r2, #115	; 0x73
 800ad72:	f000 80b4 	beq.w	800aede <_printf_i+0x1c2>
 800ad76:	d808      	bhi.n	800ad8a <_printf_i+0x6e>
 800ad78:	2a6f      	cmp	r2, #111	; 0x6f
 800ad7a:	d02a      	beq.n	800add2 <_printf_i+0xb6>
 800ad7c:	2a70      	cmp	r2, #112	; 0x70
 800ad7e:	d1e5      	bne.n	800ad4c <_printf_i+0x30>
 800ad80:	680a      	ldr	r2, [r1, #0]
 800ad82:	f042 0220 	orr.w	r2, r2, #32
 800ad86:	600a      	str	r2, [r1, #0]
 800ad88:	e003      	b.n	800ad92 <_printf_i+0x76>
 800ad8a:	2a75      	cmp	r2, #117	; 0x75
 800ad8c:	d021      	beq.n	800add2 <_printf_i+0xb6>
 800ad8e:	2a78      	cmp	r2, #120	; 0x78
 800ad90:	d1dc      	bne.n	800ad4c <_printf_i+0x30>
 800ad92:	2278      	movs	r2, #120	; 0x78
 800ad94:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800ad98:	496e      	ldr	r1, [pc, #440]	; (800af54 <_printf_i+0x238>)
 800ad9a:	e064      	b.n	800ae66 <_printf_i+0x14a>
 800ad9c:	681a      	ldr	r2, [r3, #0]
 800ad9e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800ada2:	1d11      	adds	r1, r2, #4
 800ada4:	6019      	str	r1, [r3, #0]
 800ada6:	6813      	ldr	r3, [r2, #0]
 800ada8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800adac:	2301      	movs	r3, #1
 800adae:	e0a3      	b.n	800aef8 <_printf_i+0x1dc>
 800adb0:	f011 0f40 	tst.w	r1, #64	; 0x40
 800adb4:	f102 0104 	add.w	r1, r2, #4
 800adb8:	6019      	str	r1, [r3, #0]
 800adba:	d0d7      	beq.n	800ad6c <_printf_i+0x50>
 800adbc:	f9b2 3000 	ldrsh.w	r3, [r2]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	da03      	bge.n	800adcc <_printf_i+0xb0>
 800adc4:	222d      	movs	r2, #45	; 0x2d
 800adc6:	425b      	negs	r3, r3
 800adc8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800adcc:	4962      	ldr	r1, [pc, #392]	; (800af58 <_printf_i+0x23c>)
 800adce:	220a      	movs	r2, #10
 800add0:	e017      	b.n	800ae02 <_printf_i+0xe6>
 800add2:	6820      	ldr	r0, [r4, #0]
 800add4:	6819      	ldr	r1, [r3, #0]
 800add6:	f010 0f80 	tst.w	r0, #128	; 0x80
 800adda:	d003      	beq.n	800ade4 <_printf_i+0xc8>
 800addc:	1d08      	adds	r0, r1, #4
 800adde:	6018      	str	r0, [r3, #0]
 800ade0:	680b      	ldr	r3, [r1, #0]
 800ade2:	e006      	b.n	800adf2 <_printf_i+0xd6>
 800ade4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ade8:	f101 0004 	add.w	r0, r1, #4
 800adec:	6018      	str	r0, [r3, #0]
 800adee:	d0f7      	beq.n	800ade0 <_printf_i+0xc4>
 800adf0:	880b      	ldrh	r3, [r1, #0]
 800adf2:	4959      	ldr	r1, [pc, #356]	; (800af58 <_printf_i+0x23c>)
 800adf4:	2a6f      	cmp	r2, #111	; 0x6f
 800adf6:	bf14      	ite	ne
 800adf8:	220a      	movne	r2, #10
 800adfa:	2208      	moveq	r2, #8
 800adfc:	2000      	movs	r0, #0
 800adfe:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800ae02:	6865      	ldr	r5, [r4, #4]
 800ae04:	60a5      	str	r5, [r4, #8]
 800ae06:	2d00      	cmp	r5, #0
 800ae08:	f2c0 809c 	blt.w	800af44 <_printf_i+0x228>
 800ae0c:	6820      	ldr	r0, [r4, #0]
 800ae0e:	f020 0004 	bic.w	r0, r0, #4
 800ae12:	6020      	str	r0, [r4, #0]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d13f      	bne.n	800ae98 <_printf_i+0x17c>
 800ae18:	2d00      	cmp	r5, #0
 800ae1a:	f040 8095 	bne.w	800af48 <_printf_i+0x22c>
 800ae1e:	4675      	mov	r5, lr
 800ae20:	2a08      	cmp	r2, #8
 800ae22:	d10b      	bne.n	800ae3c <_printf_i+0x120>
 800ae24:	6823      	ldr	r3, [r4, #0]
 800ae26:	07da      	lsls	r2, r3, #31
 800ae28:	d508      	bpl.n	800ae3c <_printf_i+0x120>
 800ae2a:	6923      	ldr	r3, [r4, #16]
 800ae2c:	6862      	ldr	r2, [r4, #4]
 800ae2e:	429a      	cmp	r2, r3
 800ae30:	bfde      	ittt	le
 800ae32:	2330      	movle	r3, #48	; 0x30
 800ae34:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ae38:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ae3c:	ebae 0305 	sub.w	r3, lr, r5
 800ae40:	6123      	str	r3, [r4, #16]
 800ae42:	f8cd 8000 	str.w	r8, [sp]
 800ae46:	463b      	mov	r3, r7
 800ae48:	aa03      	add	r2, sp, #12
 800ae4a:	4621      	mov	r1, r4
 800ae4c:	4630      	mov	r0, r6
 800ae4e:	f7ff feef 	bl	800ac30 <_printf_common>
 800ae52:	3001      	adds	r0, #1
 800ae54:	d155      	bne.n	800af02 <_printf_i+0x1e6>
 800ae56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae5a:	b005      	add	sp, #20
 800ae5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae60:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800ae64:	493c      	ldr	r1, [pc, #240]	; (800af58 <_printf_i+0x23c>)
 800ae66:	6822      	ldr	r2, [r4, #0]
 800ae68:	6818      	ldr	r0, [r3, #0]
 800ae6a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800ae6e:	f100 0504 	add.w	r5, r0, #4
 800ae72:	601d      	str	r5, [r3, #0]
 800ae74:	d001      	beq.n	800ae7a <_printf_i+0x15e>
 800ae76:	6803      	ldr	r3, [r0, #0]
 800ae78:	e002      	b.n	800ae80 <_printf_i+0x164>
 800ae7a:	0655      	lsls	r5, r2, #25
 800ae7c:	d5fb      	bpl.n	800ae76 <_printf_i+0x15a>
 800ae7e:	8803      	ldrh	r3, [r0, #0]
 800ae80:	07d0      	lsls	r0, r2, #31
 800ae82:	bf44      	itt	mi
 800ae84:	f042 0220 	orrmi.w	r2, r2, #32
 800ae88:	6022      	strmi	r2, [r4, #0]
 800ae8a:	b91b      	cbnz	r3, 800ae94 <_printf_i+0x178>
 800ae8c:	6822      	ldr	r2, [r4, #0]
 800ae8e:	f022 0220 	bic.w	r2, r2, #32
 800ae92:	6022      	str	r2, [r4, #0]
 800ae94:	2210      	movs	r2, #16
 800ae96:	e7b1      	b.n	800adfc <_printf_i+0xe0>
 800ae98:	4675      	mov	r5, lr
 800ae9a:	fbb3 f0f2 	udiv	r0, r3, r2
 800ae9e:	fb02 3310 	mls	r3, r2, r0, r3
 800aea2:	5ccb      	ldrb	r3, [r1, r3]
 800aea4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800aea8:	4603      	mov	r3, r0
 800aeaa:	2800      	cmp	r0, #0
 800aeac:	d1f5      	bne.n	800ae9a <_printf_i+0x17e>
 800aeae:	e7b7      	b.n	800ae20 <_printf_i+0x104>
 800aeb0:	6808      	ldr	r0, [r1, #0]
 800aeb2:	681a      	ldr	r2, [r3, #0]
 800aeb4:	6949      	ldr	r1, [r1, #20]
 800aeb6:	f010 0f80 	tst.w	r0, #128	; 0x80
 800aeba:	d004      	beq.n	800aec6 <_printf_i+0x1aa>
 800aebc:	1d10      	adds	r0, r2, #4
 800aebe:	6018      	str	r0, [r3, #0]
 800aec0:	6813      	ldr	r3, [r2, #0]
 800aec2:	6019      	str	r1, [r3, #0]
 800aec4:	e007      	b.n	800aed6 <_printf_i+0x1ba>
 800aec6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800aeca:	f102 0004 	add.w	r0, r2, #4
 800aece:	6018      	str	r0, [r3, #0]
 800aed0:	6813      	ldr	r3, [r2, #0]
 800aed2:	d0f6      	beq.n	800aec2 <_printf_i+0x1a6>
 800aed4:	8019      	strh	r1, [r3, #0]
 800aed6:	2300      	movs	r3, #0
 800aed8:	6123      	str	r3, [r4, #16]
 800aeda:	4675      	mov	r5, lr
 800aedc:	e7b1      	b.n	800ae42 <_printf_i+0x126>
 800aede:	681a      	ldr	r2, [r3, #0]
 800aee0:	1d11      	adds	r1, r2, #4
 800aee2:	6019      	str	r1, [r3, #0]
 800aee4:	6815      	ldr	r5, [r2, #0]
 800aee6:	6862      	ldr	r2, [r4, #4]
 800aee8:	2100      	movs	r1, #0
 800aeea:	4628      	mov	r0, r5
 800aeec:	f7f5 f970 	bl	80001d0 <memchr>
 800aef0:	b108      	cbz	r0, 800aef6 <_printf_i+0x1da>
 800aef2:	1b40      	subs	r0, r0, r5
 800aef4:	6060      	str	r0, [r4, #4]
 800aef6:	6863      	ldr	r3, [r4, #4]
 800aef8:	6123      	str	r3, [r4, #16]
 800aefa:	2300      	movs	r3, #0
 800aefc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af00:	e79f      	b.n	800ae42 <_printf_i+0x126>
 800af02:	6923      	ldr	r3, [r4, #16]
 800af04:	462a      	mov	r2, r5
 800af06:	4639      	mov	r1, r7
 800af08:	4630      	mov	r0, r6
 800af0a:	47c0      	blx	r8
 800af0c:	3001      	adds	r0, #1
 800af0e:	d0a2      	beq.n	800ae56 <_printf_i+0x13a>
 800af10:	6823      	ldr	r3, [r4, #0]
 800af12:	079b      	lsls	r3, r3, #30
 800af14:	d507      	bpl.n	800af26 <_printf_i+0x20a>
 800af16:	2500      	movs	r5, #0
 800af18:	f104 0919 	add.w	r9, r4, #25
 800af1c:	68e3      	ldr	r3, [r4, #12]
 800af1e:	9a03      	ldr	r2, [sp, #12]
 800af20:	1a9b      	subs	r3, r3, r2
 800af22:	429d      	cmp	r5, r3
 800af24:	db05      	blt.n	800af32 <_printf_i+0x216>
 800af26:	68e0      	ldr	r0, [r4, #12]
 800af28:	9b03      	ldr	r3, [sp, #12]
 800af2a:	4298      	cmp	r0, r3
 800af2c:	bfb8      	it	lt
 800af2e:	4618      	movlt	r0, r3
 800af30:	e793      	b.n	800ae5a <_printf_i+0x13e>
 800af32:	2301      	movs	r3, #1
 800af34:	464a      	mov	r2, r9
 800af36:	4639      	mov	r1, r7
 800af38:	4630      	mov	r0, r6
 800af3a:	47c0      	blx	r8
 800af3c:	3001      	adds	r0, #1
 800af3e:	d08a      	beq.n	800ae56 <_printf_i+0x13a>
 800af40:	3501      	adds	r5, #1
 800af42:	e7eb      	b.n	800af1c <_printf_i+0x200>
 800af44:	2b00      	cmp	r3, #0
 800af46:	d1a7      	bne.n	800ae98 <_printf_i+0x17c>
 800af48:	780b      	ldrb	r3, [r1, #0]
 800af4a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800af4e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af52:	e765      	b.n	800ae20 <_printf_i+0x104>
 800af54:	0800ce66 	.word	0x0800ce66
 800af58:	0800ce55 	.word	0x0800ce55

0800af5c <memmove>:
 800af5c:	4288      	cmp	r0, r1
 800af5e:	b510      	push	{r4, lr}
 800af60:	eb01 0302 	add.w	r3, r1, r2
 800af64:	d803      	bhi.n	800af6e <memmove+0x12>
 800af66:	1e42      	subs	r2, r0, #1
 800af68:	4299      	cmp	r1, r3
 800af6a:	d10c      	bne.n	800af86 <memmove+0x2a>
 800af6c:	bd10      	pop	{r4, pc}
 800af6e:	4298      	cmp	r0, r3
 800af70:	d2f9      	bcs.n	800af66 <memmove+0xa>
 800af72:	1881      	adds	r1, r0, r2
 800af74:	1ad2      	subs	r2, r2, r3
 800af76:	42d3      	cmn	r3, r2
 800af78:	d100      	bne.n	800af7c <memmove+0x20>
 800af7a:	bd10      	pop	{r4, pc}
 800af7c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800af80:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800af84:	e7f7      	b.n	800af76 <memmove+0x1a>
 800af86:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af8a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800af8e:	e7eb      	b.n	800af68 <memmove+0xc>

0800af90 <_free_r>:
 800af90:	b538      	push	{r3, r4, r5, lr}
 800af92:	4605      	mov	r5, r0
 800af94:	2900      	cmp	r1, #0
 800af96:	d045      	beq.n	800b024 <_free_r+0x94>
 800af98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af9c:	1f0c      	subs	r4, r1, #4
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	bfb8      	it	lt
 800afa2:	18e4      	addlt	r4, r4, r3
 800afa4:	f000 f8d6 	bl	800b154 <__malloc_lock>
 800afa8:	4a1f      	ldr	r2, [pc, #124]	; (800b028 <_free_r+0x98>)
 800afaa:	6813      	ldr	r3, [r2, #0]
 800afac:	4610      	mov	r0, r2
 800afae:	b933      	cbnz	r3, 800afbe <_free_r+0x2e>
 800afb0:	6063      	str	r3, [r4, #4]
 800afb2:	6014      	str	r4, [r2, #0]
 800afb4:	4628      	mov	r0, r5
 800afb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800afba:	f000 b8cc 	b.w	800b156 <__malloc_unlock>
 800afbe:	42a3      	cmp	r3, r4
 800afc0:	d90c      	bls.n	800afdc <_free_r+0x4c>
 800afc2:	6821      	ldr	r1, [r4, #0]
 800afc4:	1862      	adds	r2, r4, r1
 800afc6:	4293      	cmp	r3, r2
 800afc8:	bf04      	itt	eq
 800afca:	681a      	ldreq	r2, [r3, #0]
 800afcc:	685b      	ldreq	r3, [r3, #4]
 800afce:	6063      	str	r3, [r4, #4]
 800afd0:	bf04      	itt	eq
 800afd2:	1852      	addeq	r2, r2, r1
 800afd4:	6022      	streq	r2, [r4, #0]
 800afd6:	6004      	str	r4, [r0, #0]
 800afd8:	e7ec      	b.n	800afb4 <_free_r+0x24>
 800afda:	4613      	mov	r3, r2
 800afdc:	685a      	ldr	r2, [r3, #4]
 800afde:	b10a      	cbz	r2, 800afe4 <_free_r+0x54>
 800afe0:	42a2      	cmp	r2, r4
 800afe2:	d9fa      	bls.n	800afda <_free_r+0x4a>
 800afe4:	6819      	ldr	r1, [r3, #0]
 800afe6:	1858      	adds	r0, r3, r1
 800afe8:	42a0      	cmp	r0, r4
 800afea:	d10b      	bne.n	800b004 <_free_r+0x74>
 800afec:	6820      	ldr	r0, [r4, #0]
 800afee:	4401      	add	r1, r0
 800aff0:	1858      	adds	r0, r3, r1
 800aff2:	4282      	cmp	r2, r0
 800aff4:	6019      	str	r1, [r3, #0]
 800aff6:	d1dd      	bne.n	800afb4 <_free_r+0x24>
 800aff8:	6810      	ldr	r0, [r2, #0]
 800affa:	6852      	ldr	r2, [r2, #4]
 800affc:	605a      	str	r2, [r3, #4]
 800affe:	4401      	add	r1, r0
 800b000:	6019      	str	r1, [r3, #0]
 800b002:	e7d7      	b.n	800afb4 <_free_r+0x24>
 800b004:	d902      	bls.n	800b00c <_free_r+0x7c>
 800b006:	230c      	movs	r3, #12
 800b008:	602b      	str	r3, [r5, #0]
 800b00a:	e7d3      	b.n	800afb4 <_free_r+0x24>
 800b00c:	6820      	ldr	r0, [r4, #0]
 800b00e:	1821      	adds	r1, r4, r0
 800b010:	428a      	cmp	r2, r1
 800b012:	bf04      	itt	eq
 800b014:	6811      	ldreq	r1, [r2, #0]
 800b016:	6852      	ldreq	r2, [r2, #4]
 800b018:	6062      	str	r2, [r4, #4]
 800b01a:	bf04      	itt	eq
 800b01c:	1809      	addeq	r1, r1, r0
 800b01e:	6021      	streq	r1, [r4, #0]
 800b020:	605c      	str	r4, [r3, #4]
 800b022:	e7c7      	b.n	800afb4 <_free_r+0x24>
 800b024:	bd38      	pop	{r3, r4, r5, pc}
 800b026:	bf00      	nop
 800b028:	200042e0 	.word	0x200042e0

0800b02c <_malloc_r>:
 800b02c:	b570      	push	{r4, r5, r6, lr}
 800b02e:	1ccd      	adds	r5, r1, #3
 800b030:	f025 0503 	bic.w	r5, r5, #3
 800b034:	3508      	adds	r5, #8
 800b036:	2d0c      	cmp	r5, #12
 800b038:	bf38      	it	cc
 800b03a:	250c      	movcc	r5, #12
 800b03c:	2d00      	cmp	r5, #0
 800b03e:	4606      	mov	r6, r0
 800b040:	db01      	blt.n	800b046 <_malloc_r+0x1a>
 800b042:	42a9      	cmp	r1, r5
 800b044:	d903      	bls.n	800b04e <_malloc_r+0x22>
 800b046:	230c      	movs	r3, #12
 800b048:	6033      	str	r3, [r6, #0]
 800b04a:	2000      	movs	r0, #0
 800b04c:	bd70      	pop	{r4, r5, r6, pc}
 800b04e:	f000 f881 	bl	800b154 <__malloc_lock>
 800b052:	4a23      	ldr	r2, [pc, #140]	; (800b0e0 <_malloc_r+0xb4>)
 800b054:	6814      	ldr	r4, [r2, #0]
 800b056:	4621      	mov	r1, r4
 800b058:	b991      	cbnz	r1, 800b080 <_malloc_r+0x54>
 800b05a:	4c22      	ldr	r4, [pc, #136]	; (800b0e4 <_malloc_r+0xb8>)
 800b05c:	6823      	ldr	r3, [r4, #0]
 800b05e:	b91b      	cbnz	r3, 800b068 <_malloc_r+0x3c>
 800b060:	4630      	mov	r0, r6
 800b062:	f000 f867 	bl	800b134 <_sbrk_r>
 800b066:	6020      	str	r0, [r4, #0]
 800b068:	4629      	mov	r1, r5
 800b06a:	4630      	mov	r0, r6
 800b06c:	f000 f862 	bl	800b134 <_sbrk_r>
 800b070:	1c43      	adds	r3, r0, #1
 800b072:	d126      	bne.n	800b0c2 <_malloc_r+0x96>
 800b074:	230c      	movs	r3, #12
 800b076:	6033      	str	r3, [r6, #0]
 800b078:	4630      	mov	r0, r6
 800b07a:	f000 f86c 	bl	800b156 <__malloc_unlock>
 800b07e:	e7e4      	b.n	800b04a <_malloc_r+0x1e>
 800b080:	680b      	ldr	r3, [r1, #0]
 800b082:	1b5b      	subs	r3, r3, r5
 800b084:	d41a      	bmi.n	800b0bc <_malloc_r+0x90>
 800b086:	2b0b      	cmp	r3, #11
 800b088:	d90f      	bls.n	800b0aa <_malloc_r+0x7e>
 800b08a:	600b      	str	r3, [r1, #0]
 800b08c:	50cd      	str	r5, [r1, r3]
 800b08e:	18cc      	adds	r4, r1, r3
 800b090:	4630      	mov	r0, r6
 800b092:	f000 f860 	bl	800b156 <__malloc_unlock>
 800b096:	f104 000b 	add.w	r0, r4, #11
 800b09a:	1d23      	adds	r3, r4, #4
 800b09c:	f020 0007 	bic.w	r0, r0, #7
 800b0a0:	1ac3      	subs	r3, r0, r3
 800b0a2:	d01b      	beq.n	800b0dc <_malloc_r+0xb0>
 800b0a4:	425a      	negs	r2, r3
 800b0a6:	50e2      	str	r2, [r4, r3]
 800b0a8:	bd70      	pop	{r4, r5, r6, pc}
 800b0aa:	428c      	cmp	r4, r1
 800b0ac:	bf0d      	iteet	eq
 800b0ae:	6863      	ldreq	r3, [r4, #4]
 800b0b0:	684b      	ldrne	r3, [r1, #4]
 800b0b2:	6063      	strne	r3, [r4, #4]
 800b0b4:	6013      	streq	r3, [r2, #0]
 800b0b6:	bf18      	it	ne
 800b0b8:	460c      	movne	r4, r1
 800b0ba:	e7e9      	b.n	800b090 <_malloc_r+0x64>
 800b0bc:	460c      	mov	r4, r1
 800b0be:	6849      	ldr	r1, [r1, #4]
 800b0c0:	e7ca      	b.n	800b058 <_malloc_r+0x2c>
 800b0c2:	1cc4      	adds	r4, r0, #3
 800b0c4:	f024 0403 	bic.w	r4, r4, #3
 800b0c8:	42a0      	cmp	r0, r4
 800b0ca:	d005      	beq.n	800b0d8 <_malloc_r+0xac>
 800b0cc:	1a21      	subs	r1, r4, r0
 800b0ce:	4630      	mov	r0, r6
 800b0d0:	f000 f830 	bl	800b134 <_sbrk_r>
 800b0d4:	3001      	adds	r0, #1
 800b0d6:	d0cd      	beq.n	800b074 <_malloc_r+0x48>
 800b0d8:	6025      	str	r5, [r4, #0]
 800b0da:	e7d9      	b.n	800b090 <_malloc_r+0x64>
 800b0dc:	bd70      	pop	{r4, r5, r6, pc}
 800b0de:	bf00      	nop
 800b0e0:	200042e0 	.word	0x200042e0
 800b0e4:	200042e4 	.word	0x200042e4

0800b0e8 <_realloc_r>:
 800b0e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ea:	4607      	mov	r7, r0
 800b0ec:	4614      	mov	r4, r2
 800b0ee:	460e      	mov	r6, r1
 800b0f0:	b921      	cbnz	r1, 800b0fc <_realloc_r+0x14>
 800b0f2:	4611      	mov	r1, r2
 800b0f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b0f8:	f7ff bf98 	b.w	800b02c <_malloc_r>
 800b0fc:	b922      	cbnz	r2, 800b108 <_realloc_r+0x20>
 800b0fe:	f7ff ff47 	bl	800af90 <_free_r>
 800b102:	4625      	mov	r5, r4
 800b104:	4628      	mov	r0, r5
 800b106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b108:	f000 f826 	bl	800b158 <_malloc_usable_size_r>
 800b10c:	4284      	cmp	r4, r0
 800b10e:	d90f      	bls.n	800b130 <_realloc_r+0x48>
 800b110:	4621      	mov	r1, r4
 800b112:	4638      	mov	r0, r7
 800b114:	f7ff ff8a 	bl	800b02c <_malloc_r>
 800b118:	4605      	mov	r5, r0
 800b11a:	2800      	cmp	r0, #0
 800b11c:	d0f2      	beq.n	800b104 <_realloc_r+0x1c>
 800b11e:	4631      	mov	r1, r6
 800b120:	4622      	mov	r2, r4
 800b122:	f7ff fbc3 	bl	800a8ac <memcpy>
 800b126:	4631      	mov	r1, r6
 800b128:	4638      	mov	r0, r7
 800b12a:	f7ff ff31 	bl	800af90 <_free_r>
 800b12e:	e7e9      	b.n	800b104 <_realloc_r+0x1c>
 800b130:	4635      	mov	r5, r6
 800b132:	e7e7      	b.n	800b104 <_realloc_r+0x1c>

0800b134 <_sbrk_r>:
 800b134:	b538      	push	{r3, r4, r5, lr}
 800b136:	4c06      	ldr	r4, [pc, #24]	; (800b150 <_sbrk_r+0x1c>)
 800b138:	2300      	movs	r3, #0
 800b13a:	4605      	mov	r5, r0
 800b13c:	4608      	mov	r0, r1
 800b13e:	6023      	str	r3, [r4, #0]
 800b140:	f7ff fa0e 	bl	800a560 <_sbrk>
 800b144:	1c43      	adds	r3, r0, #1
 800b146:	d102      	bne.n	800b14e <_sbrk_r+0x1a>
 800b148:	6823      	ldr	r3, [r4, #0]
 800b14a:	b103      	cbz	r3, 800b14e <_sbrk_r+0x1a>
 800b14c:	602b      	str	r3, [r5, #0]
 800b14e:	bd38      	pop	{r3, r4, r5, pc}
 800b150:	2000a6e0 	.word	0x2000a6e0

0800b154 <__malloc_lock>:
 800b154:	4770      	bx	lr

0800b156 <__malloc_unlock>:
 800b156:	4770      	bx	lr

0800b158 <_malloc_usable_size_r>:
 800b158:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800b15c:	2800      	cmp	r0, #0
 800b15e:	f1a0 0004 	sub.w	r0, r0, #4
 800b162:	bfbc      	itt	lt
 800b164:	580b      	ldrlt	r3, [r1, r0]
 800b166:	18c0      	addlt	r0, r0, r3
 800b168:	4770      	bx	lr
	...

0800b16c <log10>:
 800b16c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b16e:	ed2d 8b02 	vpush	{d8}
 800b172:	b08b      	sub	sp, #44	; 0x2c
 800b174:	ec55 4b10 	vmov	r4, r5, d0
 800b178:	f000 f9f2 	bl	800b560 <__ieee754_log10>
 800b17c:	4b36      	ldr	r3, [pc, #216]	; (800b258 <log10+0xec>)
 800b17e:	eeb0 8a40 	vmov.f32	s16, s0
 800b182:	eef0 8a60 	vmov.f32	s17, s1
 800b186:	f993 6000 	ldrsb.w	r6, [r3]
 800b18a:	1c73      	adds	r3, r6, #1
 800b18c:	d05c      	beq.n	800b248 <log10+0xdc>
 800b18e:	4622      	mov	r2, r4
 800b190:	462b      	mov	r3, r5
 800b192:	4620      	mov	r0, r4
 800b194:	4629      	mov	r1, r5
 800b196:	f7f5 fcbd 	bl	8000b14 <__aeabi_dcmpun>
 800b19a:	4607      	mov	r7, r0
 800b19c:	2800      	cmp	r0, #0
 800b19e:	d153      	bne.n	800b248 <log10+0xdc>
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	4620      	mov	r0, r4
 800b1a6:	4629      	mov	r1, r5
 800b1a8:	f7f5 fc96 	bl	8000ad8 <__aeabi_dcmple>
 800b1ac:	2800      	cmp	r0, #0
 800b1ae:	d04b      	beq.n	800b248 <log10+0xdc>
 800b1b0:	4b2a      	ldr	r3, [pc, #168]	; (800b25c <log10+0xf0>)
 800b1b2:	9301      	str	r3, [sp, #4]
 800b1b4:	9708      	str	r7, [sp, #32]
 800b1b6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b1ba:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800b1be:	b9a6      	cbnz	r6, 800b1ea <log10+0x7e>
 800b1c0:	4b27      	ldr	r3, [pc, #156]	; (800b260 <log10+0xf4>)
 800b1c2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b1c6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b1ca:	4620      	mov	r0, r4
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	4629      	mov	r1, r5
 800b1d2:	f7f5 fc6d 	bl	8000ab0 <__aeabi_dcmpeq>
 800b1d6:	bb40      	cbnz	r0, 800b22a <log10+0xbe>
 800b1d8:	2301      	movs	r3, #1
 800b1da:	2e02      	cmp	r6, #2
 800b1dc:	9300      	str	r3, [sp, #0]
 800b1de:	d119      	bne.n	800b214 <log10+0xa8>
 800b1e0:	f7ff fb3a 	bl	800a858 <__errno>
 800b1e4:	2321      	movs	r3, #33	; 0x21
 800b1e6:	6003      	str	r3, [r0, #0]
 800b1e8:	e019      	b.n	800b21e <log10+0xb2>
 800b1ea:	4b1e      	ldr	r3, [pc, #120]	; (800b264 <log10+0xf8>)
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b1f2:	4620      	mov	r0, r4
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	4629      	mov	r1, r5
 800b1fa:	f7f5 fc59 	bl	8000ab0 <__aeabi_dcmpeq>
 800b1fe:	2800      	cmp	r0, #0
 800b200:	d0ea      	beq.n	800b1d8 <log10+0x6c>
 800b202:	2302      	movs	r3, #2
 800b204:	429e      	cmp	r6, r3
 800b206:	9300      	str	r3, [sp, #0]
 800b208:	d111      	bne.n	800b22e <log10+0xc2>
 800b20a:	f7ff fb25 	bl	800a858 <__errno>
 800b20e:	2322      	movs	r3, #34	; 0x22
 800b210:	6003      	str	r3, [r0, #0]
 800b212:	e011      	b.n	800b238 <log10+0xcc>
 800b214:	4668      	mov	r0, sp
 800b216:	f001 f804 	bl	800c222 <matherr>
 800b21a:	2800      	cmp	r0, #0
 800b21c:	d0e0      	beq.n	800b1e0 <log10+0x74>
 800b21e:	4812      	ldr	r0, [pc, #72]	; (800b268 <log10+0xfc>)
 800b220:	f001 f802 	bl	800c228 <nan>
 800b224:	ed8d 0b06 	vstr	d0, [sp, #24]
 800b228:	e006      	b.n	800b238 <log10+0xcc>
 800b22a:	2302      	movs	r3, #2
 800b22c:	9300      	str	r3, [sp, #0]
 800b22e:	4668      	mov	r0, sp
 800b230:	f000 fff7 	bl	800c222 <matherr>
 800b234:	2800      	cmp	r0, #0
 800b236:	d0e8      	beq.n	800b20a <log10+0x9e>
 800b238:	9b08      	ldr	r3, [sp, #32]
 800b23a:	b11b      	cbz	r3, 800b244 <log10+0xd8>
 800b23c:	f7ff fb0c 	bl	800a858 <__errno>
 800b240:	9b08      	ldr	r3, [sp, #32]
 800b242:	6003      	str	r3, [r0, #0]
 800b244:	ed9d 8b06 	vldr	d8, [sp, #24]
 800b248:	eeb0 0a48 	vmov.f32	s0, s16
 800b24c:	eef0 0a68 	vmov.f32	s1, s17
 800b250:	b00b      	add	sp, #44	; 0x2c
 800b252:	ecbd 8b02 	vpop	{d8}
 800b256:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b258:	20000078 	.word	0x20000078
 800b25c:	0800ce77 	.word	0x0800ce77
 800b260:	c7efffff 	.word	0xc7efffff
 800b264:	fff00000 	.word	0xfff00000
 800b268:	0800cd9b 	.word	0x0800cd9b

0800b26c <pow>:
 800b26c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b270:	ed2d 8b04 	vpush	{d8-d9}
 800b274:	b08d      	sub	sp, #52	; 0x34
 800b276:	ec57 6b10 	vmov	r6, r7, d0
 800b27a:	ec55 4b11 	vmov	r4, r5, d1
 800b27e:	f000 f9ff 	bl	800b680 <__ieee754_pow>
 800b282:	4bae      	ldr	r3, [pc, #696]	; (800b53c <pow+0x2d0>)
 800b284:	eeb0 8a40 	vmov.f32	s16, s0
 800b288:	eef0 8a60 	vmov.f32	s17, s1
 800b28c:	f993 9000 	ldrsb.w	r9, [r3]
 800b290:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 800b294:	4698      	mov	r8, r3
 800b296:	d05f      	beq.n	800b358 <pow+0xec>
 800b298:	4622      	mov	r2, r4
 800b29a:	462b      	mov	r3, r5
 800b29c:	4620      	mov	r0, r4
 800b29e:	4629      	mov	r1, r5
 800b2a0:	f7f5 fc38 	bl	8000b14 <__aeabi_dcmpun>
 800b2a4:	4683      	mov	fp, r0
 800b2a6:	2800      	cmp	r0, #0
 800b2a8:	d156      	bne.n	800b358 <pow+0xec>
 800b2aa:	4632      	mov	r2, r6
 800b2ac:	463b      	mov	r3, r7
 800b2ae:	4630      	mov	r0, r6
 800b2b0:	4639      	mov	r1, r7
 800b2b2:	f7f5 fc2f 	bl	8000b14 <__aeabi_dcmpun>
 800b2b6:	9001      	str	r0, [sp, #4]
 800b2b8:	b1e8      	cbz	r0, 800b2f6 <pow+0x8a>
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	2300      	movs	r3, #0
 800b2be:	4620      	mov	r0, r4
 800b2c0:	4629      	mov	r1, r5
 800b2c2:	f7f5 fbf5 	bl	8000ab0 <__aeabi_dcmpeq>
 800b2c6:	2800      	cmp	r0, #0
 800b2c8:	d046      	beq.n	800b358 <pow+0xec>
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	9302      	str	r3, [sp, #8]
 800b2ce:	4b9c      	ldr	r3, [pc, #624]	; (800b540 <pow+0x2d4>)
 800b2d0:	9303      	str	r3, [sp, #12]
 800b2d2:	4b9c      	ldr	r3, [pc, #624]	; (800b544 <pow+0x2d8>)
 800b2d4:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800b2d8:	2200      	movs	r2, #0
 800b2da:	f1b9 0f02 	cmp.w	r9, #2
 800b2de:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b2e2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b2e6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b2ea:	d033      	beq.n	800b354 <pow+0xe8>
 800b2ec:	a802      	add	r0, sp, #8
 800b2ee:	f000 ff98 	bl	800c222 <matherr>
 800b2f2:	bb48      	cbnz	r0, 800b348 <pow+0xdc>
 800b2f4:	e05e      	b.n	800b3b4 <pow+0x148>
 800b2f6:	f04f 0a00 	mov.w	sl, #0
 800b2fa:	f04f 0b00 	mov.w	fp, #0
 800b2fe:	4652      	mov	r2, sl
 800b300:	465b      	mov	r3, fp
 800b302:	4630      	mov	r0, r6
 800b304:	4639      	mov	r1, r7
 800b306:	f7f5 fbd3 	bl	8000ab0 <__aeabi_dcmpeq>
 800b30a:	ec4b ab19 	vmov	d9, sl, fp
 800b30e:	2800      	cmp	r0, #0
 800b310:	d055      	beq.n	800b3be <pow+0x152>
 800b312:	4652      	mov	r2, sl
 800b314:	465b      	mov	r3, fp
 800b316:	4620      	mov	r0, r4
 800b318:	4629      	mov	r1, r5
 800b31a:	f7f5 fbc9 	bl	8000ab0 <__aeabi_dcmpeq>
 800b31e:	4680      	mov	r8, r0
 800b320:	b318      	cbz	r0, 800b36a <pow+0xfe>
 800b322:	2301      	movs	r3, #1
 800b324:	9302      	str	r3, [sp, #8]
 800b326:	4b86      	ldr	r3, [pc, #536]	; (800b540 <pow+0x2d4>)
 800b328:	9303      	str	r3, [sp, #12]
 800b32a:	9b01      	ldr	r3, [sp, #4]
 800b32c:	930a      	str	r3, [sp, #40]	; 0x28
 800b32e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b332:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b336:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800b33a:	f1b9 0f00 	cmp.w	r9, #0
 800b33e:	d0d5      	beq.n	800b2ec <pow+0x80>
 800b340:	4b80      	ldr	r3, [pc, #512]	; (800b544 <pow+0x2d8>)
 800b342:	2200      	movs	r2, #0
 800b344:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b34a:	b11b      	cbz	r3, 800b354 <pow+0xe8>
 800b34c:	f7ff fa84 	bl	800a858 <__errno>
 800b350:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b352:	6003      	str	r3, [r0, #0]
 800b354:	ed9d 8b08 	vldr	d8, [sp, #32]
 800b358:	eeb0 0a48 	vmov.f32	s0, s16
 800b35c:	eef0 0a68 	vmov.f32	s1, s17
 800b360:	b00d      	add	sp, #52	; 0x34
 800b362:	ecbd 8b04 	vpop	{d8-d9}
 800b366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b36a:	ec45 4b10 	vmov	d0, r4, r5
 800b36e:	f000 ff50 	bl	800c212 <finite>
 800b372:	2800      	cmp	r0, #0
 800b374:	d0f0      	beq.n	800b358 <pow+0xec>
 800b376:	4652      	mov	r2, sl
 800b378:	465b      	mov	r3, fp
 800b37a:	4620      	mov	r0, r4
 800b37c:	4629      	mov	r1, r5
 800b37e:	f7f5 fba1 	bl	8000ac4 <__aeabi_dcmplt>
 800b382:	2800      	cmp	r0, #0
 800b384:	d0e8      	beq.n	800b358 <pow+0xec>
 800b386:	2301      	movs	r3, #1
 800b388:	9302      	str	r3, [sp, #8]
 800b38a:	4b6d      	ldr	r3, [pc, #436]	; (800b540 <pow+0x2d4>)
 800b38c:	9303      	str	r3, [sp, #12]
 800b38e:	4b6b      	ldr	r3, [pc, #428]	; (800b53c <pow+0x2d0>)
 800b390:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800b394:	f993 3000 	ldrsb.w	r3, [r3]
 800b398:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b39c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b3a0:	b913      	cbnz	r3, 800b3a8 <pow+0x13c>
 800b3a2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800b3a6:	e7a1      	b.n	800b2ec <pow+0x80>
 800b3a8:	4967      	ldr	r1, [pc, #412]	; (800b548 <pow+0x2dc>)
 800b3aa:	2000      	movs	r0, #0
 800b3ac:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b3b0:	2b02      	cmp	r3, #2
 800b3b2:	d19b      	bne.n	800b2ec <pow+0x80>
 800b3b4:	f7ff fa50 	bl	800a858 <__errno>
 800b3b8:	2321      	movs	r3, #33	; 0x21
 800b3ba:	6003      	str	r3, [r0, #0]
 800b3bc:	e7c4      	b.n	800b348 <pow+0xdc>
 800b3be:	eeb0 0a48 	vmov.f32	s0, s16
 800b3c2:	eef0 0a68 	vmov.f32	s1, s17
 800b3c6:	f000 ff24 	bl	800c212 <finite>
 800b3ca:	9001      	str	r0, [sp, #4]
 800b3cc:	2800      	cmp	r0, #0
 800b3ce:	f040 808a 	bne.w	800b4e6 <pow+0x27a>
 800b3d2:	ec47 6b10 	vmov	d0, r6, r7
 800b3d6:	f000 ff1c 	bl	800c212 <finite>
 800b3da:	2800      	cmp	r0, #0
 800b3dc:	f000 8083 	beq.w	800b4e6 <pow+0x27a>
 800b3e0:	ec45 4b10 	vmov	d0, r4, r5
 800b3e4:	f000 ff15 	bl	800c212 <finite>
 800b3e8:	2800      	cmp	r0, #0
 800b3ea:	d07c      	beq.n	800b4e6 <pow+0x27a>
 800b3ec:	ec53 2b18 	vmov	r2, r3, d8
 800b3f0:	ee18 0a10 	vmov	r0, s16
 800b3f4:	4619      	mov	r1, r3
 800b3f6:	f7f5 fb8d 	bl	8000b14 <__aeabi_dcmpun>
 800b3fa:	f998 9000 	ldrsb.w	r9, [r8]
 800b3fe:	4b50      	ldr	r3, [pc, #320]	; (800b540 <pow+0x2d4>)
 800b400:	b1b0      	cbz	r0, 800b430 <pow+0x1c4>
 800b402:	2201      	movs	r2, #1
 800b404:	9303      	str	r3, [sp, #12]
 800b406:	9b01      	ldr	r3, [sp, #4]
 800b408:	9202      	str	r2, [sp, #8]
 800b40a:	930a      	str	r3, [sp, #40]	; 0x28
 800b40c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b410:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b414:	f1b9 0f00 	cmp.w	r9, #0
 800b418:	d0c3      	beq.n	800b3a2 <pow+0x136>
 800b41a:	4652      	mov	r2, sl
 800b41c:	465b      	mov	r3, fp
 800b41e:	4650      	mov	r0, sl
 800b420:	4659      	mov	r1, fp
 800b422:	f7f5 fa07 	bl	8000834 <__aeabi_ddiv>
 800b426:	f1b9 0f02 	cmp.w	r9, #2
 800b42a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b42e:	e7c0      	b.n	800b3b2 <pow+0x146>
 800b430:	2203      	movs	r2, #3
 800b432:	9202      	str	r2, [sp, #8]
 800b434:	9303      	str	r3, [sp, #12]
 800b436:	900a      	str	r0, [sp, #40]	; 0x28
 800b438:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b43c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b440:	f1b9 0f00 	cmp.w	r9, #0
 800b444:	d12c      	bne.n	800b4a0 <pow+0x234>
 800b446:	4b41      	ldr	r3, [pc, #260]	; (800b54c <pow+0x2e0>)
 800b448:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b44c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b450:	4630      	mov	r0, r6
 800b452:	4652      	mov	r2, sl
 800b454:	465b      	mov	r3, fp
 800b456:	4639      	mov	r1, r7
 800b458:	f7f5 fb34 	bl	8000ac4 <__aeabi_dcmplt>
 800b45c:	2800      	cmp	r0, #0
 800b45e:	d066      	beq.n	800b52e <pow+0x2c2>
 800b460:	2200      	movs	r2, #0
 800b462:	4b3b      	ldr	r3, [pc, #236]	; (800b550 <pow+0x2e4>)
 800b464:	4620      	mov	r0, r4
 800b466:	4629      	mov	r1, r5
 800b468:	f7f5 f8ba 	bl	80005e0 <__aeabi_dmul>
 800b46c:	4604      	mov	r4, r0
 800b46e:	460d      	mov	r5, r1
 800b470:	ec45 4b10 	vmov	d0, r4, r5
 800b474:	f000 fee0 	bl	800c238 <rint>
 800b478:	4620      	mov	r0, r4
 800b47a:	ec53 2b10 	vmov	r2, r3, d0
 800b47e:	4629      	mov	r1, r5
 800b480:	f7f5 fb16 	bl	8000ab0 <__aeabi_dcmpeq>
 800b484:	b920      	cbnz	r0, 800b490 <pow+0x224>
 800b486:	4b33      	ldr	r3, [pc, #204]	; (800b554 <pow+0x2e8>)
 800b488:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b48c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b490:	f998 3000 	ldrsb.w	r3, [r8]
 800b494:	2b02      	cmp	r3, #2
 800b496:	d14a      	bne.n	800b52e <pow+0x2c2>
 800b498:	f7ff f9de 	bl	800a858 <__errno>
 800b49c:	2322      	movs	r3, #34	; 0x22
 800b49e:	e78c      	b.n	800b3ba <pow+0x14e>
 800b4a0:	4b2d      	ldr	r3, [pc, #180]	; (800b558 <pow+0x2ec>)
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b4a8:	4630      	mov	r0, r6
 800b4aa:	4652      	mov	r2, sl
 800b4ac:	465b      	mov	r3, fp
 800b4ae:	4639      	mov	r1, r7
 800b4b0:	f7f5 fb08 	bl	8000ac4 <__aeabi_dcmplt>
 800b4b4:	2800      	cmp	r0, #0
 800b4b6:	d0eb      	beq.n	800b490 <pow+0x224>
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	4b25      	ldr	r3, [pc, #148]	; (800b550 <pow+0x2e4>)
 800b4bc:	4620      	mov	r0, r4
 800b4be:	4629      	mov	r1, r5
 800b4c0:	f7f5 f88e 	bl	80005e0 <__aeabi_dmul>
 800b4c4:	4604      	mov	r4, r0
 800b4c6:	460d      	mov	r5, r1
 800b4c8:	ec45 4b10 	vmov	d0, r4, r5
 800b4cc:	f000 feb4 	bl	800c238 <rint>
 800b4d0:	4620      	mov	r0, r4
 800b4d2:	ec53 2b10 	vmov	r2, r3, d0
 800b4d6:	4629      	mov	r1, r5
 800b4d8:	f7f5 faea 	bl	8000ab0 <__aeabi_dcmpeq>
 800b4dc:	2800      	cmp	r0, #0
 800b4de:	d1d7      	bne.n	800b490 <pow+0x224>
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	4b19      	ldr	r3, [pc, #100]	; (800b548 <pow+0x2dc>)
 800b4e4:	e7d2      	b.n	800b48c <pow+0x220>
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	ec51 0b18 	vmov	r0, r1, d8
 800b4ee:	f7f5 fadf 	bl	8000ab0 <__aeabi_dcmpeq>
 800b4f2:	2800      	cmp	r0, #0
 800b4f4:	f43f af30 	beq.w	800b358 <pow+0xec>
 800b4f8:	ec47 6b10 	vmov	d0, r6, r7
 800b4fc:	f000 fe89 	bl	800c212 <finite>
 800b500:	2800      	cmp	r0, #0
 800b502:	f43f af29 	beq.w	800b358 <pow+0xec>
 800b506:	ec45 4b10 	vmov	d0, r4, r5
 800b50a:	f000 fe82 	bl	800c212 <finite>
 800b50e:	2800      	cmp	r0, #0
 800b510:	f43f af22 	beq.w	800b358 <pow+0xec>
 800b514:	2304      	movs	r3, #4
 800b516:	9302      	str	r3, [sp, #8]
 800b518:	4b09      	ldr	r3, [pc, #36]	; (800b540 <pow+0x2d4>)
 800b51a:	9303      	str	r3, [sp, #12]
 800b51c:	2300      	movs	r3, #0
 800b51e:	930a      	str	r3, [sp, #40]	; 0x28
 800b520:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b524:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b528:	ed8d 9b08 	vstr	d9, [sp, #32]
 800b52c:	e7b0      	b.n	800b490 <pow+0x224>
 800b52e:	a802      	add	r0, sp, #8
 800b530:	f000 fe77 	bl	800c222 <matherr>
 800b534:	2800      	cmp	r0, #0
 800b536:	f47f af07 	bne.w	800b348 <pow+0xdc>
 800b53a:	e7ad      	b.n	800b498 <pow+0x22c>
 800b53c:	20000078 	.word	0x20000078
 800b540:	0800ce7d 	.word	0x0800ce7d
 800b544:	3ff00000 	.word	0x3ff00000
 800b548:	fff00000 	.word	0xfff00000
 800b54c:	47efffff 	.word	0x47efffff
 800b550:	3fe00000 	.word	0x3fe00000
 800b554:	c7efffff 	.word	0xc7efffff
 800b558:	7ff00000 	.word	0x7ff00000
 800b55c:	00000000 	.word	0x00000000

0800b560 <__ieee754_log10>:
 800b560:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b564:	ec55 4b10 	vmov	r4, r5, d0
 800b568:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 800b56c:	ee10 2a10 	vmov	r2, s0
 800b570:	462b      	mov	r3, r5
 800b572:	da30      	bge.n	800b5d6 <__ieee754_log10+0x76>
 800b574:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
 800b578:	430a      	orrs	r2, r1
 800b57a:	d10a      	bne.n	800b592 <__ieee754_log10+0x32>
 800b57c:	493c      	ldr	r1, [pc, #240]	; (800b670 <__ieee754_log10+0x110>)
 800b57e:	2200      	movs	r2, #0
 800b580:	2300      	movs	r3, #0
 800b582:	2000      	movs	r0, #0
 800b584:	f7f5 f956 	bl	8000834 <__aeabi_ddiv>
 800b588:	ec41 0b10 	vmov	d0, r0, r1
 800b58c:	b003      	add	sp, #12
 800b58e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b592:	2d00      	cmp	r5, #0
 800b594:	da09      	bge.n	800b5aa <__ieee754_log10+0x4a>
 800b596:	ee10 2a10 	vmov	r2, s0
 800b59a:	462b      	mov	r3, r5
 800b59c:	4620      	mov	r0, r4
 800b59e:	4629      	mov	r1, r5
 800b5a0:	f7f4 fe6a 	bl	8000278 <__aeabi_dsub>
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	e7ec      	b.n	800b584 <__ieee754_log10+0x24>
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	4b31      	ldr	r3, [pc, #196]	; (800b674 <__ieee754_log10+0x114>)
 800b5ae:	4629      	mov	r1, r5
 800b5b0:	ee10 0a10 	vmov	r0, s0
 800b5b4:	f7f5 f814 	bl	80005e0 <__aeabi_dmul>
 800b5b8:	f06f 0235 	mvn.w	r2, #53	; 0x35
 800b5bc:	4604      	mov	r4, r0
 800b5be:	460d      	mov	r5, r1
 800b5c0:	460b      	mov	r3, r1
 800b5c2:	492d      	ldr	r1, [pc, #180]	; (800b678 <__ieee754_log10+0x118>)
 800b5c4:	428b      	cmp	r3, r1
 800b5c6:	dd08      	ble.n	800b5da <__ieee754_log10+0x7a>
 800b5c8:	4622      	mov	r2, r4
 800b5ca:	462b      	mov	r3, r5
 800b5cc:	4620      	mov	r0, r4
 800b5ce:	4629      	mov	r1, r5
 800b5d0:	f7f4 fe54 	bl	800027c <__adddf3>
 800b5d4:	e7d8      	b.n	800b588 <__ieee754_log10+0x28>
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	e7f3      	b.n	800b5c2 <__ieee754_log10+0x62>
 800b5da:	1518      	asrs	r0, r3, #20
 800b5dc:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800b5e0:	4410      	add	r0, r2
 800b5e2:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 800b5e6:	4448      	add	r0, r9
 800b5e8:	f3c3 0813 	ubfx	r8, r3, #0, #20
 800b5ec:	f7f4 ff92 	bl	8000514 <__aeabi_i2d>
 800b5f0:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 800b5f4:	3303      	adds	r3, #3
 800b5f6:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 800b5fa:	ec45 4b10 	vmov	d0, r4, r5
 800b5fe:	4606      	mov	r6, r0
 800b600:	460f      	mov	r7, r1
 800b602:	f000 ff1d 	bl	800c440 <__ieee754_log>
 800b606:	a314      	add	r3, pc, #80	; (adr r3, 800b658 <__ieee754_log10+0xf8>)
 800b608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b60c:	4630      	mov	r0, r6
 800b60e:	4639      	mov	r1, r7
 800b610:	ed8d 0b00 	vstr	d0, [sp]
 800b614:	f7f4 ffe4 	bl	80005e0 <__aeabi_dmul>
 800b618:	ed9d 0b00 	vldr	d0, [sp]
 800b61c:	4604      	mov	r4, r0
 800b61e:	460d      	mov	r5, r1
 800b620:	a30f      	add	r3, pc, #60	; (adr r3, 800b660 <__ieee754_log10+0x100>)
 800b622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b626:	ec51 0b10 	vmov	r0, r1, d0
 800b62a:	f7f4 ffd9 	bl	80005e0 <__aeabi_dmul>
 800b62e:	4602      	mov	r2, r0
 800b630:	460b      	mov	r3, r1
 800b632:	4620      	mov	r0, r4
 800b634:	4629      	mov	r1, r5
 800b636:	f7f4 fe21 	bl	800027c <__adddf3>
 800b63a:	a30b      	add	r3, pc, #44	; (adr r3, 800b668 <__ieee754_log10+0x108>)
 800b63c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b640:	4604      	mov	r4, r0
 800b642:	460d      	mov	r5, r1
 800b644:	4630      	mov	r0, r6
 800b646:	4639      	mov	r1, r7
 800b648:	f7f4 ffca 	bl	80005e0 <__aeabi_dmul>
 800b64c:	4602      	mov	r2, r0
 800b64e:	460b      	mov	r3, r1
 800b650:	4620      	mov	r0, r4
 800b652:	4629      	mov	r1, r5
 800b654:	e7bc      	b.n	800b5d0 <__ieee754_log10+0x70>
 800b656:	bf00      	nop
 800b658:	11f12b36 	.word	0x11f12b36
 800b65c:	3d59fef3 	.word	0x3d59fef3
 800b660:	1526e50e 	.word	0x1526e50e
 800b664:	3fdbcb7b 	.word	0x3fdbcb7b
 800b668:	509f6000 	.word	0x509f6000
 800b66c:	3fd34413 	.word	0x3fd34413
 800b670:	c3500000 	.word	0xc3500000
 800b674:	43500000 	.word	0x43500000
 800b678:	7fefffff 	.word	0x7fefffff
 800b67c:	00000000 	.word	0x00000000

0800b680 <__ieee754_pow>:
 800b680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b684:	b091      	sub	sp, #68	; 0x44
 800b686:	ed8d 1b00 	vstr	d1, [sp]
 800b68a:	e89d 0204 	ldmia.w	sp, {r2, r9}
 800b68e:	ec57 6b10 	vmov	r6, r7, d0
 800b692:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800b696:	ea58 0302 	orrs.w	r3, r8, r2
 800b69a:	ee10 aa10 	vmov	sl, s0
 800b69e:	463d      	mov	r5, r7
 800b6a0:	f000 84bd 	beq.w	800c01e <__ieee754_pow+0x99e>
 800b6a4:	4b78      	ldr	r3, [pc, #480]	; (800b888 <__ieee754_pow+0x208>)
 800b6a6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800b6aa:	429c      	cmp	r4, r3
 800b6ac:	dc09      	bgt.n	800b6c2 <__ieee754_pow+0x42>
 800b6ae:	d103      	bne.n	800b6b8 <__ieee754_pow+0x38>
 800b6b0:	b93e      	cbnz	r6, 800b6c2 <__ieee754_pow+0x42>
 800b6b2:	45a0      	cmp	r8, r4
 800b6b4:	dc0d      	bgt.n	800b6d2 <__ieee754_pow+0x52>
 800b6b6:	e001      	b.n	800b6bc <__ieee754_pow+0x3c>
 800b6b8:	4598      	cmp	r8, r3
 800b6ba:	dc02      	bgt.n	800b6c2 <__ieee754_pow+0x42>
 800b6bc:	4598      	cmp	r8, r3
 800b6be:	d10e      	bne.n	800b6de <__ieee754_pow+0x5e>
 800b6c0:	b16a      	cbz	r2, 800b6de <__ieee754_pow+0x5e>
 800b6c2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b6c6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b6ca:	ea54 030a 	orrs.w	r3, r4, sl
 800b6ce:	f000 84a6 	beq.w	800c01e <__ieee754_pow+0x99e>
 800b6d2:	486e      	ldr	r0, [pc, #440]	; (800b88c <__ieee754_pow+0x20c>)
 800b6d4:	b011      	add	sp, #68	; 0x44
 800b6d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6da:	f000 bda5 	b.w	800c228 <nan>
 800b6de:	2d00      	cmp	r5, #0
 800b6e0:	da53      	bge.n	800b78a <__ieee754_pow+0x10a>
 800b6e2:	4b6b      	ldr	r3, [pc, #428]	; (800b890 <__ieee754_pow+0x210>)
 800b6e4:	4598      	cmp	r8, r3
 800b6e6:	dc4d      	bgt.n	800b784 <__ieee754_pow+0x104>
 800b6e8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b6ec:	4598      	cmp	r8, r3
 800b6ee:	dd4c      	ble.n	800b78a <__ieee754_pow+0x10a>
 800b6f0:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b6f4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b6f8:	2b14      	cmp	r3, #20
 800b6fa:	dd26      	ble.n	800b74a <__ieee754_pow+0xca>
 800b6fc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b700:	fa22 f103 	lsr.w	r1, r2, r3
 800b704:	fa01 f303 	lsl.w	r3, r1, r3
 800b708:	429a      	cmp	r2, r3
 800b70a:	d13e      	bne.n	800b78a <__ieee754_pow+0x10a>
 800b70c:	f001 0101 	and.w	r1, r1, #1
 800b710:	f1c1 0b02 	rsb	fp, r1, #2
 800b714:	2a00      	cmp	r2, #0
 800b716:	d15b      	bne.n	800b7d0 <__ieee754_pow+0x150>
 800b718:	4b5b      	ldr	r3, [pc, #364]	; (800b888 <__ieee754_pow+0x208>)
 800b71a:	4598      	cmp	r8, r3
 800b71c:	d124      	bne.n	800b768 <__ieee754_pow+0xe8>
 800b71e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b722:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b726:	ea53 030a 	orrs.w	r3, r3, sl
 800b72a:	f000 8478 	beq.w	800c01e <__ieee754_pow+0x99e>
 800b72e:	4b59      	ldr	r3, [pc, #356]	; (800b894 <__ieee754_pow+0x214>)
 800b730:	429c      	cmp	r4, r3
 800b732:	dd2d      	ble.n	800b790 <__ieee754_pow+0x110>
 800b734:	f1b9 0f00 	cmp.w	r9, #0
 800b738:	f280 8475 	bge.w	800c026 <__ieee754_pow+0x9a6>
 800b73c:	2000      	movs	r0, #0
 800b73e:	2100      	movs	r1, #0
 800b740:	ec41 0b10 	vmov	d0, r0, r1
 800b744:	b011      	add	sp, #68	; 0x44
 800b746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b74a:	2a00      	cmp	r2, #0
 800b74c:	d13e      	bne.n	800b7cc <__ieee754_pow+0x14c>
 800b74e:	f1c3 0314 	rsb	r3, r3, #20
 800b752:	fa48 f103 	asr.w	r1, r8, r3
 800b756:	fa01 f303 	lsl.w	r3, r1, r3
 800b75a:	4598      	cmp	r8, r3
 800b75c:	f040 846b 	bne.w	800c036 <__ieee754_pow+0x9b6>
 800b760:	f001 0101 	and.w	r1, r1, #1
 800b764:	f1c1 0b02 	rsb	fp, r1, #2
 800b768:	4b4b      	ldr	r3, [pc, #300]	; (800b898 <__ieee754_pow+0x218>)
 800b76a:	4598      	cmp	r8, r3
 800b76c:	d118      	bne.n	800b7a0 <__ieee754_pow+0x120>
 800b76e:	f1b9 0f00 	cmp.w	r9, #0
 800b772:	f280 845c 	bge.w	800c02e <__ieee754_pow+0x9ae>
 800b776:	4948      	ldr	r1, [pc, #288]	; (800b898 <__ieee754_pow+0x218>)
 800b778:	4632      	mov	r2, r6
 800b77a:	463b      	mov	r3, r7
 800b77c:	2000      	movs	r0, #0
 800b77e:	f7f5 f859 	bl	8000834 <__aeabi_ddiv>
 800b782:	e7dd      	b.n	800b740 <__ieee754_pow+0xc0>
 800b784:	f04f 0b02 	mov.w	fp, #2
 800b788:	e7c4      	b.n	800b714 <__ieee754_pow+0x94>
 800b78a:	f04f 0b00 	mov.w	fp, #0
 800b78e:	e7c1      	b.n	800b714 <__ieee754_pow+0x94>
 800b790:	f1b9 0f00 	cmp.w	r9, #0
 800b794:	dad2      	bge.n	800b73c <__ieee754_pow+0xbc>
 800b796:	e89d 0009 	ldmia.w	sp, {r0, r3}
 800b79a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b79e:	e7cf      	b.n	800b740 <__ieee754_pow+0xc0>
 800b7a0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800b7a4:	d106      	bne.n	800b7b4 <__ieee754_pow+0x134>
 800b7a6:	4632      	mov	r2, r6
 800b7a8:	463b      	mov	r3, r7
 800b7aa:	4610      	mov	r0, r2
 800b7ac:	4619      	mov	r1, r3
 800b7ae:	f7f4 ff17 	bl	80005e0 <__aeabi_dmul>
 800b7b2:	e7c5      	b.n	800b740 <__ieee754_pow+0xc0>
 800b7b4:	4b39      	ldr	r3, [pc, #228]	; (800b89c <__ieee754_pow+0x21c>)
 800b7b6:	4599      	cmp	r9, r3
 800b7b8:	d10a      	bne.n	800b7d0 <__ieee754_pow+0x150>
 800b7ba:	2d00      	cmp	r5, #0
 800b7bc:	db08      	blt.n	800b7d0 <__ieee754_pow+0x150>
 800b7be:	ec47 6b10 	vmov	d0, r6, r7
 800b7c2:	b011      	add	sp, #68	; 0x44
 800b7c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7c8:	f000 bc6c 	b.w	800c0a4 <__ieee754_sqrt>
 800b7cc:	f04f 0b00 	mov.w	fp, #0
 800b7d0:	ec47 6b10 	vmov	d0, r6, r7
 800b7d4:	f000 fd16 	bl	800c204 <fabs>
 800b7d8:	ec51 0b10 	vmov	r0, r1, d0
 800b7dc:	f1ba 0f00 	cmp.w	sl, #0
 800b7e0:	d127      	bne.n	800b832 <__ieee754_pow+0x1b2>
 800b7e2:	b124      	cbz	r4, 800b7ee <__ieee754_pow+0x16e>
 800b7e4:	4b2c      	ldr	r3, [pc, #176]	; (800b898 <__ieee754_pow+0x218>)
 800b7e6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800b7ea:	429a      	cmp	r2, r3
 800b7ec:	d121      	bne.n	800b832 <__ieee754_pow+0x1b2>
 800b7ee:	f1b9 0f00 	cmp.w	r9, #0
 800b7f2:	da05      	bge.n	800b800 <__ieee754_pow+0x180>
 800b7f4:	4602      	mov	r2, r0
 800b7f6:	460b      	mov	r3, r1
 800b7f8:	2000      	movs	r0, #0
 800b7fa:	4927      	ldr	r1, [pc, #156]	; (800b898 <__ieee754_pow+0x218>)
 800b7fc:	f7f5 f81a 	bl	8000834 <__aeabi_ddiv>
 800b800:	2d00      	cmp	r5, #0
 800b802:	da9d      	bge.n	800b740 <__ieee754_pow+0xc0>
 800b804:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b808:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b80c:	ea54 030b 	orrs.w	r3, r4, fp
 800b810:	d108      	bne.n	800b824 <__ieee754_pow+0x1a4>
 800b812:	4602      	mov	r2, r0
 800b814:	460b      	mov	r3, r1
 800b816:	4610      	mov	r0, r2
 800b818:	4619      	mov	r1, r3
 800b81a:	f7f4 fd2d 	bl	8000278 <__aeabi_dsub>
 800b81e:	4602      	mov	r2, r0
 800b820:	460b      	mov	r3, r1
 800b822:	e7ac      	b.n	800b77e <__ieee754_pow+0xfe>
 800b824:	f1bb 0f01 	cmp.w	fp, #1
 800b828:	d18a      	bne.n	800b740 <__ieee754_pow+0xc0>
 800b82a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b82e:	4619      	mov	r1, r3
 800b830:	e786      	b.n	800b740 <__ieee754_pow+0xc0>
 800b832:	0fed      	lsrs	r5, r5, #31
 800b834:	1e6b      	subs	r3, r5, #1
 800b836:	930d      	str	r3, [sp, #52]	; 0x34
 800b838:	ea5b 0303 	orrs.w	r3, fp, r3
 800b83c:	d102      	bne.n	800b844 <__ieee754_pow+0x1c4>
 800b83e:	4632      	mov	r2, r6
 800b840:	463b      	mov	r3, r7
 800b842:	e7e8      	b.n	800b816 <__ieee754_pow+0x196>
 800b844:	4b16      	ldr	r3, [pc, #88]	; (800b8a0 <__ieee754_pow+0x220>)
 800b846:	4598      	cmp	r8, r3
 800b848:	f340 80fe 	ble.w	800ba48 <__ieee754_pow+0x3c8>
 800b84c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b850:	4598      	cmp	r8, r3
 800b852:	dd0a      	ble.n	800b86a <__ieee754_pow+0x1ea>
 800b854:	4b0f      	ldr	r3, [pc, #60]	; (800b894 <__ieee754_pow+0x214>)
 800b856:	429c      	cmp	r4, r3
 800b858:	dc0d      	bgt.n	800b876 <__ieee754_pow+0x1f6>
 800b85a:	f1b9 0f00 	cmp.w	r9, #0
 800b85e:	f6bf af6d 	bge.w	800b73c <__ieee754_pow+0xbc>
 800b862:	a307      	add	r3, pc, #28	; (adr r3, 800b880 <__ieee754_pow+0x200>)
 800b864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b868:	e79f      	b.n	800b7aa <__ieee754_pow+0x12a>
 800b86a:	4b0e      	ldr	r3, [pc, #56]	; (800b8a4 <__ieee754_pow+0x224>)
 800b86c:	429c      	cmp	r4, r3
 800b86e:	ddf4      	ble.n	800b85a <__ieee754_pow+0x1da>
 800b870:	4b09      	ldr	r3, [pc, #36]	; (800b898 <__ieee754_pow+0x218>)
 800b872:	429c      	cmp	r4, r3
 800b874:	dd18      	ble.n	800b8a8 <__ieee754_pow+0x228>
 800b876:	f1b9 0f00 	cmp.w	r9, #0
 800b87a:	dcf2      	bgt.n	800b862 <__ieee754_pow+0x1e2>
 800b87c:	e75e      	b.n	800b73c <__ieee754_pow+0xbc>
 800b87e:	bf00      	nop
 800b880:	8800759c 	.word	0x8800759c
 800b884:	7e37e43c 	.word	0x7e37e43c
 800b888:	7ff00000 	.word	0x7ff00000
 800b88c:	0800cd9b 	.word	0x0800cd9b
 800b890:	433fffff 	.word	0x433fffff
 800b894:	3fefffff 	.word	0x3fefffff
 800b898:	3ff00000 	.word	0x3ff00000
 800b89c:	3fe00000 	.word	0x3fe00000
 800b8a0:	41e00000 	.word	0x41e00000
 800b8a4:	3feffffe 	.word	0x3feffffe
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	4b63      	ldr	r3, [pc, #396]	; (800ba38 <__ieee754_pow+0x3b8>)
 800b8ac:	f7f4 fce4 	bl	8000278 <__aeabi_dsub>
 800b8b0:	a355      	add	r3, pc, #340	; (adr r3, 800ba08 <__ieee754_pow+0x388>)
 800b8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8b6:	4604      	mov	r4, r0
 800b8b8:	460d      	mov	r5, r1
 800b8ba:	f7f4 fe91 	bl	80005e0 <__aeabi_dmul>
 800b8be:	a354      	add	r3, pc, #336	; (adr r3, 800ba10 <__ieee754_pow+0x390>)
 800b8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c4:	4606      	mov	r6, r0
 800b8c6:	460f      	mov	r7, r1
 800b8c8:	4620      	mov	r0, r4
 800b8ca:	4629      	mov	r1, r5
 800b8cc:	f7f4 fe88 	bl	80005e0 <__aeabi_dmul>
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b8d6:	4b59      	ldr	r3, [pc, #356]	; (800ba3c <__ieee754_pow+0x3bc>)
 800b8d8:	4620      	mov	r0, r4
 800b8da:	4629      	mov	r1, r5
 800b8dc:	f7f4 fe80 	bl	80005e0 <__aeabi_dmul>
 800b8e0:	4602      	mov	r2, r0
 800b8e2:	460b      	mov	r3, r1
 800b8e4:	a14c      	add	r1, pc, #304	; (adr r1, 800ba18 <__ieee754_pow+0x398>)
 800b8e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8ea:	f7f4 fcc5 	bl	8000278 <__aeabi_dsub>
 800b8ee:	4622      	mov	r2, r4
 800b8f0:	462b      	mov	r3, r5
 800b8f2:	f7f4 fe75 	bl	80005e0 <__aeabi_dmul>
 800b8f6:	4602      	mov	r2, r0
 800b8f8:	460b      	mov	r3, r1
 800b8fa:	2000      	movs	r0, #0
 800b8fc:	4950      	ldr	r1, [pc, #320]	; (800ba40 <__ieee754_pow+0x3c0>)
 800b8fe:	f7f4 fcbb 	bl	8000278 <__aeabi_dsub>
 800b902:	4622      	mov	r2, r4
 800b904:	462b      	mov	r3, r5
 800b906:	4680      	mov	r8, r0
 800b908:	4689      	mov	r9, r1
 800b90a:	4620      	mov	r0, r4
 800b90c:	4629      	mov	r1, r5
 800b90e:	f7f4 fe67 	bl	80005e0 <__aeabi_dmul>
 800b912:	4602      	mov	r2, r0
 800b914:	460b      	mov	r3, r1
 800b916:	4640      	mov	r0, r8
 800b918:	4649      	mov	r1, r9
 800b91a:	f7f4 fe61 	bl	80005e0 <__aeabi_dmul>
 800b91e:	a340      	add	r3, pc, #256	; (adr r3, 800ba20 <__ieee754_pow+0x3a0>)
 800b920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b924:	f7f4 fe5c 	bl	80005e0 <__aeabi_dmul>
 800b928:	4602      	mov	r2, r0
 800b92a:	460b      	mov	r3, r1
 800b92c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b930:	f7f4 fca2 	bl	8000278 <__aeabi_dsub>
 800b934:	4602      	mov	r2, r0
 800b936:	460b      	mov	r3, r1
 800b938:	4604      	mov	r4, r0
 800b93a:	460d      	mov	r5, r1
 800b93c:	4630      	mov	r0, r6
 800b93e:	4639      	mov	r1, r7
 800b940:	f7f4 fc9c 	bl	800027c <__adddf3>
 800b944:	2000      	movs	r0, #0
 800b946:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b94a:	4632      	mov	r2, r6
 800b94c:	463b      	mov	r3, r7
 800b94e:	f7f4 fc93 	bl	8000278 <__aeabi_dsub>
 800b952:	4602      	mov	r2, r0
 800b954:	460b      	mov	r3, r1
 800b956:	4620      	mov	r0, r4
 800b958:	4629      	mov	r1, r5
 800b95a:	f7f4 fc8d 	bl	8000278 <__aeabi_dsub>
 800b95e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b960:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800b964:	4313      	orrs	r3, r2
 800b966:	4606      	mov	r6, r0
 800b968:	460f      	mov	r7, r1
 800b96a:	f040 81eb 	bne.w	800bd44 <__ieee754_pow+0x6c4>
 800b96e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800ba28 <__ieee754_pow+0x3a8>
 800b972:	e9dd 4500 	ldrd	r4, r5, [sp]
 800b976:	2400      	movs	r4, #0
 800b978:	4622      	mov	r2, r4
 800b97a:	462b      	mov	r3, r5
 800b97c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b980:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b984:	f7f4 fc78 	bl	8000278 <__aeabi_dsub>
 800b988:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b98c:	f7f4 fe28 	bl	80005e0 <__aeabi_dmul>
 800b990:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b994:	4680      	mov	r8, r0
 800b996:	4689      	mov	r9, r1
 800b998:	4630      	mov	r0, r6
 800b99a:	4639      	mov	r1, r7
 800b99c:	f7f4 fe20 	bl	80005e0 <__aeabi_dmul>
 800b9a0:	4602      	mov	r2, r0
 800b9a2:	460b      	mov	r3, r1
 800b9a4:	4640      	mov	r0, r8
 800b9a6:	4649      	mov	r1, r9
 800b9a8:	f7f4 fc68 	bl	800027c <__adddf3>
 800b9ac:	4622      	mov	r2, r4
 800b9ae:	462b      	mov	r3, r5
 800b9b0:	4680      	mov	r8, r0
 800b9b2:	4689      	mov	r9, r1
 800b9b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b9b8:	f7f4 fe12 	bl	80005e0 <__aeabi_dmul>
 800b9bc:	460b      	mov	r3, r1
 800b9be:	4604      	mov	r4, r0
 800b9c0:	460d      	mov	r5, r1
 800b9c2:	4602      	mov	r2, r0
 800b9c4:	4649      	mov	r1, r9
 800b9c6:	4640      	mov	r0, r8
 800b9c8:	e9cd 4500 	strd	r4, r5, [sp]
 800b9cc:	f7f4 fc56 	bl	800027c <__adddf3>
 800b9d0:	4b1c      	ldr	r3, [pc, #112]	; (800ba44 <__ieee754_pow+0x3c4>)
 800b9d2:	4299      	cmp	r1, r3
 800b9d4:	4606      	mov	r6, r0
 800b9d6:	460f      	mov	r7, r1
 800b9d8:	468b      	mov	fp, r1
 800b9da:	f340 82f7 	ble.w	800bfcc <__ieee754_pow+0x94c>
 800b9de:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b9e2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b9e6:	4303      	orrs	r3, r0
 800b9e8:	f000 81ea 	beq.w	800bdc0 <__ieee754_pow+0x740>
 800b9ec:	a310      	add	r3, pc, #64	; (adr r3, 800ba30 <__ieee754_pow+0x3b0>)
 800b9ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9f6:	f7f4 fdf3 	bl	80005e0 <__aeabi_dmul>
 800b9fa:	a30d      	add	r3, pc, #52	; (adr r3, 800ba30 <__ieee754_pow+0x3b0>)
 800b9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba00:	e6d5      	b.n	800b7ae <__ieee754_pow+0x12e>
 800ba02:	bf00      	nop
 800ba04:	f3af 8000 	nop.w
 800ba08:	60000000 	.word	0x60000000
 800ba0c:	3ff71547 	.word	0x3ff71547
 800ba10:	f85ddf44 	.word	0xf85ddf44
 800ba14:	3e54ae0b 	.word	0x3e54ae0b
 800ba18:	55555555 	.word	0x55555555
 800ba1c:	3fd55555 	.word	0x3fd55555
 800ba20:	652b82fe 	.word	0x652b82fe
 800ba24:	3ff71547 	.word	0x3ff71547
 800ba28:	00000000 	.word	0x00000000
 800ba2c:	bff00000 	.word	0xbff00000
 800ba30:	8800759c 	.word	0x8800759c
 800ba34:	7e37e43c 	.word	0x7e37e43c
 800ba38:	3ff00000 	.word	0x3ff00000
 800ba3c:	3fd00000 	.word	0x3fd00000
 800ba40:	3fe00000 	.word	0x3fe00000
 800ba44:	408fffff 	.word	0x408fffff
 800ba48:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800ba4c:	f04f 0200 	mov.w	r2, #0
 800ba50:	da05      	bge.n	800ba5e <__ieee754_pow+0x3de>
 800ba52:	4bd3      	ldr	r3, [pc, #844]	; (800bda0 <__ieee754_pow+0x720>)
 800ba54:	f7f4 fdc4 	bl	80005e0 <__aeabi_dmul>
 800ba58:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800ba5c:	460c      	mov	r4, r1
 800ba5e:	1523      	asrs	r3, r4, #20
 800ba60:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ba64:	4413      	add	r3, r2
 800ba66:	9307      	str	r3, [sp, #28]
 800ba68:	4bce      	ldr	r3, [pc, #824]	; (800bda4 <__ieee754_pow+0x724>)
 800ba6a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ba6e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800ba72:	429c      	cmp	r4, r3
 800ba74:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ba78:	dd08      	ble.n	800ba8c <__ieee754_pow+0x40c>
 800ba7a:	4bcb      	ldr	r3, [pc, #812]	; (800bda8 <__ieee754_pow+0x728>)
 800ba7c:	429c      	cmp	r4, r3
 800ba7e:	f340 815e 	ble.w	800bd3e <__ieee754_pow+0x6be>
 800ba82:	9b07      	ldr	r3, [sp, #28]
 800ba84:	3301      	adds	r3, #1
 800ba86:	9307      	str	r3, [sp, #28]
 800ba88:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800ba8c:	f04f 0a00 	mov.w	sl, #0
 800ba90:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800ba94:	930c      	str	r3, [sp, #48]	; 0x30
 800ba96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ba98:	4bc4      	ldr	r3, [pc, #784]	; (800bdac <__ieee754_pow+0x72c>)
 800ba9a:	4413      	add	r3, r2
 800ba9c:	ed93 7b00 	vldr	d7, [r3]
 800baa0:	4629      	mov	r1, r5
 800baa2:	ec53 2b17 	vmov	r2, r3, d7
 800baa6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800baaa:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800baae:	f7f4 fbe3 	bl	8000278 <__aeabi_dsub>
 800bab2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bab6:	4606      	mov	r6, r0
 800bab8:	460f      	mov	r7, r1
 800baba:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800babe:	f7f4 fbdd 	bl	800027c <__adddf3>
 800bac2:	4602      	mov	r2, r0
 800bac4:	460b      	mov	r3, r1
 800bac6:	2000      	movs	r0, #0
 800bac8:	49b9      	ldr	r1, [pc, #740]	; (800bdb0 <__ieee754_pow+0x730>)
 800baca:	f7f4 feb3 	bl	8000834 <__aeabi_ddiv>
 800bace:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800bad2:	4602      	mov	r2, r0
 800bad4:	460b      	mov	r3, r1
 800bad6:	4630      	mov	r0, r6
 800bad8:	4639      	mov	r1, r7
 800bada:	f7f4 fd81 	bl	80005e0 <__aeabi_dmul>
 800bade:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bae2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800bae6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800baea:	2300      	movs	r3, #0
 800baec:	9302      	str	r3, [sp, #8]
 800baee:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800baf2:	106d      	asrs	r5, r5, #1
 800baf4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800baf8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800bafc:	2200      	movs	r2, #0
 800bafe:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800bb02:	4640      	mov	r0, r8
 800bb04:	4649      	mov	r1, r9
 800bb06:	4614      	mov	r4, r2
 800bb08:	461d      	mov	r5, r3
 800bb0a:	f7f4 fd69 	bl	80005e0 <__aeabi_dmul>
 800bb0e:	4602      	mov	r2, r0
 800bb10:	460b      	mov	r3, r1
 800bb12:	4630      	mov	r0, r6
 800bb14:	4639      	mov	r1, r7
 800bb16:	f7f4 fbaf 	bl	8000278 <__aeabi_dsub>
 800bb1a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bb1e:	4606      	mov	r6, r0
 800bb20:	460f      	mov	r7, r1
 800bb22:	4620      	mov	r0, r4
 800bb24:	4629      	mov	r1, r5
 800bb26:	f7f4 fba7 	bl	8000278 <__aeabi_dsub>
 800bb2a:	4602      	mov	r2, r0
 800bb2c:	460b      	mov	r3, r1
 800bb2e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bb32:	f7f4 fba1 	bl	8000278 <__aeabi_dsub>
 800bb36:	4642      	mov	r2, r8
 800bb38:	464b      	mov	r3, r9
 800bb3a:	f7f4 fd51 	bl	80005e0 <__aeabi_dmul>
 800bb3e:	4602      	mov	r2, r0
 800bb40:	460b      	mov	r3, r1
 800bb42:	4630      	mov	r0, r6
 800bb44:	4639      	mov	r1, r7
 800bb46:	f7f4 fb97 	bl	8000278 <__aeabi_dsub>
 800bb4a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800bb4e:	f7f4 fd47 	bl	80005e0 <__aeabi_dmul>
 800bb52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb56:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bb5a:	4610      	mov	r0, r2
 800bb5c:	4619      	mov	r1, r3
 800bb5e:	f7f4 fd3f 	bl	80005e0 <__aeabi_dmul>
 800bb62:	a37b      	add	r3, pc, #492	; (adr r3, 800bd50 <__ieee754_pow+0x6d0>)
 800bb64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb68:	4604      	mov	r4, r0
 800bb6a:	460d      	mov	r5, r1
 800bb6c:	f7f4 fd38 	bl	80005e0 <__aeabi_dmul>
 800bb70:	a379      	add	r3, pc, #484	; (adr r3, 800bd58 <__ieee754_pow+0x6d8>)
 800bb72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb76:	f7f4 fb81 	bl	800027c <__adddf3>
 800bb7a:	4622      	mov	r2, r4
 800bb7c:	462b      	mov	r3, r5
 800bb7e:	f7f4 fd2f 	bl	80005e0 <__aeabi_dmul>
 800bb82:	a377      	add	r3, pc, #476	; (adr r3, 800bd60 <__ieee754_pow+0x6e0>)
 800bb84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb88:	f7f4 fb78 	bl	800027c <__adddf3>
 800bb8c:	4622      	mov	r2, r4
 800bb8e:	462b      	mov	r3, r5
 800bb90:	f7f4 fd26 	bl	80005e0 <__aeabi_dmul>
 800bb94:	a374      	add	r3, pc, #464	; (adr r3, 800bd68 <__ieee754_pow+0x6e8>)
 800bb96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb9a:	f7f4 fb6f 	bl	800027c <__adddf3>
 800bb9e:	4622      	mov	r2, r4
 800bba0:	462b      	mov	r3, r5
 800bba2:	f7f4 fd1d 	bl	80005e0 <__aeabi_dmul>
 800bba6:	a372      	add	r3, pc, #456	; (adr r3, 800bd70 <__ieee754_pow+0x6f0>)
 800bba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbac:	f7f4 fb66 	bl	800027c <__adddf3>
 800bbb0:	4622      	mov	r2, r4
 800bbb2:	462b      	mov	r3, r5
 800bbb4:	f7f4 fd14 	bl	80005e0 <__aeabi_dmul>
 800bbb8:	a36f      	add	r3, pc, #444	; (adr r3, 800bd78 <__ieee754_pow+0x6f8>)
 800bbba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbbe:	f7f4 fb5d 	bl	800027c <__adddf3>
 800bbc2:	4622      	mov	r2, r4
 800bbc4:	4606      	mov	r6, r0
 800bbc6:	460f      	mov	r7, r1
 800bbc8:	462b      	mov	r3, r5
 800bbca:	4620      	mov	r0, r4
 800bbcc:	4629      	mov	r1, r5
 800bbce:	f7f4 fd07 	bl	80005e0 <__aeabi_dmul>
 800bbd2:	4602      	mov	r2, r0
 800bbd4:	460b      	mov	r3, r1
 800bbd6:	4630      	mov	r0, r6
 800bbd8:	4639      	mov	r1, r7
 800bbda:	f7f4 fd01 	bl	80005e0 <__aeabi_dmul>
 800bbde:	4642      	mov	r2, r8
 800bbe0:	4604      	mov	r4, r0
 800bbe2:	460d      	mov	r5, r1
 800bbe4:	464b      	mov	r3, r9
 800bbe6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bbea:	f7f4 fb47 	bl	800027c <__adddf3>
 800bbee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bbf2:	f7f4 fcf5 	bl	80005e0 <__aeabi_dmul>
 800bbf6:	4622      	mov	r2, r4
 800bbf8:	462b      	mov	r3, r5
 800bbfa:	f7f4 fb3f 	bl	800027c <__adddf3>
 800bbfe:	4642      	mov	r2, r8
 800bc00:	4606      	mov	r6, r0
 800bc02:	460f      	mov	r7, r1
 800bc04:	464b      	mov	r3, r9
 800bc06:	4640      	mov	r0, r8
 800bc08:	4649      	mov	r1, r9
 800bc0a:	f7f4 fce9 	bl	80005e0 <__aeabi_dmul>
 800bc0e:	2200      	movs	r2, #0
 800bc10:	4b68      	ldr	r3, [pc, #416]	; (800bdb4 <__ieee754_pow+0x734>)
 800bc12:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800bc16:	f7f4 fb31 	bl	800027c <__adddf3>
 800bc1a:	4632      	mov	r2, r6
 800bc1c:	463b      	mov	r3, r7
 800bc1e:	f7f4 fb2d 	bl	800027c <__adddf3>
 800bc22:	9802      	ldr	r0, [sp, #8]
 800bc24:	460d      	mov	r5, r1
 800bc26:	4604      	mov	r4, r0
 800bc28:	4602      	mov	r2, r0
 800bc2a:	460b      	mov	r3, r1
 800bc2c:	4640      	mov	r0, r8
 800bc2e:	4649      	mov	r1, r9
 800bc30:	f7f4 fcd6 	bl	80005e0 <__aeabi_dmul>
 800bc34:	2200      	movs	r2, #0
 800bc36:	4680      	mov	r8, r0
 800bc38:	4689      	mov	r9, r1
 800bc3a:	4b5e      	ldr	r3, [pc, #376]	; (800bdb4 <__ieee754_pow+0x734>)
 800bc3c:	4620      	mov	r0, r4
 800bc3e:	4629      	mov	r1, r5
 800bc40:	f7f4 fb1a 	bl	8000278 <__aeabi_dsub>
 800bc44:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bc48:	f7f4 fb16 	bl	8000278 <__aeabi_dsub>
 800bc4c:	4602      	mov	r2, r0
 800bc4e:	460b      	mov	r3, r1
 800bc50:	4630      	mov	r0, r6
 800bc52:	4639      	mov	r1, r7
 800bc54:	f7f4 fb10 	bl	8000278 <__aeabi_dsub>
 800bc58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc5c:	f7f4 fcc0 	bl	80005e0 <__aeabi_dmul>
 800bc60:	4622      	mov	r2, r4
 800bc62:	4606      	mov	r6, r0
 800bc64:	460f      	mov	r7, r1
 800bc66:	462b      	mov	r3, r5
 800bc68:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bc6c:	f7f4 fcb8 	bl	80005e0 <__aeabi_dmul>
 800bc70:	4602      	mov	r2, r0
 800bc72:	460b      	mov	r3, r1
 800bc74:	4630      	mov	r0, r6
 800bc76:	4639      	mov	r1, r7
 800bc78:	f7f4 fb00 	bl	800027c <__adddf3>
 800bc7c:	4606      	mov	r6, r0
 800bc7e:	460f      	mov	r7, r1
 800bc80:	4602      	mov	r2, r0
 800bc82:	460b      	mov	r3, r1
 800bc84:	4640      	mov	r0, r8
 800bc86:	4649      	mov	r1, r9
 800bc88:	f7f4 faf8 	bl	800027c <__adddf3>
 800bc8c:	9802      	ldr	r0, [sp, #8]
 800bc8e:	a33c      	add	r3, pc, #240	; (adr r3, 800bd80 <__ieee754_pow+0x700>)
 800bc90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc94:	4604      	mov	r4, r0
 800bc96:	460d      	mov	r5, r1
 800bc98:	f7f4 fca2 	bl	80005e0 <__aeabi_dmul>
 800bc9c:	4642      	mov	r2, r8
 800bc9e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bca2:	464b      	mov	r3, r9
 800bca4:	4620      	mov	r0, r4
 800bca6:	4629      	mov	r1, r5
 800bca8:	f7f4 fae6 	bl	8000278 <__aeabi_dsub>
 800bcac:	4602      	mov	r2, r0
 800bcae:	460b      	mov	r3, r1
 800bcb0:	4630      	mov	r0, r6
 800bcb2:	4639      	mov	r1, r7
 800bcb4:	f7f4 fae0 	bl	8000278 <__aeabi_dsub>
 800bcb8:	a333      	add	r3, pc, #204	; (adr r3, 800bd88 <__ieee754_pow+0x708>)
 800bcba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcbe:	f7f4 fc8f 	bl	80005e0 <__aeabi_dmul>
 800bcc2:	a333      	add	r3, pc, #204	; (adr r3, 800bd90 <__ieee754_pow+0x710>)
 800bcc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcc8:	4606      	mov	r6, r0
 800bcca:	460f      	mov	r7, r1
 800bccc:	4620      	mov	r0, r4
 800bcce:	4629      	mov	r1, r5
 800bcd0:	f7f4 fc86 	bl	80005e0 <__aeabi_dmul>
 800bcd4:	4602      	mov	r2, r0
 800bcd6:	460b      	mov	r3, r1
 800bcd8:	4630      	mov	r0, r6
 800bcda:	4639      	mov	r1, r7
 800bcdc:	f7f4 face 	bl	800027c <__adddf3>
 800bce0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bce2:	4b35      	ldr	r3, [pc, #212]	; (800bdb8 <__ieee754_pow+0x738>)
 800bce4:	4413      	add	r3, r2
 800bce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcea:	f7f4 fac7 	bl	800027c <__adddf3>
 800bcee:	4604      	mov	r4, r0
 800bcf0:	9807      	ldr	r0, [sp, #28]
 800bcf2:	460d      	mov	r5, r1
 800bcf4:	f7f4 fc0e 	bl	8000514 <__aeabi_i2d>
 800bcf8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bcfa:	4b30      	ldr	r3, [pc, #192]	; (800bdbc <__ieee754_pow+0x73c>)
 800bcfc:	4413      	add	r3, r2
 800bcfe:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bd02:	4606      	mov	r6, r0
 800bd04:	460f      	mov	r7, r1
 800bd06:	4622      	mov	r2, r4
 800bd08:	462b      	mov	r3, r5
 800bd0a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bd0e:	f7f4 fab5 	bl	800027c <__adddf3>
 800bd12:	4642      	mov	r2, r8
 800bd14:	464b      	mov	r3, r9
 800bd16:	f7f4 fab1 	bl	800027c <__adddf3>
 800bd1a:	4632      	mov	r2, r6
 800bd1c:	463b      	mov	r3, r7
 800bd1e:	f7f4 faad 	bl	800027c <__adddf3>
 800bd22:	9802      	ldr	r0, [sp, #8]
 800bd24:	4632      	mov	r2, r6
 800bd26:	463b      	mov	r3, r7
 800bd28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bd2c:	f7f4 faa4 	bl	8000278 <__aeabi_dsub>
 800bd30:	4642      	mov	r2, r8
 800bd32:	464b      	mov	r3, r9
 800bd34:	f7f4 faa0 	bl	8000278 <__aeabi_dsub>
 800bd38:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bd3c:	e607      	b.n	800b94e <__ieee754_pow+0x2ce>
 800bd3e:	f04f 0a01 	mov.w	sl, #1
 800bd42:	e6a5      	b.n	800ba90 <__ieee754_pow+0x410>
 800bd44:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800bd98 <__ieee754_pow+0x718>
 800bd48:	e613      	b.n	800b972 <__ieee754_pow+0x2f2>
 800bd4a:	bf00      	nop
 800bd4c:	f3af 8000 	nop.w
 800bd50:	4a454eef 	.word	0x4a454eef
 800bd54:	3fca7e28 	.word	0x3fca7e28
 800bd58:	93c9db65 	.word	0x93c9db65
 800bd5c:	3fcd864a 	.word	0x3fcd864a
 800bd60:	a91d4101 	.word	0xa91d4101
 800bd64:	3fd17460 	.word	0x3fd17460
 800bd68:	518f264d 	.word	0x518f264d
 800bd6c:	3fd55555 	.word	0x3fd55555
 800bd70:	db6fabff 	.word	0xdb6fabff
 800bd74:	3fdb6db6 	.word	0x3fdb6db6
 800bd78:	33333303 	.word	0x33333303
 800bd7c:	3fe33333 	.word	0x3fe33333
 800bd80:	e0000000 	.word	0xe0000000
 800bd84:	3feec709 	.word	0x3feec709
 800bd88:	dc3a03fd 	.word	0xdc3a03fd
 800bd8c:	3feec709 	.word	0x3feec709
 800bd90:	145b01f5 	.word	0x145b01f5
 800bd94:	be3e2fe0 	.word	0xbe3e2fe0
 800bd98:	00000000 	.word	0x00000000
 800bd9c:	3ff00000 	.word	0x3ff00000
 800bda0:	43400000 	.word	0x43400000
 800bda4:	0003988e 	.word	0x0003988e
 800bda8:	000bb679 	.word	0x000bb679
 800bdac:	0800ce88 	.word	0x0800ce88
 800bdb0:	3ff00000 	.word	0x3ff00000
 800bdb4:	40080000 	.word	0x40080000
 800bdb8:	0800cea8 	.word	0x0800cea8
 800bdbc:	0800ce98 	.word	0x0800ce98
 800bdc0:	a3b6      	add	r3, pc, #728	; (adr r3, 800c09c <__ieee754_pow+0xa1c>)
 800bdc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc6:	4640      	mov	r0, r8
 800bdc8:	4649      	mov	r1, r9
 800bdca:	f7f4 fa57 	bl	800027c <__adddf3>
 800bdce:	4622      	mov	r2, r4
 800bdd0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bdd4:	462b      	mov	r3, r5
 800bdd6:	4630      	mov	r0, r6
 800bdd8:	4639      	mov	r1, r7
 800bdda:	f7f4 fa4d 	bl	8000278 <__aeabi_dsub>
 800bdde:	4602      	mov	r2, r0
 800bde0:	460b      	mov	r3, r1
 800bde2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bde6:	f7f4 fe8b 	bl	8000b00 <__aeabi_dcmpgt>
 800bdea:	2800      	cmp	r0, #0
 800bdec:	f47f adfe 	bne.w	800b9ec <__ieee754_pow+0x36c>
 800bdf0:	4aa5      	ldr	r2, [pc, #660]	; (800c088 <__ieee754_pow+0xa08>)
 800bdf2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bdf6:	4293      	cmp	r3, r2
 800bdf8:	f340 810c 	ble.w	800c014 <__ieee754_pow+0x994>
 800bdfc:	151b      	asrs	r3, r3, #20
 800bdfe:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800be02:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800be06:	fa4a f303 	asr.w	r3, sl, r3
 800be0a:	445b      	add	r3, fp
 800be0c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800be10:	4e9e      	ldr	r6, [pc, #632]	; (800c08c <__ieee754_pow+0xa0c>)
 800be12:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800be16:	4116      	asrs	r6, r2
 800be18:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800be1c:	2000      	movs	r0, #0
 800be1e:	ea23 0106 	bic.w	r1, r3, r6
 800be22:	f1c2 0214 	rsb	r2, r2, #20
 800be26:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800be2a:	fa4a fa02 	asr.w	sl, sl, r2
 800be2e:	f1bb 0f00 	cmp.w	fp, #0
 800be32:	4602      	mov	r2, r0
 800be34:	460b      	mov	r3, r1
 800be36:	4620      	mov	r0, r4
 800be38:	4629      	mov	r1, r5
 800be3a:	bfb8      	it	lt
 800be3c:	f1ca 0a00 	rsblt	sl, sl, #0
 800be40:	f7f4 fa1a 	bl	8000278 <__aeabi_dsub>
 800be44:	e9cd 0100 	strd	r0, r1, [sp]
 800be48:	4642      	mov	r2, r8
 800be4a:	464b      	mov	r3, r9
 800be4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be50:	f7f4 fa14 	bl	800027c <__adddf3>
 800be54:	2000      	movs	r0, #0
 800be56:	a37a      	add	r3, pc, #488	; (adr r3, 800c040 <__ieee754_pow+0x9c0>)
 800be58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be5c:	4604      	mov	r4, r0
 800be5e:	460d      	mov	r5, r1
 800be60:	f7f4 fbbe 	bl	80005e0 <__aeabi_dmul>
 800be64:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be68:	4606      	mov	r6, r0
 800be6a:	460f      	mov	r7, r1
 800be6c:	4620      	mov	r0, r4
 800be6e:	4629      	mov	r1, r5
 800be70:	f7f4 fa02 	bl	8000278 <__aeabi_dsub>
 800be74:	4602      	mov	r2, r0
 800be76:	460b      	mov	r3, r1
 800be78:	4640      	mov	r0, r8
 800be7a:	4649      	mov	r1, r9
 800be7c:	f7f4 f9fc 	bl	8000278 <__aeabi_dsub>
 800be80:	a371      	add	r3, pc, #452	; (adr r3, 800c048 <__ieee754_pow+0x9c8>)
 800be82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be86:	f7f4 fbab 	bl	80005e0 <__aeabi_dmul>
 800be8a:	a371      	add	r3, pc, #452	; (adr r3, 800c050 <__ieee754_pow+0x9d0>)
 800be8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be90:	4680      	mov	r8, r0
 800be92:	4689      	mov	r9, r1
 800be94:	4620      	mov	r0, r4
 800be96:	4629      	mov	r1, r5
 800be98:	f7f4 fba2 	bl	80005e0 <__aeabi_dmul>
 800be9c:	4602      	mov	r2, r0
 800be9e:	460b      	mov	r3, r1
 800bea0:	4640      	mov	r0, r8
 800bea2:	4649      	mov	r1, r9
 800bea4:	f7f4 f9ea 	bl	800027c <__adddf3>
 800bea8:	4604      	mov	r4, r0
 800beaa:	460d      	mov	r5, r1
 800beac:	4602      	mov	r2, r0
 800beae:	460b      	mov	r3, r1
 800beb0:	4630      	mov	r0, r6
 800beb2:	4639      	mov	r1, r7
 800beb4:	f7f4 f9e2 	bl	800027c <__adddf3>
 800beb8:	4632      	mov	r2, r6
 800beba:	463b      	mov	r3, r7
 800bebc:	4680      	mov	r8, r0
 800bebe:	4689      	mov	r9, r1
 800bec0:	f7f4 f9da 	bl	8000278 <__aeabi_dsub>
 800bec4:	4602      	mov	r2, r0
 800bec6:	460b      	mov	r3, r1
 800bec8:	4620      	mov	r0, r4
 800beca:	4629      	mov	r1, r5
 800becc:	f7f4 f9d4 	bl	8000278 <__aeabi_dsub>
 800bed0:	4642      	mov	r2, r8
 800bed2:	4606      	mov	r6, r0
 800bed4:	460f      	mov	r7, r1
 800bed6:	464b      	mov	r3, r9
 800bed8:	4640      	mov	r0, r8
 800beda:	4649      	mov	r1, r9
 800bedc:	f7f4 fb80 	bl	80005e0 <__aeabi_dmul>
 800bee0:	a35d      	add	r3, pc, #372	; (adr r3, 800c058 <__ieee754_pow+0x9d8>)
 800bee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee6:	4604      	mov	r4, r0
 800bee8:	460d      	mov	r5, r1
 800beea:	f7f4 fb79 	bl	80005e0 <__aeabi_dmul>
 800beee:	a35c      	add	r3, pc, #368	; (adr r3, 800c060 <__ieee754_pow+0x9e0>)
 800bef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bef4:	f7f4 f9c0 	bl	8000278 <__aeabi_dsub>
 800bef8:	4622      	mov	r2, r4
 800befa:	462b      	mov	r3, r5
 800befc:	f7f4 fb70 	bl	80005e0 <__aeabi_dmul>
 800bf00:	a359      	add	r3, pc, #356	; (adr r3, 800c068 <__ieee754_pow+0x9e8>)
 800bf02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf06:	f7f4 f9b9 	bl	800027c <__adddf3>
 800bf0a:	4622      	mov	r2, r4
 800bf0c:	462b      	mov	r3, r5
 800bf0e:	f7f4 fb67 	bl	80005e0 <__aeabi_dmul>
 800bf12:	a357      	add	r3, pc, #348	; (adr r3, 800c070 <__ieee754_pow+0x9f0>)
 800bf14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf18:	f7f4 f9ae 	bl	8000278 <__aeabi_dsub>
 800bf1c:	4622      	mov	r2, r4
 800bf1e:	462b      	mov	r3, r5
 800bf20:	f7f4 fb5e 	bl	80005e0 <__aeabi_dmul>
 800bf24:	a354      	add	r3, pc, #336	; (adr r3, 800c078 <__ieee754_pow+0x9f8>)
 800bf26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf2a:	f7f4 f9a7 	bl	800027c <__adddf3>
 800bf2e:	4622      	mov	r2, r4
 800bf30:	462b      	mov	r3, r5
 800bf32:	f7f4 fb55 	bl	80005e0 <__aeabi_dmul>
 800bf36:	4602      	mov	r2, r0
 800bf38:	460b      	mov	r3, r1
 800bf3a:	4640      	mov	r0, r8
 800bf3c:	4649      	mov	r1, r9
 800bf3e:	f7f4 f99b 	bl	8000278 <__aeabi_dsub>
 800bf42:	4604      	mov	r4, r0
 800bf44:	460d      	mov	r5, r1
 800bf46:	4602      	mov	r2, r0
 800bf48:	460b      	mov	r3, r1
 800bf4a:	4640      	mov	r0, r8
 800bf4c:	4649      	mov	r1, r9
 800bf4e:	f7f4 fb47 	bl	80005e0 <__aeabi_dmul>
 800bf52:	2200      	movs	r2, #0
 800bf54:	e9cd 0100 	strd	r0, r1, [sp]
 800bf58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bf5c:	4620      	mov	r0, r4
 800bf5e:	4629      	mov	r1, r5
 800bf60:	f7f4 f98a 	bl	8000278 <__aeabi_dsub>
 800bf64:	4602      	mov	r2, r0
 800bf66:	460b      	mov	r3, r1
 800bf68:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf6c:	f7f4 fc62 	bl	8000834 <__aeabi_ddiv>
 800bf70:	4632      	mov	r2, r6
 800bf72:	4604      	mov	r4, r0
 800bf74:	460d      	mov	r5, r1
 800bf76:	463b      	mov	r3, r7
 800bf78:	4640      	mov	r0, r8
 800bf7a:	4649      	mov	r1, r9
 800bf7c:	f7f4 fb30 	bl	80005e0 <__aeabi_dmul>
 800bf80:	4632      	mov	r2, r6
 800bf82:	463b      	mov	r3, r7
 800bf84:	f7f4 f97a 	bl	800027c <__adddf3>
 800bf88:	4602      	mov	r2, r0
 800bf8a:	460b      	mov	r3, r1
 800bf8c:	4620      	mov	r0, r4
 800bf8e:	4629      	mov	r1, r5
 800bf90:	f7f4 f972 	bl	8000278 <__aeabi_dsub>
 800bf94:	4642      	mov	r2, r8
 800bf96:	464b      	mov	r3, r9
 800bf98:	f7f4 f96e 	bl	8000278 <__aeabi_dsub>
 800bf9c:	4602      	mov	r2, r0
 800bf9e:	460b      	mov	r3, r1
 800bfa0:	2000      	movs	r0, #0
 800bfa2:	493b      	ldr	r1, [pc, #236]	; (800c090 <__ieee754_pow+0xa10>)
 800bfa4:	f7f4 f968 	bl	8000278 <__aeabi_dsub>
 800bfa8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800bfac:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800bfb0:	4602      	mov	r2, r0
 800bfb2:	460b      	mov	r3, r1
 800bfb4:	da31      	bge.n	800c01a <__ieee754_pow+0x99a>
 800bfb6:	4650      	mov	r0, sl
 800bfb8:	ec43 2b10 	vmov	d0, r2, r3
 800bfbc:	f000 f9c4 	bl	800c348 <scalbn>
 800bfc0:	ec51 0b10 	vmov	r0, r1, d0
 800bfc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bfc8:	f7ff bbf1 	b.w	800b7ae <__ieee754_pow+0x12e>
 800bfcc:	4b31      	ldr	r3, [pc, #196]	; (800c094 <__ieee754_pow+0xa14>)
 800bfce:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800bfd2:	429e      	cmp	r6, r3
 800bfd4:	f77f af0c 	ble.w	800bdf0 <__ieee754_pow+0x770>
 800bfd8:	4b2f      	ldr	r3, [pc, #188]	; (800c098 <__ieee754_pow+0xa18>)
 800bfda:	440b      	add	r3, r1
 800bfdc:	4303      	orrs	r3, r0
 800bfde:	d00b      	beq.n	800bff8 <__ieee754_pow+0x978>
 800bfe0:	a327      	add	r3, pc, #156	; (adr r3, 800c080 <__ieee754_pow+0xa00>)
 800bfe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfe6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bfea:	f7f4 faf9 	bl	80005e0 <__aeabi_dmul>
 800bfee:	a324      	add	r3, pc, #144	; (adr r3, 800c080 <__ieee754_pow+0xa00>)
 800bff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bff4:	f7ff bbdb 	b.w	800b7ae <__ieee754_pow+0x12e>
 800bff8:	4622      	mov	r2, r4
 800bffa:	462b      	mov	r3, r5
 800bffc:	f7f4 f93c 	bl	8000278 <__aeabi_dsub>
 800c000:	4602      	mov	r2, r0
 800c002:	460b      	mov	r3, r1
 800c004:	4640      	mov	r0, r8
 800c006:	4649      	mov	r1, r9
 800c008:	f7f4 fd66 	bl	8000ad8 <__aeabi_dcmple>
 800c00c:	2800      	cmp	r0, #0
 800c00e:	f43f aeef 	beq.w	800bdf0 <__ieee754_pow+0x770>
 800c012:	e7e5      	b.n	800bfe0 <__ieee754_pow+0x960>
 800c014:	f04f 0a00 	mov.w	sl, #0
 800c018:	e716      	b.n	800be48 <__ieee754_pow+0x7c8>
 800c01a:	4621      	mov	r1, r4
 800c01c:	e7d2      	b.n	800bfc4 <__ieee754_pow+0x944>
 800c01e:	2000      	movs	r0, #0
 800c020:	491b      	ldr	r1, [pc, #108]	; (800c090 <__ieee754_pow+0xa10>)
 800c022:	f7ff bb8d 	b.w	800b740 <__ieee754_pow+0xc0>
 800c026:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c02a:	f7ff bb89 	b.w	800b740 <__ieee754_pow+0xc0>
 800c02e:	4630      	mov	r0, r6
 800c030:	4639      	mov	r1, r7
 800c032:	f7ff bb85 	b.w	800b740 <__ieee754_pow+0xc0>
 800c036:	4693      	mov	fp, r2
 800c038:	f7ff bb96 	b.w	800b768 <__ieee754_pow+0xe8>
 800c03c:	f3af 8000 	nop.w
 800c040:	00000000 	.word	0x00000000
 800c044:	3fe62e43 	.word	0x3fe62e43
 800c048:	fefa39ef 	.word	0xfefa39ef
 800c04c:	3fe62e42 	.word	0x3fe62e42
 800c050:	0ca86c39 	.word	0x0ca86c39
 800c054:	be205c61 	.word	0xbe205c61
 800c058:	72bea4d0 	.word	0x72bea4d0
 800c05c:	3e663769 	.word	0x3e663769
 800c060:	c5d26bf1 	.word	0xc5d26bf1
 800c064:	3ebbbd41 	.word	0x3ebbbd41
 800c068:	af25de2c 	.word	0xaf25de2c
 800c06c:	3f11566a 	.word	0x3f11566a
 800c070:	16bebd93 	.word	0x16bebd93
 800c074:	3f66c16c 	.word	0x3f66c16c
 800c078:	5555553e 	.word	0x5555553e
 800c07c:	3fc55555 	.word	0x3fc55555
 800c080:	c2f8f359 	.word	0xc2f8f359
 800c084:	01a56e1f 	.word	0x01a56e1f
 800c088:	3fe00000 	.word	0x3fe00000
 800c08c:	000fffff 	.word	0x000fffff
 800c090:	3ff00000 	.word	0x3ff00000
 800c094:	4090cbff 	.word	0x4090cbff
 800c098:	3f6f3400 	.word	0x3f6f3400
 800c09c:	652b82fe 	.word	0x652b82fe
 800c0a0:	3c971547 	.word	0x3c971547

0800c0a4 <__ieee754_sqrt>:
 800c0a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0a8:	ec55 4b10 	vmov	r4, r5, d0
 800c0ac:	4e54      	ldr	r6, [pc, #336]	; (800c200 <__ieee754_sqrt+0x15c>)
 800c0ae:	43ae      	bics	r6, r5
 800c0b0:	ee10 0a10 	vmov	r0, s0
 800c0b4:	462b      	mov	r3, r5
 800c0b6:	462a      	mov	r2, r5
 800c0b8:	4621      	mov	r1, r4
 800c0ba:	d113      	bne.n	800c0e4 <__ieee754_sqrt+0x40>
 800c0bc:	ee10 2a10 	vmov	r2, s0
 800c0c0:	462b      	mov	r3, r5
 800c0c2:	ee10 0a10 	vmov	r0, s0
 800c0c6:	4629      	mov	r1, r5
 800c0c8:	f7f4 fa8a 	bl	80005e0 <__aeabi_dmul>
 800c0cc:	4602      	mov	r2, r0
 800c0ce:	460b      	mov	r3, r1
 800c0d0:	4620      	mov	r0, r4
 800c0d2:	4629      	mov	r1, r5
 800c0d4:	f7f4 f8d2 	bl	800027c <__adddf3>
 800c0d8:	4604      	mov	r4, r0
 800c0da:	460d      	mov	r5, r1
 800c0dc:	ec45 4b10 	vmov	d0, r4, r5
 800c0e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0e4:	2d00      	cmp	r5, #0
 800c0e6:	dc10      	bgt.n	800c10a <__ieee754_sqrt+0x66>
 800c0e8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c0ec:	4330      	orrs	r0, r6
 800c0ee:	d0f5      	beq.n	800c0dc <__ieee754_sqrt+0x38>
 800c0f0:	b15d      	cbz	r5, 800c10a <__ieee754_sqrt+0x66>
 800c0f2:	ee10 2a10 	vmov	r2, s0
 800c0f6:	462b      	mov	r3, r5
 800c0f8:	4620      	mov	r0, r4
 800c0fa:	4629      	mov	r1, r5
 800c0fc:	f7f4 f8bc 	bl	8000278 <__aeabi_dsub>
 800c100:	4602      	mov	r2, r0
 800c102:	460b      	mov	r3, r1
 800c104:	f7f4 fb96 	bl	8000834 <__aeabi_ddiv>
 800c108:	e7e6      	b.n	800c0d8 <__ieee754_sqrt+0x34>
 800c10a:	151b      	asrs	r3, r3, #20
 800c10c:	d10c      	bne.n	800c128 <__ieee754_sqrt+0x84>
 800c10e:	2a00      	cmp	r2, #0
 800c110:	d06d      	beq.n	800c1ee <__ieee754_sqrt+0x14a>
 800c112:	2000      	movs	r0, #0
 800c114:	02d6      	lsls	r6, r2, #11
 800c116:	d56e      	bpl.n	800c1f6 <__ieee754_sqrt+0x152>
 800c118:	1e44      	subs	r4, r0, #1
 800c11a:	1b1b      	subs	r3, r3, r4
 800c11c:	f1c0 0420 	rsb	r4, r0, #32
 800c120:	fa21 f404 	lsr.w	r4, r1, r4
 800c124:	4322      	orrs	r2, r4
 800c126:	4081      	lsls	r1, r0
 800c128:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c12c:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800c130:	07dd      	lsls	r5, r3, #31
 800c132:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800c136:	bf42      	ittt	mi
 800c138:	0052      	lslmi	r2, r2, #1
 800c13a:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 800c13e:	0049      	lslmi	r1, r1, #1
 800c140:	1058      	asrs	r0, r3, #1
 800c142:	2500      	movs	r5, #0
 800c144:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 800c148:	441a      	add	r2, r3
 800c14a:	0049      	lsls	r1, r1, #1
 800c14c:	2316      	movs	r3, #22
 800c14e:	462c      	mov	r4, r5
 800c150:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800c154:	19a7      	adds	r7, r4, r6
 800c156:	4297      	cmp	r7, r2
 800c158:	bfde      	ittt	le
 800c15a:	1bd2      	suble	r2, r2, r7
 800c15c:	19bc      	addle	r4, r7, r6
 800c15e:	19ad      	addle	r5, r5, r6
 800c160:	0052      	lsls	r2, r2, #1
 800c162:	3b01      	subs	r3, #1
 800c164:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800c168:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c16c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c170:	d1f0      	bne.n	800c154 <__ieee754_sqrt+0xb0>
 800c172:	f04f 0e20 	mov.w	lr, #32
 800c176:	469c      	mov	ip, r3
 800c178:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c17c:	42a2      	cmp	r2, r4
 800c17e:	eb06 070c 	add.w	r7, r6, ip
 800c182:	dc02      	bgt.n	800c18a <__ieee754_sqrt+0xe6>
 800c184:	d112      	bne.n	800c1ac <__ieee754_sqrt+0x108>
 800c186:	428f      	cmp	r7, r1
 800c188:	d810      	bhi.n	800c1ac <__ieee754_sqrt+0x108>
 800c18a:	2f00      	cmp	r7, #0
 800c18c:	eb07 0c06 	add.w	ip, r7, r6
 800c190:	da34      	bge.n	800c1fc <__ieee754_sqrt+0x158>
 800c192:	f1bc 0f00 	cmp.w	ip, #0
 800c196:	db31      	blt.n	800c1fc <__ieee754_sqrt+0x158>
 800c198:	f104 0801 	add.w	r8, r4, #1
 800c19c:	1b12      	subs	r2, r2, r4
 800c19e:	428f      	cmp	r7, r1
 800c1a0:	bf88      	it	hi
 800c1a2:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800c1a6:	1bc9      	subs	r1, r1, r7
 800c1a8:	4433      	add	r3, r6
 800c1aa:	4644      	mov	r4, r8
 800c1ac:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 800c1b0:	f1be 0e01 	subs.w	lr, lr, #1
 800c1b4:	443a      	add	r2, r7
 800c1b6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c1ba:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c1be:	d1dd      	bne.n	800c17c <__ieee754_sqrt+0xd8>
 800c1c0:	430a      	orrs	r2, r1
 800c1c2:	d006      	beq.n	800c1d2 <__ieee754_sqrt+0x12e>
 800c1c4:	1c5c      	adds	r4, r3, #1
 800c1c6:	bf13      	iteet	ne
 800c1c8:	3301      	addne	r3, #1
 800c1ca:	3501      	addeq	r5, #1
 800c1cc:	4673      	moveq	r3, lr
 800c1ce:	f023 0301 	bicne.w	r3, r3, #1
 800c1d2:	106a      	asrs	r2, r5, #1
 800c1d4:	085b      	lsrs	r3, r3, #1
 800c1d6:	07e9      	lsls	r1, r5, #31
 800c1d8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800c1dc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800c1e0:	bf48      	it	mi
 800c1e2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800c1e6:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800c1ea:	461c      	mov	r4, r3
 800c1ec:	e776      	b.n	800c0dc <__ieee754_sqrt+0x38>
 800c1ee:	0aca      	lsrs	r2, r1, #11
 800c1f0:	3b15      	subs	r3, #21
 800c1f2:	0549      	lsls	r1, r1, #21
 800c1f4:	e78b      	b.n	800c10e <__ieee754_sqrt+0x6a>
 800c1f6:	0052      	lsls	r2, r2, #1
 800c1f8:	3001      	adds	r0, #1
 800c1fa:	e78b      	b.n	800c114 <__ieee754_sqrt+0x70>
 800c1fc:	46a0      	mov	r8, r4
 800c1fe:	e7cd      	b.n	800c19c <__ieee754_sqrt+0xf8>
 800c200:	7ff00000 	.word	0x7ff00000

0800c204 <fabs>:
 800c204:	ec53 2b10 	vmov	r2, r3, d0
 800c208:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c20c:	ec43 2b10 	vmov	d0, r2, r3
 800c210:	4770      	bx	lr

0800c212 <finite>:
 800c212:	ee10 3a90 	vmov	r3, s1
 800c216:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800c21a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c21e:	0fc0      	lsrs	r0, r0, #31
 800c220:	4770      	bx	lr

0800c222 <matherr>:
 800c222:	2000      	movs	r0, #0
 800c224:	4770      	bx	lr
	...

0800c228 <nan>:
 800c228:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c230 <nan+0x8>
 800c22c:	4770      	bx	lr
 800c22e:	bf00      	nop
 800c230:	00000000 	.word	0x00000000
 800c234:	7ff80000 	.word	0x7ff80000

0800c238 <rint>:
 800c238:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c23a:	ec51 0b10 	vmov	r0, r1, d0
 800c23e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800c242:	f2a4 36ff 	subw	r6, r4, #1023	; 0x3ff
 800c246:	2e13      	cmp	r6, #19
 800c248:	ee10 7a10 	vmov	r7, s0
 800c24c:	460b      	mov	r3, r1
 800c24e:	4602      	mov	r2, r0
 800c250:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800c254:	dc58      	bgt.n	800c308 <rint+0xd0>
 800c256:	2e00      	cmp	r6, #0
 800c258:	da2b      	bge.n	800c2b2 <rint+0x7a>
 800c25a:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800c25e:	4302      	orrs	r2, r0
 800c260:	d023      	beq.n	800c2aa <rint+0x72>
 800c262:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800c266:	4302      	orrs	r2, r0
 800c268:	4251      	negs	r1, r2
 800c26a:	4311      	orrs	r1, r2
 800c26c:	0b09      	lsrs	r1, r1, #12
 800c26e:	0c5b      	lsrs	r3, r3, #17
 800c270:	f401 2100 	and.w	r1, r1, #524288	; 0x80000
 800c274:	045b      	lsls	r3, r3, #17
 800c276:	ea41 0703 	orr.w	r7, r1, r3
 800c27a:	4b31      	ldr	r3, [pc, #196]	; (800c340 <rint+0x108>)
 800c27c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c280:	4639      	mov	r1, r7
 800c282:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c286:	ee10 0a10 	vmov	r0, s0
 800c28a:	4632      	mov	r2, r6
 800c28c:	463b      	mov	r3, r7
 800c28e:	f7f3 fff5 	bl	800027c <__adddf3>
 800c292:	e9cd 0100 	strd	r0, r1, [sp]
 800c296:	463b      	mov	r3, r7
 800c298:	4632      	mov	r2, r6
 800c29a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c29e:	f7f3 ffeb 	bl	8000278 <__aeabi_dsub>
 800c2a2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c2a6:	ea43 71c5 	orr.w	r1, r3, r5, lsl #31
 800c2aa:	ec41 0b10 	vmov	d0, r0, r1
 800c2ae:	b003      	add	sp, #12
 800c2b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2b2:	4c24      	ldr	r4, [pc, #144]	; (800c344 <rint+0x10c>)
 800c2b4:	4134      	asrs	r4, r6
 800c2b6:	ea01 0704 	and.w	r7, r1, r4
 800c2ba:	4307      	orrs	r7, r0
 800c2bc:	d0f5      	beq.n	800c2aa <rint+0x72>
 800c2be:	0861      	lsrs	r1, r4, #1
 800c2c0:	ea03 0001 	and.w	r0, r3, r1
 800c2c4:	4302      	orrs	r2, r0
 800c2c6:	d00b      	beq.n	800c2e0 <rint+0xa8>
 800c2c8:	ea23 0101 	bic.w	r1, r3, r1
 800c2cc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c2d0:	2e13      	cmp	r6, #19
 800c2d2:	fa43 f306 	asr.w	r3, r3, r6
 800c2d6:	bf0c      	ite	eq
 800c2d8:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 800c2dc:	2200      	movne	r2, #0
 800c2de:	430b      	orrs	r3, r1
 800c2e0:	4619      	mov	r1, r3
 800c2e2:	4b17      	ldr	r3, [pc, #92]	; (800c340 <rint+0x108>)
 800c2e4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c2e8:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c2ec:	4610      	mov	r0, r2
 800c2ee:	462b      	mov	r3, r5
 800c2f0:	4622      	mov	r2, r4
 800c2f2:	f7f3 ffc3 	bl	800027c <__adddf3>
 800c2f6:	e9cd 0100 	strd	r0, r1, [sp]
 800c2fa:	4622      	mov	r2, r4
 800c2fc:	462b      	mov	r3, r5
 800c2fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c302:	f7f3 ffb9 	bl	8000278 <__aeabi_dsub>
 800c306:	e7d0      	b.n	800c2aa <rint+0x72>
 800c308:	2e33      	cmp	r6, #51	; 0x33
 800c30a:	dd08      	ble.n	800c31e <rint+0xe6>
 800c30c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c310:	d1cb      	bne.n	800c2aa <rint+0x72>
 800c312:	ee10 2a10 	vmov	r2, s0
 800c316:	460b      	mov	r3, r1
 800c318:	f7f3 ffb0 	bl	800027c <__adddf3>
 800c31c:	e7c5      	b.n	800c2aa <rint+0x72>
 800c31e:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800c322:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c326:	40f4      	lsrs	r4, r6
 800c328:	4220      	tst	r0, r4
 800c32a:	d0be      	beq.n	800c2aa <rint+0x72>
 800c32c:	0861      	lsrs	r1, r4, #1
 800c32e:	420f      	tst	r7, r1
 800c330:	bf1f      	itttt	ne
 800c332:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 800c336:	ea27 0101 	bicne.w	r1, r7, r1
 800c33a:	4132      	asrne	r2, r6
 800c33c:	430a      	orrne	r2, r1
 800c33e:	e7cf      	b.n	800c2e0 <rint+0xa8>
 800c340:	0800ceb8 	.word	0x0800ceb8
 800c344:	000fffff 	.word	0x000fffff

0800c348 <scalbn>:
 800c348:	b570      	push	{r4, r5, r6, lr}
 800c34a:	ec55 4b10 	vmov	r4, r5, d0
 800c34e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c352:	4606      	mov	r6, r0
 800c354:	462b      	mov	r3, r5
 800c356:	b9b2      	cbnz	r2, 800c386 <scalbn+0x3e>
 800c358:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c35c:	4323      	orrs	r3, r4
 800c35e:	d03c      	beq.n	800c3da <scalbn+0x92>
 800c360:	2200      	movs	r2, #0
 800c362:	4b33      	ldr	r3, [pc, #204]	; (800c430 <scalbn+0xe8>)
 800c364:	4629      	mov	r1, r5
 800c366:	ee10 0a10 	vmov	r0, s0
 800c36a:	f7f4 f939 	bl	80005e0 <__aeabi_dmul>
 800c36e:	4a31      	ldr	r2, [pc, #196]	; (800c434 <scalbn+0xec>)
 800c370:	4296      	cmp	r6, r2
 800c372:	4604      	mov	r4, r0
 800c374:	460d      	mov	r5, r1
 800c376:	460b      	mov	r3, r1
 800c378:	da13      	bge.n	800c3a2 <scalbn+0x5a>
 800c37a:	a329      	add	r3, pc, #164	; (adr r3, 800c420 <scalbn+0xd8>)
 800c37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c380:	f7f4 f92e 	bl	80005e0 <__aeabi_dmul>
 800c384:	e00a      	b.n	800c39c <scalbn+0x54>
 800c386:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c38a:	428a      	cmp	r2, r1
 800c38c:	d10c      	bne.n	800c3a8 <scalbn+0x60>
 800c38e:	ee10 2a10 	vmov	r2, s0
 800c392:	462b      	mov	r3, r5
 800c394:	4620      	mov	r0, r4
 800c396:	4629      	mov	r1, r5
 800c398:	f7f3 ff70 	bl	800027c <__adddf3>
 800c39c:	4604      	mov	r4, r0
 800c39e:	460d      	mov	r5, r1
 800c3a0:	e01b      	b.n	800c3da <scalbn+0x92>
 800c3a2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c3a6:	3a36      	subs	r2, #54	; 0x36
 800c3a8:	4432      	add	r2, r6
 800c3aa:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c3ae:	428a      	cmp	r2, r1
 800c3b0:	dd0b      	ble.n	800c3ca <scalbn+0x82>
 800c3b2:	ec45 4b11 	vmov	d1, r4, r5
 800c3b6:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800c428 <scalbn+0xe0>
 800c3ba:	f000 fa19 	bl	800c7f0 <copysign>
 800c3be:	a31a      	add	r3, pc, #104	; (adr r3, 800c428 <scalbn+0xe0>)
 800c3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3c4:	ec51 0b10 	vmov	r0, r1, d0
 800c3c8:	e7da      	b.n	800c380 <scalbn+0x38>
 800c3ca:	2a00      	cmp	r2, #0
 800c3cc:	dd08      	ble.n	800c3e0 <scalbn+0x98>
 800c3ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c3d2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c3d6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c3da:	ec45 4b10 	vmov	d0, r4, r5
 800c3de:	bd70      	pop	{r4, r5, r6, pc}
 800c3e0:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c3e4:	da0d      	bge.n	800c402 <scalbn+0xba>
 800c3e6:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c3ea:	429e      	cmp	r6, r3
 800c3ec:	ec45 4b11 	vmov	d1, r4, r5
 800c3f0:	dce1      	bgt.n	800c3b6 <scalbn+0x6e>
 800c3f2:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 800c420 <scalbn+0xd8>
 800c3f6:	f000 f9fb 	bl	800c7f0 <copysign>
 800c3fa:	a309      	add	r3, pc, #36	; (adr r3, 800c420 <scalbn+0xd8>)
 800c3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c400:	e7e0      	b.n	800c3c4 <scalbn+0x7c>
 800c402:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c406:	3236      	adds	r2, #54	; 0x36
 800c408:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c40c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c410:	4620      	mov	r0, r4
 800c412:	4629      	mov	r1, r5
 800c414:	2200      	movs	r2, #0
 800c416:	4b08      	ldr	r3, [pc, #32]	; (800c438 <scalbn+0xf0>)
 800c418:	e7b2      	b.n	800c380 <scalbn+0x38>
 800c41a:	bf00      	nop
 800c41c:	f3af 8000 	nop.w
 800c420:	c2f8f359 	.word	0xc2f8f359
 800c424:	01a56e1f 	.word	0x01a56e1f
 800c428:	8800759c 	.word	0x8800759c
 800c42c:	7e37e43c 	.word	0x7e37e43c
 800c430:	43500000 	.word	0x43500000
 800c434:	ffff3cb0 	.word	0xffff3cb0
 800c438:	3c900000 	.word	0x3c900000
 800c43c:	00000000 	.word	0x00000000

0800c440 <__ieee754_log>:
 800c440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c444:	ec51 0b10 	vmov	r0, r1, d0
 800c448:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800c44c:	b087      	sub	sp, #28
 800c44e:	ee10 3a10 	vmov	r3, s0
 800c452:	460d      	mov	r5, r1
 800c454:	da27      	bge.n	800c4a6 <__ieee754_log+0x66>
 800c456:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800c45a:	4313      	orrs	r3, r2
 800c45c:	d10a      	bne.n	800c474 <__ieee754_log+0x34>
 800c45e:	49cc      	ldr	r1, [pc, #816]	; (800c790 <__ieee754_log+0x350>)
 800c460:	2200      	movs	r2, #0
 800c462:	2300      	movs	r3, #0
 800c464:	2000      	movs	r0, #0
 800c466:	f7f4 f9e5 	bl	8000834 <__aeabi_ddiv>
 800c46a:	ec41 0b10 	vmov	d0, r0, r1
 800c46e:	b007      	add	sp, #28
 800c470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c474:	2900      	cmp	r1, #0
 800c476:	da07      	bge.n	800c488 <__ieee754_log+0x48>
 800c478:	ee10 2a10 	vmov	r2, s0
 800c47c:	460b      	mov	r3, r1
 800c47e:	f7f3 fefb 	bl	8000278 <__aeabi_dsub>
 800c482:	2200      	movs	r2, #0
 800c484:	2300      	movs	r3, #0
 800c486:	e7ee      	b.n	800c466 <__ieee754_log+0x26>
 800c488:	4bc2      	ldr	r3, [pc, #776]	; (800c794 <__ieee754_log+0x354>)
 800c48a:	2200      	movs	r2, #0
 800c48c:	f7f4 f8a8 	bl	80005e0 <__aeabi_dmul>
 800c490:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800c494:	460d      	mov	r5, r1
 800c496:	4ac0      	ldr	r2, [pc, #768]	; (800c798 <__ieee754_log+0x358>)
 800c498:	4295      	cmp	r5, r2
 800c49a:	dd06      	ble.n	800c4aa <__ieee754_log+0x6a>
 800c49c:	4602      	mov	r2, r0
 800c49e:	460b      	mov	r3, r1
 800c4a0:	f7f3 feec 	bl	800027c <__adddf3>
 800c4a4:	e7e1      	b.n	800c46a <__ieee754_log+0x2a>
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	e7f5      	b.n	800c496 <__ieee754_log+0x56>
 800c4aa:	152c      	asrs	r4, r5, #20
 800c4ac:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800c4b0:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800c4b4:	441c      	add	r4, r3
 800c4b6:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800c4ba:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800c4be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c4c2:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800c4c6:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800c4ca:	ea42 0105 	orr.w	r1, r2, r5
 800c4ce:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	4bb1      	ldr	r3, [pc, #708]	; (800c79c <__ieee754_log+0x35c>)
 800c4d6:	f7f3 fecf 	bl	8000278 <__aeabi_dsub>
 800c4da:	1cab      	adds	r3, r5, #2
 800c4dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c4e0:	2b02      	cmp	r3, #2
 800c4e2:	4682      	mov	sl, r0
 800c4e4:	468b      	mov	fp, r1
 800c4e6:	f04f 0200 	mov.w	r2, #0
 800c4ea:	dc5b      	bgt.n	800c5a4 <__ieee754_log+0x164>
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	f7f4 fadf 	bl	8000ab0 <__aeabi_dcmpeq>
 800c4f2:	b1d0      	cbz	r0, 800c52a <__ieee754_log+0xea>
 800c4f4:	2c00      	cmp	r4, #0
 800c4f6:	f000 8170 	beq.w	800c7da <__ieee754_log+0x39a>
 800c4fa:	4620      	mov	r0, r4
 800c4fc:	f7f4 f80a 	bl	8000514 <__aeabi_i2d>
 800c500:	a38f      	add	r3, pc, #572	; (adr r3, 800c740 <__ieee754_log+0x300>)
 800c502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c506:	4606      	mov	r6, r0
 800c508:	460f      	mov	r7, r1
 800c50a:	f7f4 f869 	bl	80005e0 <__aeabi_dmul>
 800c50e:	a38e      	add	r3, pc, #568	; (adr r3, 800c748 <__ieee754_log+0x308>)
 800c510:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c514:	4604      	mov	r4, r0
 800c516:	460d      	mov	r5, r1
 800c518:	4630      	mov	r0, r6
 800c51a:	4639      	mov	r1, r7
 800c51c:	f7f4 f860 	bl	80005e0 <__aeabi_dmul>
 800c520:	4602      	mov	r2, r0
 800c522:	460b      	mov	r3, r1
 800c524:	4620      	mov	r0, r4
 800c526:	4629      	mov	r1, r5
 800c528:	e7ba      	b.n	800c4a0 <__ieee754_log+0x60>
 800c52a:	a389      	add	r3, pc, #548	; (adr r3, 800c750 <__ieee754_log+0x310>)
 800c52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c530:	4650      	mov	r0, sl
 800c532:	4659      	mov	r1, fp
 800c534:	f7f4 f854 	bl	80005e0 <__aeabi_dmul>
 800c538:	4602      	mov	r2, r0
 800c53a:	460b      	mov	r3, r1
 800c53c:	2000      	movs	r0, #0
 800c53e:	4998      	ldr	r1, [pc, #608]	; (800c7a0 <__ieee754_log+0x360>)
 800c540:	f7f3 fe9a 	bl	8000278 <__aeabi_dsub>
 800c544:	4652      	mov	r2, sl
 800c546:	4606      	mov	r6, r0
 800c548:	460f      	mov	r7, r1
 800c54a:	465b      	mov	r3, fp
 800c54c:	4650      	mov	r0, sl
 800c54e:	4659      	mov	r1, fp
 800c550:	f7f4 f846 	bl	80005e0 <__aeabi_dmul>
 800c554:	4602      	mov	r2, r0
 800c556:	460b      	mov	r3, r1
 800c558:	4630      	mov	r0, r6
 800c55a:	4639      	mov	r1, r7
 800c55c:	f7f4 f840 	bl	80005e0 <__aeabi_dmul>
 800c560:	4606      	mov	r6, r0
 800c562:	460f      	mov	r7, r1
 800c564:	b934      	cbnz	r4, 800c574 <__ieee754_log+0x134>
 800c566:	4602      	mov	r2, r0
 800c568:	460b      	mov	r3, r1
 800c56a:	4650      	mov	r0, sl
 800c56c:	4659      	mov	r1, fp
 800c56e:	f7f3 fe83 	bl	8000278 <__aeabi_dsub>
 800c572:	e77a      	b.n	800c46a <__ieee754_log+0x2a>
 800c574:	4620      	mov	r0, r4
 800c576:	f7f3 ffcd 	bl	8000514 <__aeabi_i2d>
 800c57a:	a371      	add	r3, pc, #452	; (adr r3, 800c740 <__ieee754_log+0x300>)
 800c57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c580:	4680      	mov	r8, r0
 800c582:	4689      	mov	r9, r1
 800c584:	f7f4 f82c 	bl	80005e0 <__aeabi_dmul>
 800c588:	a36f      	add	r3, pc, #444	; (adr r3, 800c748 <__ieee754_log+0x308>)
 800c58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c58e:	4604      	mov	r4, r0
 800c590:	460d      	mov	r5, r1
 800c592:	4640      	mov	r0, r8
 800c594:	4649      	mov	r1, r9
 800c596:	f7f4 f823 	bl	80005e0 <__aeabi_dmul>
 800c59a:	4602      	mov	r2, r0
 800c59c:	460b      	mov	r3, r1
 800c59e:	4630      	mov	r0, r6
 800c5a0:	4639      	mov	r1, r7
 800c5a2:	e0b2      	b.n	800c70a <__ieee754_log+0x2ca>
 800c5a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c5a8:	f7f3 fe68 	bl	800027c <__adddf3>
 800c5ac:	4602      	mov	r2, r0
 800c5ae:	460b      	mov	r3, r1
 800c5b0:	4650      	mov	r0, sl
 800c5b2:	4659      	mov	r1, fp
 800c5b4:	f7f4 f93e 	bl	8000834 <__aeabi_ddiv>
 800c5b8:	e9cd 0100 	strd	r0, r1, [sp]
 800c5bc:	4620      	mov	r0, r4
 800c5be:	f7f3 ffa9 	bl	8000514 <__aeabi_i2d>
 800c5c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c5c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c5ca:	4610      	mov	r0, r2
 800c5cc:	4619      	mov	r1, r3
 800c5ce:	f7f4 f807 	bl	80005e0 <__aeabi_dmul>
 800c5d2:	4602      	mov	r2, r0
 800c5d4:	460b      	mov	r3, r1
 800c5d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c5da:	f7f4 f801 	bl	80005e0 <__aeabi_dmul>
 800c5de:	a35e      	add	r3, pc, #376	; (adr r3, 800c758 <__ieee754_log+0x318>)
 800c5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5e4:	4606      	mov	r6, r0
 800c5e6:	460f      	mov	r7, r1
 800c5e8:	f7f3 fffa 	bl	80005e0 <__aeabi_dmul>
 800c5ec:	a35c      	add	r3, pc, #368	; (adr r3, 800c760 <__ieee754_log+0x320>)
 800c5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5f2:	f7f3 fe43 	bl	800027c <__adddf3>
 800c5f6:	4632      	mov	r2, r6
 800c5f8:	463b      	mov	r3, r7
 800c5fa:	f7f3 fff1 	bl	80005e0 <__aeabi_dmul>
 800c5fe:	a35a      	add	r3, pc, #360	; (adr r3, 800c768 <__ieee754_log+0x328>)
 800c600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c604:	f7f3 fe3a 	bl	800027c <__adddf3>
 800c608:	4632      	mov	r2, r6
 800c60a:	463b      	mov	r3, r7
 800c60c:	f7f3 ffe8 	bl	80005e0 <__aeabi_dmul>
 800c610:	a357      	add	r3, pc, #348	; (adr r3, 800c770 <__ieee754_log+0x330>)
 800c612:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c616:	f7f3 fe31 	bl	800027c <__adddf3>
 800c61a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c61e:	f7f3 ffdf 	bl	80005e0 <__aeabi_dmul>
 800c622:	a355      	add	r3, pc, #340	; (adr r3, 800c778 <__ieee754_log+0x338>)
 800c624:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c628:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c62c:	4630      	mov	r0, r6
 800c62e:	4639      	mov	r1, r7
 800c630:	f7f3 ffd6 	bl	80005e0 <__aeabi_dmul>
 800c634:	a352      	add	r3, pc, #328	; (adr r3, 800c780 <__ieee754_log+0x340>)
 800c636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c63a:	f7f3 fe1f 	bl	800027c <__adddf3>
 800c63e:	4632      	mov	r2, r6
 800c640:	463b      	mov	r3, r7
 800c642:	f7f3 ffcd 	bl	80005e0 <__aeabi_dmul>
 800c646:	a350      	add	r3, pc, #320	; (adr r3, 800c788 <__ieee754_log+0x348>)
 800c648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c64c:	f7f3 fe16 	bl	800027c <__adddf3>
 800c650:	4632      	mov	r2, r6
 800c652:	463b      	mov	r3, r7
 800c654:	f7f3 ffc4 	bl	80005e0 <__aeabi_dmul>
 800c658:	f5a5 28c2 	sub.w	r8, r5, #397312	; 0x61000
 800c65c:	4602      	mov	r2, r0
 800c65e:	460b      	mov	r3, r1
 800c660:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800c664:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c668:	f7f3 fe08 	bl	800027c <__adddf3>
 800c66c:	f2a8 487a 	subw	r8, r8, #1146	; 0x47a
 800c670:	3551      	adds	r5, #81	; 0x51
 800c672:	ea45 0508 	orr.w	r5, r5, r8
 800c676:	2d00      	cmp	r5, #0
 800c678:	4606      	mov	r6, r0
 800c67a:	460f      	mov	r7, r1
 800c67c:	dd50      	ble.n	800c720 <__ieee754_log+0x2e0>
 800c67e:	2200      	movs	r2, #0
 800c680:	4b47      	ldr	r3, [pc, #284]	; (800c7a0 <__ieee754_log+0x360>)
 800c682:	4650      	mov	r0, sl
 800c684:	4659      	mov	r1, fp
 800c686:	f7f3 ffab 	bl	80005e0 <__aeabi_dmul>
 800c68a:	4652      	mov	r2, sl
 800c68c:	465b      	mov	r3, fp
 800c68e:	f7f3 ffa7 	bl	80005e0 <__aeabi_dmul>
 800c692:	4680      	mov	r8, r0
 800c694:	4689      	mov	r9, r1
 800c696:	b994      	cbnz	r4, 800c6be <__ieee754_log+0x27e>
 800c698:	4602      	mov	r2, r0
 800c69a:	460b      	mov	r3, r1
 800c69c:	4630      	mov	r0, r6
 800c69e:	4639      	mov	r1, r7
 800c6a0:	f7f3 fdec 	bl	800027c <__adddf3>
 800c6a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c6a8:	f7f3 ff9a 	bl	80005e0 <__aeabi_dmul>
 800c6ac:	4602      	mov	r2, r0
 800c6ae:	460b      	mov	r3, r1
 800c6b0:	4640      	mov	r0, r8
 800c6b2:	4649      	mov	r1, r9
 800c6b4:	f7f3 fde0 	bl	8000278 <__aeabi_dsub>
 800c6b8:	4602      	mov	r2, r0
 800c6ba:	460b      	mov	r3, r1
 800c6bc:	e755      	b.n	800c56a <__ieee754_log+0x12a>
 800c6be:	a320      	add	r3, pc, #128	; (adr r3, 800c740 <__ieee754_log+0x300>)
 800c6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c6c8:	f7f3 ff8a 	bl	80005e0 <__aeabi_dmul>
 800c6cc:	4642      	mov	r2, r8
 800c6ce:	464b      	mov	r3, r9
 800c6d0:	4604      	mov	r4, r0
 800c6d2:	460d      	mov	r5, r1
 800c6d4:	4630      	mov	r0, r6
 800c6d6:	4639      	mov	r1, r7
 800c6d8:	f7f3 fdd0 	bl	800027c <__adddf3>
 800c6dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c6e0:	f7f3 ff7e 	bl	80005e0 <__aeabi_dmul>
 800c6e4:	a318      	add	r3, pc, #96	; (adr r3, 800c748 <__ieee754_log+0x308>)
 800c6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ea:	4606      	mov	r6, r0
 800c6ec:	460f      	mov	r7, r1
 800c6ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c6f2:	f7f3 ff75 	bl	80005e0 <__aeabi_dmul>
 800c6f6:	4602      	mov	r2, r0
 800c6f8:	460b      	mov	r3, r1
 800c6fa:	4630      	mov	r0, r6
 800c6fc:	4639      	mov	r1, r7
 800c6fe:	f7f3 fdbd 	bl	800027c <__adddf3>
 800c702:	4602      	mov	r2, r0
 800c704:	460b      	mov	r3, r1
 800c706:	4640      	mov	r0, r8
 800c708:	4649      	mov	r1, r9
 800c70a:	f7f3 fdb5 	bl	8000278 <__aeabi_dsub>
 800c70e:	4652      	mov	r2, sl
 800c710:	465b      	mov	r3, fp
 800c712:	f7f3 fdb1 	bl	8000278 <__aeabi_dsub>
 800c716:	4602      	mov	r2, r0
 800c718:	460b      	mov	r3, r1
 800c71a:	4620      	mov	r0, r4
 800c71c:	4629      	mov	r1, r5
 800c71e:	e726      	b.n	800c56e <__ieee754_log+0x12e>
 800c720:	2c00      	cmp	r4, #0
 800c722:	d13f      	bne.n	800c7a4 <__ieee754_log+0x364>
 800c724:	4602      	mov	r2, r0
 800c726:	460b      	mov	r3, r1
 800c728:	4650      	mov	r0, sl
 800c72a:	4659      	mov	r1, fp
 800c72c:	f7f3 fda4 	bl	8000278 <__aeabi_dsub>
 800c730:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c734:	f7f3 ff54 	bl	80005e0 <__aeabi_dmul>
 800c738:	e7be      	b.n	800c6b8 <__ieee754_log+0x278>
 800c73a:	bf00      	nop
 800c73c:	f3af 8000 	nop.w
 800c740:	fee00000 	.word	0xfee00000
 800c744:	3fe62e42 	.word	0x3fe62e42
 800c748:	35793c76 	.word	0x35793c76
 800c74c:	3dea39ef 	.word	0x3dea39ef
 800c750:	55555555 	.word	0x55555555
 800c754:	3fd55555 	.word	0x3fd55555
 800c758:	df3e5244 	.word	0xdf3e5244
 800c75c:	3fc2f112 	.word	0x3fc2f112
 800c760:	96cb03de 	.word	0x96cb03de
 800c764:	3fc74664 	.word	0x3fc74664
 800c768:	94229359 	.word	0x94229359
 800c76c:	3fd24924 	.word	0x3fd24924
 800c770:	55555593 	.word	0x55555593
 800c774:	3fe55555 	.word	0x3fe55555
 800c778:	d078c69f 	.word	0xd078c69f
 800c77c:	3fc39a09 	.word	0x3fc39a09
 800c780:	1d8e78af 	.word	0x1d8e78af
 800c784:	3fcc71c5 	.word	0x3fcc71c5
 800c788:	9997fa04 	.word	0x9997fa04
 800c78c:	3fd99999 	.word	0x3fd99999
 800c790:	c3500000 	.word	0xc3500000
 800c794:	43500000 	.word	0x43500000
 800c798:	7fefffff 	.word	0x7fefffff
 800c79c:	3ff00000 	.word	0x3ff00000
 800c7a0:	3fe00000 	.word	0x3fe00000
 800c7a4:	a30e      	add	r3, pc, #56	; (adr r3, 800c7e0 <__ieee754_log+0x3a0>)
 800c7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c7ae:	f7f3 ff17 	bl	80005e0 <__aeabi_dmul>
 800c7b2:	4632      	mov	r2, r6
 800c7b4:	463b      	mov	r3, r7
 800c7b6:	4604      	mov	r4, r0
 800c7b8:	460d      	mov	r5, r1
 800c7ba:	4650      	mov	r0, sl
 800c7bc:	4659      	mov	r1, fp
 800c7be:	f7f3 fd5b 	bl	8000278 <__aeabi_dsub>
 800c7c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c7c6:	f7f3 ff0b 	bl	80005e0 <__aeabi_dmul>
 800c7ca:	a307      	add	r3, pc, #28	; (adr r3, 800c7e8 <__ieee754_log+0x3a8>)
 800c7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d0:	4606      	mov	r6, r0
 800c7d2:	460f      	mov	r7, r1
 800c7d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c7d8:	e6dd      	b.n	800c596 <__ieee754_log+0x156>
 800c7da:	2000      	movs	r0, #0
 800c7dc:	2100      	movs	r1, #0
 800c7de:	e644      	b.n	800c46a <__ieee754_log+0x2a>
 800c7e0:	fee00000 	.word	0xfee00000
 800c7e4:	3fe62e42 	.word	0x3fe62e42
 800c7e8:	35793c76 	.word	0x35793c76
 800c7ec:	3dea39ef 	.word	0x3dea39ef

0800c7f0 <copysign>:
 800c7f0:	ec53 2b10 	vmov	r2, r3, d0
 800c7f4:	ee11 0a90 	vmov	r0, s3
 800c7f8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c7fc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800c800:	ea41 0300 	orr.w	r3, r1, r0
 800c804:	ec43 2b10 	vmov	d0, r2, r3
 800c808:	4770      	bx	lr
	...

0800c80c <_init>:
 800c80c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c80e:	bf00      	nop
 800c810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c812:	bc08      	pop	{r3}
 800c814:	469e      	mov	lr, r3
 800c816:	4770      	bx	lr

0800c818 <_fini>:
 800c818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c81a:	bf00      	nop
 800c81c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c81e:	bc08      	pop	{r3}
 800c820:	469e      	mov	lr, r3
 800c822:	4770      	bx	lr
